{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Gothic Modding Community page \ud800\udf3e This GitHub page is designed to contain community maintained set of articles, tutorials and documentation for everything Gothic. First two Gothic games use the engine called ZenGin developed by Piranha Bytes and Mad Scientists. If you want to know more about the history of the development, there is a heap of information on the Gothic Archive . The content here is not meant to be taken as the holy word of modding. We are just modders sharing our experiences, knowledge and our favorite work flows. Feel free to open a pull request with your article, or propose changes. You can open a pull request in this repository Note Work in progress","title":"Welcome to Gothic Modding Community page"},{"location":"#welcome-to-gothic-modding-community-page","text":"This GitHub page is designed to contain community maintained set of articles, tutorials and documentation for everything Gothic. First two Gothic games use the engine called ZenGin developed by Piranha Bytes and Mad Scientists. If you want to know more about the history of the development, there is a heap of information on the Gothic Archive . The content here is not meant to be taken as the holy word of modding. We are just modders sharing our experiences, knowledge and our favorite work flows. Feel free to open a pull request with your article, or propose changes. You can open a pull request in this repository Note Work in progress","title":"Welcome to Gothic Modding Community page"},{"location":"GettingStarted_ZenGin/","text":"Getting started (ZenGin - Gothic 1 & 2) \ud800\udf3e To get started, you will need Gothic MDK (Mod development kit). MDK contains scripts, engine documentation, tutorials and tools to help you create your own modifications. - Gothic 1 MDK - Gothic 2 MDK - link not yet available MDK Contents \ud800\udf3e The MDK contains a lot of things, let's see what is inside. Scripts \ud800\udf3e Arguably the most important part of the MDK are the original scripts. ZenGin's scripting language is called Daedalus and the scripts use .d file extension. Most of the functionality in the game is run by these scripts, from human and monster AI, to the routines of NPC, when do they go to bed, when (and where) do they pee, what items should NPCs have in their inventory, how much damage or how valuable an item should be. Of course some things are hard coded in the engine, but there are ways to alter their behaviour, we will discuss that in a later article. TODO: finish this :trollface:","title":"Getting Started"},{"location":"GettingStarted_ZenGin/#getting-started-zengin-gothic-1-2","text":"To get started, you will need Gothic MDK (Mod development kit). MDK contains scripts, engine documentation, tutorials and tools to help you create your own modifications. - Gothic 1 MDK - Gothic 2 MDK - link not yet available","title":"Getting started (ZenGin - Gothic 1 &amp; 2)"},{"location":"GettingStarted_ZenGin/#mdk-contents","text":"The MDK contains a lot of things, let's see what is inside.","title":"MDK Contents"},{"location":"GettingStarted_ZenGin/#scripts","text":"Arguably the most important part of the MDK are the original scripts. ZenGin's scripting language is called Daedalus and the scripts use .d file extension. Most of the functionality in the game is run by these scripts, from human and monster AI, to the routines of NPC, when do they go to bed, when (and where) do they pee, what items should NPCs have in their inventory, how much damage or how valuable an item should be. Of course some things are hard coded in the engine, but there are ways to alter their behaviour, we will discuss that in a later article. TODO: finish this :trollface:","title":"Scripts"},{"location":"notready/","text":"Warning Sorry, this page is not ready yet!","title":"Notready"},{"location":"genome/","text":"Genome engine \ud800\udf3e Genome engine is new engine created by Piranha Bytes created for the game Gothic 3 and later used for the Risen and ELEX series of games.","title":"Genome engine"},{"location":"genome/#genome-engine","text":"Genome engine is new engine created by Piranha Bytes created for the game Gothic 3 and later used for the Risen and ELEX series of games.","title":"Genome engine"},{"location":"genome/ObjectPersistence/","text":"Object persistence \ud800\udf3e Warning about Risen 2, 3 and ELEX 1 and 2 The following information only applies to the games Gothic 3 (2006) and Risen (2009). While newer Genome engine games share the same overall concepts, they have very important implementation details that would make them require their own section. Due to the nature of the program, the engine is required to store and load a vast amount of different types of data from the user's hard-drive. In order to streamline this parsing and/or serialization process, Genome implements an object persistence system using its own built-in runtime type information (RTTI) system. By using special preprocessor macros, any class derived from bCObjectBase may declare its own member properties in such a way that when the object is then written into a file using the bCAccessorPropertyObject class, its associated properties will be automatically serialized into the stream. When the object is then read back from the file, the class will be automatically initialized using the stored members. Additionally, classes may overload the Read and Write ( OnRead and OnWrite in Risen 1) virtual methods, that allow the class to save additional data required during parsing (such as paths to other necessary files). As this system is quite flexible, it is used to store most of the game's data, from meshes, animations and textures to level and quest data. This is quite different from ZenGin, as its object persistence system is only used for worlds, saves, output units and parts of compiled meshes. File format \ud800\udf3e Files \ud800\udf3e struct bCIOStream { char data []; }; struct eCArchiveFile { char8_t magic [ 8 ]; // \"GENOMFLE\" uint16_t version ; // 0001 uint32_t offset ; char data []; uint32_t magic ; // DEADBEEF uint8_t version ; // 01 uint32_t count ; for ( Count ) { uint16_t length ; char8_t string [ length ]; // (ASCII) } }; bCAccessorPropertyObject \ud800\udf3e bCAccessorPropertyObject :: Read { uint16_t version ; // 0x0001 bool hasPropertyObject ; if ( hasPropertyObject ) { bCPropertyObjectSingleton :: ReadObject { uint16_t version ; // 0x0001 bool isPersistable ; // 0x01 (GETrue) bCString className ; bCPropertyObjectFactory :: ReadObject { uint16_t version ; // 0x0001 bool isRoot ; // 0x00 (GEFalse) uint16_t classVersion ; bTPropertyObject <% , %>:: Read { bCPropertyObjectBase :: Read { uint16_t version ; // 0x00C9 (201) } uint32_t size ; } bTPropertyObject <% , %>:: ReadData { bCPropertyObjectBase :: ReadData { uint16_t version ; // 0x00C9 (201) uint32_t count ; for ( count ) { bCString name ; bCString type ; uint16_t version ; // 0x001E (30) uint32_t size ; uint8_t value [ size ]; } } %:: Read { // ClassName::OnRead/OnWrite() // uint16_t ClassVersion; ... } } } } } } eCProcessibleElement \ud800\udf3e Gothic 3 Risen eCProcessibleElement :: Load { uint32_t magic ; // 0xD0DEFADE bCAccessorPropertyObject :: Read { // Look above for bCAccessorPropertyObject definition } } eCProcessibleElement :: Load { bCAccessorPropertyObject :: Read { // Look above for bCAccessorPropertyObject definition } } Implementation \ud800\udf3e A practical example \ud800\udf3e Let's propose that we have a class which is declared like so: class gCMyClass : public bCObjectRefBase { public : gCMyClass () {} virtual ~ gCMyClass () {} virtual bEResult Write ( bCOStream & ); // OnWrite for Risen virtual bEResult Read ( bCIStream & ); // OnRead for Risen private : DECLARE_PROPERTY ( myInt , int ); int someData ; }; The hypothetical class then implements these virtual functions: bEResult gCMyClass::Write ( bCOStream & file ) { file << someData ; return bEResult_Ok ; } bEResult gCMyClass::Read ( bCIStream & file ) { file >> someData ; return bEResult_Ok ; } We then initialize the class in the following way: gCMyClass object ; object . myInt = 1 ; object . someData = 1 ; If we now serialized, or to use the engine's term \"archived\", this instance into an ASCII stream, the result would look like this:","title":"Object persistence"},{"location":"genome/ObjectPersistence/#object-persistence","text":"Warning about Risen 2, 3 and ELEX 1 and 2 The following information only applies to the games Gothic 3 (2006) and Risen (2009). While newer Genome engine games share the same overall concepts, they have very important implementation details that would make them require their own section. Due to the nature of the program, the engine is required to store and load a vast amount of different types of data from the user's hard-drive. In order to streamline this parsing and/or serialization process, Genome implements an object persistence system using its own built-in runtime type information (RTTI) system. By using special preprocessor macros, any class derived from bCObjectBase may declare its own member properties in such a way that when the object is then written into a file using the bCAccessorPropertyObject class, its associated properties will be automatically serialized into the stream. When the object is then read back from the file, the class will be automatically initialized using the stored members. Additionally, classes may overload the Read and Write ( OnRead and OnWrite in Risen 1) virtual methods, that allow the class to save additional data required during parsing (such as paths to other necessary files). As this system is quite flexible, it is used to store most of the game's data, from meshes, animations and textures to level and quest data. This is quite different from ZenGin, as its object persistence system is only used for worlds, saves, output units and parts of compiled meshes.","title":"Object persistence"},{"location":"genome/ObjectPersistence/#file-format","text":"","title":"File format"},{"location":"genome/ObjectPersistence/#files","text":"struct bCIOStream { char data []; }; struct eCArchiveFile { char8_t magic [ 8 ]; // \"GENOMFLE\" uint16_t version ; // 0001 uint32_t offset ; char data []; uint32_t magic ; // DEADBEEF uint8_t version ; // 01 uint32_t count ; for ( Count ) { uint16_t length ; char8_t string [ length ]; // (ASCII) } };","title":"Files"},{"location":"genome/ObjectPersistence/#bcaccessorpropertyobject","text":"bCAccessorPropertyObject :: Read { uint16_t version ; // 0x0001 bool hasPropertyObject ; if ( hasPropertyObject ) { bCPropertyObjectSingleton :: ReadObject { uint16_t version ; // 0x0001 bool isPersistable ; // 0x01 (GETrue) bCString className ; bCPropertyObjectFactory :: ReadObject { uint16_t version ; // 0x0001 bool isRoot ; // 0x00 (GEFalse) uint16_t classVersion ; bTPropertyObject <% , %>:: Read { bCPropertyObjectBase :: Read { uint16_t version ; // 0x00C9 (201) } uint32_t size ; } bTPropertyObject <% , %>:: ReadData { bCPropertyObjectBase :: ReadData { uint16_t version ; // 0x00C9 (201) uint32_t count ; for ( count ) { bCString name ; bCString type ; uint16_t version ; // 0x001E (30) uint32_t size ; uint8_t value [ size ]; } } %:: Read { // ClassName::OnRead/OnWrite() // uint16_t ClassVersion; ... } } } } } }","title":"bCAccessorPropertyObject"},{"location":"genome/ObjectPersistence/#ecprocessibleelement","text":"Gothic 3 Risen eCProcessibleElement :: Load { uint32_t magic ; // 0xD0DEFADE bCAccessorPropertyObject :: Read { // Look above for bCAccessorPropertyObject definition } } eCProcessibleElement :: Load { bCAccessorPropertyObject :: Read { // Look above for bCAccessorPropertyObject definition } }","title":"eCProcessibleElement"},{"location":"genome/ObjectPersistence/#implementation","text":"","title":"Implementation"},{"location":"genome/ObjectPersistence/#a-practical-example","text":"Let's propose that we have a class which is declared like so: class gCMyClass : public bCObjectRefBase { public : gCMyClass () {} virtual ~ gCMyClass () {} virtual bEResult Write ( bCOStream & ); // OnWrite for Risen virtual bEResult Read ( bCIStream & ); // OnRead for Risen private : DECLARE_PROPERTY ( myInt , int ); int someData ; }; The hypothetical class then implements these virtual functions: bEResult gCMyClass::Write ( bCOStream & file ) { file << someData ; return bEResult_Ok ; } bEResult gCMyClass::Read ( bCIStream & file ) { file >> someData ; return bEResult_Ok ; } We then initialize the class in the following way: gCMyClass object ; object . myInt = 1 ; object . someData = 1 ; If we now serialized, or to use the engine's term \"archived\", this instance into an ASCII stream, the result would look like this:","title":"A practical example"},{"location":"zengin/anims/","text":"Animation \ud800\udf3e Animations in ZenGin \ud800\udf3e Animations (apart from maybe advanced programming work using Ikarus or Union) are one of the most advanced modding techniques, since you not only must understand the way they work, but also know how to write the animation script and understand the whole sceme selection system, naming convention and of course know how to animate (that is my biggest problem :D). To get a new animation into ZenGin (the Gothic engine) is not difficult per se, I would describe it as tedious. Luckily, there are tools to help us to achieve our goal - get a new animation to be used by the engine, and in effect, to be used and seen in the game. To describe the whole process, I constructed this small tutorial, to help other people to get animations working and to spare them many hours of searching the excellent forum posts, that describe parts of the process. Prerequisites - Tools & Materials \ud800\udf3e Gothic MDK (Mod Development Kit) Gothic 1 MDK - link Gothic 2 MDK - link Blender Kerrax's Import Export plugin - follow the installation instructions to install the plugin, make sure to set up the texture paths too Tool for decompiling animations GothicSourcer , or use phoenix or write your own using ZenLib The work flow \ud800\udf3e This is the basic step-by-step on how to get the animation into the game. Load the actor (character or object) into your 3D software Create your animation Export the animation as an .asc file Write the MDS file Run the game to compile your animations Test your animations in-game using a Daedalus script or a console command That all sound great, but how do you actually do it? Even though, the steps start with loading the actor into blender, I think it is much more important, to understand the system of animations, to get high quality assets into your mod. Animation \"types\" \ud800\udf3e There are two main types of animations - skeletal and morphmesh animations. Character body animations are skeletal - meaning we animate a skeleton and the entire model (skin) moves around it. And the morph mesh animation, that is used for facial animations (eating, blinking, talking,...) and for animated meshes (wavy water ferns, fish in Khorinis' harbor,...). The animations we are concerned with are the skeletal ones. I divide them into few types myself - I hope to have a demonstration on how to make each on of them. Standalone animation - waving, bowing, eating MOBSI animations - bed, alchemy table, anvil Item animations - sweeping the floor with a broomstick, using the horn, playing the lute Mandatory animations - running, walking, sneaking Combined/interpolated animations - picking stuff up, aiming with a bow/crossbow All of these animations are defined in an MDS file about which we will talk about in the next section.","title":"Animation"},{"location":"zengin/anims/#animation","text":"","title":"Animation"},{"location":"zengin/anims/#animations-in-zengin","text":"Animations (apart from maybe advanced programming work using Ikarus or Union) are one of the most advanced modding techniques, since you not only must understand the way they work, but also know how to write the animation script and understand the whole sceme selection system, naming convention and of course know how to animate (that is my biggest problem :D). To get a new animation into ZenGin (the Gothic engine) is not difficult per se, I would describe it as tedious. Luckily, there are tools to help us to achieve our goal - get a new animation to be used by the engine, and in effect, to be used and seen in the game. To describe the whole process, I constructed this small tutorial, to help other people to get animations working and to spare them many hours of searching the excellent forum posts, that describe parts of the process.","title":"Animations in ZenGin"},{"location":"zengin/anims/#prerequisites-tools-materials","text":"Gothic MDK (Mod Development Kit) Gothic 1 MDK - link Gothic 2 MDK - link Blender Kerrax's Import Export plugin - follow the installation instructions to install the plugin, make sure to set up the texture paths too Tool for decompiling animations GothicSourcer , or use phoenix or write your own using ZenLib","title":"Prerequisites - Tools &amp; Materials"},{"location":"zengin/anims/#the-work-flow","text":"This is the basic step-by-step on how to get the animation into the game. Load the actor (character or object) into your 3D software Create your animation Export the animation as an .asc file Write the MDS file Run the game to compile your animations Test your animations in-game using a Daedalus script or a console command That all sound great, but how do you actually do it? Even though, the steps start with loading the actor into blender, I think it is much more important, to understand the system of animations, to get high quality assets into your mod.","title":"The work flow"},{"location":"zengin/anims/#animation-types","text":"There are two main types of animations - skeletal and morphmesh animations. Character body animations are skeletal - meaning we animate a skeleton and the entire model (skin) moves around it. And the morph mesh animation, that is used for facial animations (eating, blinking, talking,...) and for animated meshes (wavy water ferns, fish in Khorinis' harbor,...). The animations we are concerned with are the skeletal ones. I divide them into few types myself - I hope to have a demonstration on how to make each on of them. Standalone animation - waving, bowing, eating MOBSI animations - bed, alchemy table, anvil Item animations - sweeping the floor with a broomstick, using the horn, playing the lute Mandatory animations - running, walking, sneaking Combined/interpolated animations - picking stuff up, aiming with a bow/crossbow All of these animations are defined in an MDS file about which we will talk about in the next section.","title":"Animation \"types\""},{"location":"zengin/anims/AniEventBlocks/","text":"Animation event blocks \ud800\udf3e With animations, we often need to perform some other actions, like playing a sound effect, inserting item into NPCs hand or changing an item instance into a different one (turning a raw steel into hot raw steel). Example: ani ( \"s_RunL\" 1 \"s_RunL\" 0.0 0.1 M . \"Hum_RunLoop_M01.asc\" F 12 31 ) { * eventSFXGrnd ( 12 \"Run\" ) * eventSFXGrnd ( 21 \"Run\" ) } The example shows the animation and its event block. We place these events into a block surrounded by curly brackets. There are many events to choose from to choose from, here are some examples: Sound effects * eventSFXGrnd ( 12 \"Run\" ) * eventSFX ( 10 \"Swim\" ) Particle effects * eventPFX ( 12 \"ZMODELLANDDUST\" \"Bip01\" ) * eventPFX ( 35 1 \"BUBBLES\" \"BIP01 HEAD\" ATTACH ) * eventPFXStop ( 45 1 ) Morph mesh animations Heads are animated using morph meshes, this feature is not used as much in the original game, but Chronicles of Myrtana uses it quite a lot. I hope to write about morphMesh animation too in the future. * eventMMStartAni ( 14 \"T_HURT\" ) Event tags * eventTag ( 5 \"DEF_FIGHTMODE\" \"\" ) * eventTag ( 0 \"DEF_HIT_LIMB\" \"ZS_RIGHTHAND\" ) * eventTag ( 0 \"DEF_OPT_FRAME\" \"6\" ) * eventTag ( 0 \"DEF_HIT_END\" \"29\" ) * eventTag ( 0 \"DEF_WINDOW\" \"18 35\" ) * eventTa ( 4 \"DEF_INSERT_ITEM\" \"ZS_LEFTHAND\" ) * eventTa ( 4 \"DEF_CREATE_ITEM\" \"ZS_RIGHTHAND\" \"ItMw_1H_Sledgehammer_01\" ) * eventTa ( 9 \"DEF_EXCHANGE_ITEM\" \"ZS_LEFTHAND\" \"ItMiSwordbladehot\" ) * eventTa ( 4 \"DEF_REMOVE_ITEM\" )","title":"EventBlocks"},{"location":"zengin/anims/AniEventBlocks/#animation-event-blocks","text":"With animations, we often need to perform some other actions, like playing a sound effect, inserting item into NPCs hand or changing an item instance into a different one (turning a raw steel into hot raw steel). Example: ani ( \"s_RunL\" 1 \"s_RunL\" 0.0 0.1 M . \"Hum_RunLoop_M01.asc\" F 12 31 ) { * eventSFXGrnd ( 12 \"Run\" ) * eventSFXGrnd ( 21 \"Run\" ) } The example shows the animation and its event block. We place these events into a block surrounded by curly brackets. There are many events to choose from to choose from, here are some examples: Sound effects * eventSFXGrnd ( 12 \"Run\" ) * eventSFX ( 10 \"Swim\" ) Particle effects * eventPFX ( 12 \"ZMODELLANDDUST\" \"Bip01\" ) * eventPFX ( 35 1 \"BUBBLES\" \"BIP01 HEAD\" ATTACH ) * eventPFXStop ( 45 1 ) Morph mesh animations Heads are animated using morph meshes, this feature is not used as much in the original game, but Chronicles of Myrtana uses it quite a lot. I hope to write about morphMesh animation too in the future. * eventMMStartAni ( 14 \"T_HURT\" ) Event tags * eventTag ( 5 \"DEF_FIGHTMODE\" \"\" ) * eventTag ( 0 \"DEF_HIT_LIMB\" \"ZS_RIGHTHAND\" ) * eventTag ( 0 \"DEF_OPT_FRAME\" \"6\" ) * eventTag ( 0 \"DEF_HIT_END\" \"29\" ) * eventTag ( 0 \"DEF_WINDOW\" \"18 35\" ) * eventTa ( 4 \"DEF_INSERT_ITEM\" \"ZS_LEFTHAND\" ) * eventTa ( 4 \"DEF_CREATE_ITEM\" \"ZS_RIGHTHAND\" \"ItMw_1H_Sledgehammer_01\" ) * eventTa ( 9 \"DEF_EXCHANGE_ITEM\" \"ZS_LEFTHAND\" \"ItMiSwordbladehot\" ) * eventTa ( 4 \"DEF_REMOVE_ITEM\" )","title":"Animation event blocks"},{"location":"zengin/anims/MDS/","text":"MDS - model animation script \ud800\udf3e Tip The MDS syntax is very simple and the scripts can be edited in any text editor, but it is easier to work in an editor with the proper syntac highlighting. Daedalus Language Server 's dev branch already merged the MDS grammar for syntax highlighting, we can expact it in the next release. Model animation script is a file, that describes what skeleton is to be used, what body meshes work with this set of animations and how the animations should be named, how fast they run, what animation is supposed to run after the current one is finished and much more. These files are located in Gothic\\_work\\DATA\\Anims\\ directory. You will see a lot of long and scary code, but it is actually very simple, lets learn what some of the most important commands mean. Don't forget to use the search If you search this file for t_Yes , you will get an example of the first type of animation - \"standalone\" To play the animation in game you use this console command play ani t_yes . Syntax and keywords \ud800\udf3e Before we get into the keywords, lets get a quick look at the naming convention, to get a basic idea what is going on. The first letter indicates a type of animation (transition - t_ - or state - s_ ). Then depending on the animation type we have: Transition animation t_Run_2_Sneak Transition animation from the run animation to the sneak animation. t_BSANVIL_Stand_2_S0 Transition animation for the blacksmith's anvil from standing to state 0. State animation s_Run State animation for the looping animation. s_BSANVIL_S0 State animation for the blacksmith's anvil and its first state. ani \ud800\udf3e This is the main command you will be using while defining new animations. Example: ani ( \"t_Yes\" 2 \"\" 0.1 0.1 M . \"Hum_Yes_M01.asc\" F 1 44 ) Syntax: ani ( ANI_NAME LAYER NEXT_ANI BLEND_IN BLEND_OUT FLAGS ASC_NAME ANI_DIR START_FRAME END_FRAME ) ani - is a keyword, we are defining new animation Let's describe all the parameters ANI_NAME - animation name, we use it in Daedalus as animation identifier There is a naming convention, that is recommended (and sometimes required) to be used. prefix t_ - transition animations prefix s_ - state animations - they usually run in a loop prefix c_ - animations used for animation combining/interpolation LAYER - layer number for multi-layer animations NEXT_ANI - name of the next animations BLEND_IN - time in seconds describing animation blending at the start If we set it to 0.5, it takes 0.5 seconds for this animation to take full effect. At 0.0 s the previous animation has full effect on the bones of the skeleton, at 0.1 s it is influenced by 20% by this animation and at 0.5s it is completely influenced by this animation and the previous one has no effect. BLEND_OUT - time in seconds describing animation blending at the end FLAGS - flags, that describe animation behavior M - specifies a movement animation, the animation of the model translates into a changed position in the game world R - the same as M but for rotation E - this flag makes this animation run only, if the animation in the same layer are finished, this is used in the movement animations. The animation s_walk (walking loop animation) runs, when the player is walking,when he stops the transition animation to standing state is played t_walk_2_stand . This animation uses the E flag to wait for the walk cycle animation to finish, to smoothly transition into the standing state. F - the engine ignores height coordinate - doesn't keep the model \"glued\" to the ground (falling/flying animation) I - specifies idle animation - breathing, standing with a drawn weapon and moving the weapon... ASC_NAME - name of the source file exported from Blender ANI_DIR - direction of the animation F - forward R - reverse START_FRAME - on what frame from the source file the animation starts END_FRAME - on what frame from the source file the animation ends aniAlias \ud800\udf3e This is probably the second most useful command, it is used to do, what its name suggests it does, and that is creating an alias (similar to hard link for my fellow unix users) for already defined animations. Example: aniAlias ( \"t_Sneak_2_Run\" 1 \"s_Run\" 0.0 0.1 M . \"t_Run_2_Sneak\" R ) Syntax: aniAlias ( ANI_NAME LAYER NEXT_ANI BLEND_IN BLEND_OUT FLAGS ALIAS_NAME ANI_DIR ) ANI_NAME - name of the new animation LAYER - layer the animation is on NEXT_ANI - name of the next animations BLEND_IN - time in seconds describing animation blending at the start BLEND_OUT - time in seconds describing animation blending at the end FLAGS - flags, that describe animation behaviour ALIAS_NAME - name of the animation we want to use as a source for the alias ANI_DIR - direction of the animation If we look for the animation in the example we can see, that there is a related one just one line above ani ( \"t_Run_2_Sneak\" 1 \"s_Sneak\" 0.1 0.0 M . \"Hum_Sneak_M01.asc\" F 0 10 ) aniAlias ( \"t_Sneak_2_Run\" 1 \"s_Run\" 0.0 0.1 M . \"t_Run_2_Sneak\" R ) In this example we are defining t_Sneak_2_Run animation, we specify, that the animation after this one is finished will be s_Run and that it is being made by reversing animation t_Run_2_Sneak by specifying the R flag. aniBlend \ud800\udf3e AniBlend is used to define animations that are a result of blending of two animations. This animation is not animated by hand, but it is dynamically generated by the engine during run-time. Example aniBlend ( \"t_RunR_2_Run\" \"s_Run\" 0.2 0.2 ) Syntax: aniBlend ( ANI_NAME NEXT_ANI BLEND_IN BLEND_OUT ) ANI_NAME - name of the new animation NEXT_ANI - name of the next animations BLEND_IN - time in seconds describing animation blending at the start BLEND_OUT - time in seconds describing animation blending at the end aniSync \ud800\udf3e Not used in the game. aniBatch \ud800\udf3e Not used in the game.","title":"MDS - ModelScript"},{"location":"zengin/anims/MDS/#mds-model-animation-script","text":"Tip The MDS syntax is very simple and the scripts can be edited in any text editor, but it is easier to work in an editor with the proper syntac highlighting. Daedalus Language Server 's dev branch already merged the MDS grammar for syntax highlighting, we can expact it in the next release. Model animation script is a file, that describes what skeleton is to be used, what body meshes work with this set of animations and how the animations should be named, how fast they run, what animation is supposed to run after the current one is finished and much more. These files are located in Gothic\\_work\\DATA\\Anims\\ directory. You will see a lot of long and scary code, but it is actually very simple, lets learn what some of the most important commands mean. Don't forget to use the search If you search this file for t_Yes , you will get an example of the first type of animation - \"standalone\" To play the animation in game you use this console command play ani t_yes .","title":"MDS - model animation script"},{"location":"zengin/anims/MDS/#syntax-and-keywords","text":"Before we get into the keywords, lets get a quick look at the naming convention, to get a basic idea what is going on. The first letter indicates a type of animation (transition - t_ - or state - s_ ). Then depending on the animation type we have: Transition animation t_Run_2_Sneak Transition animation from the run animation to the sneak animation. t_BSANVIL_Stand_2_S0 Transition animation for the blacksmith's anvil from standing to state 0. State animation s_Run State animation for the looping animation. s_BSANVIL_S0 State animation for the blacksmith's anvil and its first state.","title":"Syntax and keywords"},{"location":"zengin/anims/MDS/#ani","text":"This is the main command you will be using while defining new animations. Example: ani ( \"t_Yes\" 2 \"\" 0.1 0.1 M . \"Hum_Yes_M01.asc\" F 1 44 ) Syntax: ani ( ANI_NAME LAYER NEXT_ANI BLEND_IN BLEND_OUT FLAGS ASC_NAME ANI_DIR START_FRAME END_FRAME ) ani - is a keyword, we are defining new animation Let's describe all the parameters ANI_NAME - animation name, we use it in Daedalus as animation identifier There is a naming convention, that is recommended (and sometimes required) to be used. prefix t_ - transition animations prefix s_ - state animations - they usually run in a loop prefix c_ - animations used for animation combining/interpolation LAYER - layer number for multi-layer animations NEXT_ANI - name of the next animations BLEND_IN - time in seconds describing animation blending at the start If we set it to 0.5, it takes 0.5 seconds for this animation to take full effect. At 0.0 s the previous animation has full effect on the bones of the skeleton, at 0.1 s it is influenced by 20% by this animation and at 0.5s it is completely influenced by this animation and the previous one has no effect. BLEND_OUT - time in seconds describing animation blending at the end FLAGS - flags, that describe animation behavior M - specifies a movement animation, the animation of the model translates into a changed position in the game world R - the same as M but for rotation E - this flag makes this animation run only, if the animation in the same layer are finished, this is used in the movement animations. The animation s_walk (walking loop animation) runs, when the player is walking,when he stops the transition animation to standing state is played t_walk_2_stand . This animation uses the E flag to wait for the walk cycle animation to finish, to smoothly transition into the standing state. F - the engine ignores height coordinate - doesn't keep the model \"glued\" to the ground (falling/flying animation) I - specifies idle animation - breathing, standing with a drawn weapon and moving the weapon... ASC_NAME - name of the source file exported from Blender ANI_DIR - direction of the animation F - forward R - reverse START_FRAME - on what frame from the source file the animation starts END_FRAME - on what frame from the source file the animation ends","title":"ani"},{"location":"zengin/anims/MDS/#anialias","text":"This is probably the second most useful command, it is used to do, what its name suggests it does, and that is creating an alias (similar to hard link for my fellow unix users) for already defined animations. Example: aniAlias ( \"t_Sneak_2_Run\" 1 \"s_Run\" 0.0 0.1 M . \"t_Run_2_Sneak\" R ) Syntax: aniAlias ( ANI_NAME LAYER NEXT_ANI BLEND_IN BLEND_OUT FLAGS ALIAS_NAME ANI_DIR ) ANI_NAME - name of the new animation LAYER - layer the animation is on NEXT_ANI - name of the next animations BLEND_IN - time in seconds describing animation blending at the start BLEND_OUT - time in seconds describing animation blending at the end FLAGS - flags, that describe animation behaviour ALIAS_NAME - name of the animation we want to use as a source for the alias ANI_DIR - direction of the animation If we look for the animation in the example we can see, that there is a related one just one line above ani ( \"t_Run_2_Sneak\" 1 \"s_Sneak\" 0.1 0.0 M . \"Hum_Sneak_M01.asc\" F 0 10 ) aniAlias ( \"t_Sneak_2_Run\" 1 \"s_Run\" 0.0 0.1 M . \"t_Run_2_Sneak\" R ) In this example we are defining t_Sneak_2_Run animation, we specify, that the animation after this one is finished will be s_Run and that it is being made by reversing animation t_Run_2_Sneak by specifying the R flag.","title":"aniAlias"},{"location":"zengin/anims/MDS/#aniblend","text":"AniBlend is used to define animations that are a result of blending of two animations. This animation is not animated by hand, but it is dynamically generated by the engine during run-time. Example aniBlend ( \"t_RunR_2_Run\" \"s_Run\" 0.2 0.2 ) Syntax: aniBlend ( ANI_NAME NEXT_ANI BLEND_IN BLEND_OUT ) ANI_NAME - name of the new animation NEXT_ANI - name of the next animations BLEND_IN - time in seconds describing animation blending at the start BLEND_OUT - time in seconds describing animation blending at the end","title":"aniBlend"},{"location":"zengin/anims/MDS/#anisync","text":"Not used in the game.","title":"aniSync"},{"location":"zengin/anims/MDS/#anibatch","text":"Not used in the game.","title":"aniBatch"},{"location":"zengin/anims/StandaloneAni/","text":"Acknowledgment This tutorial would not be possible without the ZenGin documentation available in the mod-kit, Mark56 who helped me understand animations in the first place. Fawkes and his request for me to do some animations for his excellent mod - Replay Mod. And flosha from the Phoenix team, who was the one, to whom I offered to write this tutorial, to help with the development of the Phoenix project . Standalone animation \ud800\udf3e Let's start with the easiest animation, lets make a very simple gesturing animation. Info Some of the videos that I write about in the text below are in this play-list . First we have to have the animation source files ready, I usually decompile them using Gothic Sourcer . In GothicSourcer you choose Tools > Decompiler models > Dynamic (MDS or MSB) and choose an MDS file of your choice - Humans.mds in our case and then click the decompile button. Animating \ud800\udf3e Open Blender, File > Import > Kerrax ASCII model (.asc) , navigate to the folder with your decompiled animation files and select HUM_BODY_NAKED0.ASC , this file contains the skeleton and skin model for human NPCs. What bone hierarchy is this model using? From the .mds file, if you open it again, there is a command meshAndTree that specifies, what model contains the skeleton. And there lies our answer: Model ( \"HuS\" ) { meshAndTree ( \"Hum_Body_Naked0.ASC\" DONT_USE_MESH ) A windows pops up, you can read some interesting information about the model you are about to import, what we are interested in is, that Completely replace current scene is ticked, we want to use Armature modifier , and we also want to Try to connect bones and Use sample meshes from folder . You should provide a path to a directory with the sample meshes - these are meshes for items, that usually go into slot bones. And lastly, the space transformation scale should be set to 0.01 , this is because ZenGin works with centimeter units and one unit in Blender is a meter. Click import and wait for the magic to happen. This video shows a freshly imported model with all default meshes. Note Now if we wanted to play (or edit) existing animation, we can now load it on top of this. Just do as before File > Import > Kerrax ASCII model (.asc) and select different animation file (or armour file) for example Hum_SmokeHerb_Layer_M01.asc for an animation file. Gothic characters are modular, you can change their heads on the fly (during gameplay even, as seen in this amazing video of my dear friend and colleague Fawkes - Head changing ), let's add a head, so we can see how the whole body will behave while we are animating. File > Import > Kerrax ASCII model (.asc) and navigate to your head model (for this, you will have to decompile it, like we did with the body itself). I will import HUM_HEAD_PONY.ASC . Please make sure to select the target bone for importing Bip01 Head , this will attach the head to the proper bone, just like the engine does it. Now we have everything ready to start animating. The video shows the DopeSheet a nice way to edit keyframes. DopeSheet Blender's dope sheet can be used to copy entire sets of keyframes. Useful if we want to create a looping animation. We can import an animation into Blender as a base. Tip If you don't know, what the animation is called, just go into the game, and make your character to perform the animation you want, while in MARVIN mode, you can press G and the animation information (and some other info too) will be displayed right on the screen In this video you can see, that the idle standing animation is s_run . Because we want to make an animation, that is going to start from this idle animation, we will import it into blender. Where do we find it? Just look into the .mds file, look for s_run name and get the name of the file. ani ( \"s_Run\" 1 \"s_Run\" 0.1 0.1 MI \"Hum_RunAmbient_M01.asc\" F 1 50 ) As we can see, we have to import the Hum_RunAmbient_M01.asc file. Next goes the first trick. Since we want our animation to end exactly, as it started - wither because we want the hero to continue his standing animation, or we want to make a looping animation we somehow have to copy the pose. I use the DopeSheet screen, to delete all keyframes and then copy the keyframe set from keyframe number 0 and then drag it somewhere to the end of the timeline. Once the animation is done, we have to export it into a asc format again, File > Export > Kerrax ASCII model (.asc) and then save it to _work\\data\\Anims\\asc\\ so the engine can see it and convert it. There are many options here, that we will explore later, but we have tick Export animation and pick bones that we want to export - this is useful for animations that are played on different layers (dialoge gestures, scratching head, scratching a shoulder,...). Animation script \ud800\udf3e Now, that we have exported the animation, now we have to define it in Humans.mds . Open the file, scroll to the end and define a new animation. Attention All ani code has to be between the curly brackets, this means you have to insert it before the last two closing curly brackets } } . Let's write it ani ( \"t_backpain\" 1 \"\" 0.0 0.0 M . \"Hum_back.ASC\" F 0 121 ) Save the Humans.mds file and try it in game. Nothing happens! The reason is, the mds has been already compiled, and we have to recompile it. The easiest is to go to Anims\\_compiled and delete HUMANS.MSB . Run the game and try to play the animation again ( play ani t_backpain in MARVIN console) now everything should work. Amazing, now you have your first animation in the game. And you can use it to do some fun stuff, like in dialogues using the AI_PlayAni function. Example dialogue \ud800\udf3e instance DIA_Xardas_Back ( C_INFO ) { npc = NONE_100_Xardas ; nr = 11 ; condition = DIA_Xardas_Back_Condition ; information = DIA_Xardas_Back_Info ; permanent = TRUE ; description = \"What's wrong?\" ; }; func int DIA_Xardas_Back_Condition () { return TRUE ; }; func void DIA_Xardas_Back_Info () { AI_Output ( self , hero , \"DIA_Xardas_MOB_14_00\" ); // My back hurts so much. // This is our animation!!!!! AI_PlayAni ( self , \"T_BACKPAIN\" ); AI_Output ( self , hero , \"DIA_Xardas_MOB_14_01\" ); // How do YOU feel? AI_Output ( hero , self , \"DIA_Xardas_MOB_14_02\" ); // My back is fine. AI_StopProcessInfos ( self ); };","title":"Standalone animation"},{"location":"zengin/anims/StandaloneAni/#standalone-animation","text":"Let's start with the easiest animation, lets make a very simple gesturing animation. Info Some of the videos that I write about in the text below are in this play-list . First we have to have the animation source files ready, I usually decompile them using Gothic Sourcer . In GothicSourcer you choose Tools > Decompiler models > Dynamic (MDS or MSB) and choose an MDS file of your choice - Humans.mds in our case and then click the decompile button.","title":"Standalone animation"},{"location":"zengin/anims/StandaloneAni/#animating","text":"Open Blender, File > Import > Kerrax ASCII model (.asc) , navigate to the folder with your decompiled animation files and select HUM_BODY_NAKED0.ASC , this file contains the skeleton and skin model for human NPCs. What bone hierarchy is this model using? From the .mds file, if you open it again, there is a command meshAndTree that specifies, what model contains the skeleton. And there lies our answer: Model ( \"HuS\" ) { meshAndTree ( \"Hum_Body_Naked0.ASC\" DONT_USE_MESH ) A windows pops up, you can read some interesting information about the model you are about to import, what we are interested in is, that Completely replace current scene is ticked, we want to use Armature modifier , and we also want to Try to connect bones and Use sample meshes from folder . You should provide a path to a directory with the sample meshes - these are meshes for items, that usually go into slot bones. And lastly, the space transformation scale should be set to 0.01 , this is because ZenGin works with centimeter units and one unit in Blender is a meter. Click import and wait for the magic to happen. This video shows a freshly imported model with all default meshes. Note Now if we wanted to play (or edit) existing animation, we can now load it on top of this. Just do as before File > Import > Kerrax ASCII model (.asc) and select different animation file (or armour file) for example Hum_SmokeHerb_Layer_M01.asc for an animation file. Gothic characters are modular, you can change their heads on the fly (during gameplay even, as seen in this amazing video of my dear friend and colleague Fawkes - Head changing ), let's add a head, so we can see how the whole body will behave while we are animating. File > Import > Kerrax ASCII model (.asc) and navigate to your head model (for this, you will have to decompile it, like we did with the body itself). I will import HUM_HEAD_PONY.ASC . Please make sure to select the target bone for importing Bip01 Head , this will attach the head to the proper bone, just like the engine does it. Now we have everything ready to start animating. The video shows the DopeSheet a nice way to edit keyframes. DopeSheet Blender's dope sheet can be used to copy entire sets of keyframes. Useful if we want to create a looping animation. We can import an animation into Blender as a base. Tip If you don't know, what the animation is called, just go into the game, and make your character to perform the animation you want, while in MARVIN mode, you can press G and the animation information (and some other info too) will be displayed right on the screen In this video you can see, that the idle standing animation is s_run . Because we want to make an animation, that is going to start from this idle animation, we will import it into blender. Where do we find it? Just look into the .mds file, look for s_run name and get the name of the file. ani ( \"s_Run\" 1 \"s_Run\" 0.1 0.1 MI \"Hum_RunAmbient_M01.asc\" F 1 50 ) As we can see, we have to import the Hum_RunAmbient_M01.asc file. Next goes the first trick. Since we want our animation to end exactly, as it started - wither because we want the hero to continue his standing animation, or we want to make a looping animation we somehow have to copy the pose. I use the DopeSheet screen, to delete all keyframes and then copy the keyframe set from keyframe number 0 and then drag it somewhere to the end of the timeline. Once the animation is done, we have to export it into a asc format again, File > Export > Kerrax ASCII model (.asc) and then save it to _work\\data\\Anims\\asc\\ so the engine can see it and convert it. There are many options here, that we will explore later, but we have tick Export animation and pick bones that we want to export - this is useful for animations that are played on different layers (dialoge gestures, scratching head, scratching a shoulder,...).","title":"Animating"},{"location":"zengin/anims/StandaloneAni/#animation-script","text":"Now, that we have exported the animation, now we have to define it in Humans.mds . Open the file, scroll to the end and define a new animation. Attention All ani code has to be between the curly brackets, this means you have to insert it before the last two closing curly brackets } } . Let's write it ani ( \"t_backpain\" 1 \"\" 0.0 0.0 M . \"Hum_back.ASC\" F 0 121 ) Save the Humans.mds file and try it in game. Nothing happens! The reason is, the mds has been already compiled, and we have to recompile it. The easiest is to go to Anims\\_compiled and delete HUMANS.MSB . Run the game and try to play the animation again ( play ani t_backpain in MARVIN console) now everything should work. Amazing, now you have your first animation in the game. And you can use it to do some fun stuff, like in dialogues using the AI_PlayAni function.","title":"Animation script"},{"location":"zengin/anims/StandaloneAni/#example-dialogue","text":"instance DIA_Xardas_Back ( C_INFO ) { npc = NONE_100_Xardas ; nr = 11 ; condition = DIA_Xardas_Back_Condition ; information = DIA_Xardas_Back_Info ; permanent = TRUE ; description = \"What's wrong?\" ; }; func int DIA_Xardas_Back_Condition () { return TRUE ; }; func void DIA_Xardas_Back_Info () { AI_Output ( self , hero , \"DIA_Xardas_MOB_14_00\" ); // My back hurts so much. // This is our animation!!!!! AI_PlayAni ( self , \"T_BACKPAIN\" ); AI_Output ( self , hero , \"DIA_Xardas_MOB_14_01\" ); // How do YOU feel? AI_Output ( hero , self , \"DIA_Xardas_MOB_14_02\" ); // My back is fine. AI_StopProcessInfos ( self ); };","title":"Example dialogue"},{"location":"zengin/general_info/DirectoryStructure/","text":"ZenGin directory structure \ud800\udf3e Modding is all about changing the game files and for that we have to know the directory (folder) structure of a Gothic game. \u251c\u2500\u2500 Data \u2502 \u251c\u2500\u2500 $Templates$ \u2502 \u251c\u2500\u2500 modvdf \u2502 \u2514\u2500\u2500 plugins \u251c\u2500\u2500 Miles \u251c\u2500\u2500 Saves \u251c\u2500\u2500 System \u2502 \u2514\u2500\u2500 Autorun \u2514\u2500\u2500 _work \u2514\u2500\u2500 DATA \u251c\u2500\u2500 Anims \u2502 \u2514\u2500\u2500 _Compiled \u251c\u2500\u2500 Meshes \u2502 \u2514\u2500\u2500 _Compiled \u251c\u2500\u2500 Music \u251c\u2500\u2500 PRESETS \u251c\u2500\u2500 Scripts \u2502 \u251c\u2500\u2500 _compiled \u2502 \u2514\u2500\u2500 content \u2502 \u2514\u2500\u2500 CUTSCENE \u251c\u2500\u2500 Sound \u251c\u2500\u2500 Textures \u251c\u2500\u2500 Video \u2514\u2500\u2500 Worlds Data \ud800\udf3e Data directory contains .vdf volumes of the game. These contain anims.vdf - animations, speech.vdf - dubbing, worlds.vdf - world ZEN files. Saves \ud800\udf3e Contains saved games. System \ud800\udf3e The system directory contains the game executable, GothicStarter.exe , GothicStarter_mod.exe , configuration .ini files, mod .ini files and mod icons and description .rtf files. system/Autorun is a Union specific directory, it is default search directory for Daedalus injection scripts with zParserExtender and Union plugins. _work/DATA \ud800\udf3e This is where the magic happens: Anims - contains animations and animated models. _compiled - contains compiled animations. Meshes - contains meshes source and compiled files. _compiled - contains compiled meshes. Music - contains music files. Presets - contains basic presets. Scripts _compiled - contains compiled scripts - .dat files. Content - contains scripts that make up the content of the game. System - contains scripts that make up the menu. Sound - contains sound effects .wav or .ogg format (only Union). Video - contains videos in .bik format.","title":"Directory structure"},{"location":"zengin/general_info/DirectoryStructure/#zengin-directory-structure","text":"Modding is all about changing the game files and for that we have to know the directory (folder) structure of a Gothic game. \u251c\u2500\u2500 Data \u2502 \u251c\u2500\u2500 $Templates$ \u2502 \u251c\u2500\u2500 modvdf \u2502 \u2514\u2500\u2500 plugins \u251c\u2500\u2500 Miles \u251c\u2500\u2500 Saves \u251c\u2500\u2500 System \u2502 \u2514\u2500\u2500 Autorun \u2514\u2500\u2500 _work \u2514\u2500\u2500 DATA \u251c\u2500\u2500 Anims \u2502 \u2514\u2500\u2500 _Compiled \u251c\u2500\u2500 Meshes \u2502 \u2514\u2500\u2500 _Compiled \u251c\u2500\u2500 Music \u251c\u2500\u2500 PRESETS \u251c\u2500\u2500 Scripts \u2502 \u251c\u2500\u2500 _compiled \u2502 \u2514\u2500\u2500 content \u2502 \u2514\u2500\u2500 CUTSCENE \u251c\u2500\u2500 Sound \u251c\u2500\u2500 Textures \u251c\u2500\u2500 Video \u2514\u2500\u2500 Worlds","title":"ZenGin directory structure"},{"location":"zengin/general_info/DirectoryStructure/#data","text":"Data directory contains .vdf volumes of the game. These contain anims.vdf - animations, speech.vdf - dubbing, worlds.vdf - world ZEN files.","title":"Data"},{"location":"zengin/general_info/DirectoryStructure/#saves","text":"Contains saved games.","title":"Saves"},{"location":"zengin/general_info/DirectoryStructure/#system","text":"The system directory contains the game executable, GothicStarter.exe , GothicStarter_mod.exe , configuration .ini files, mod .ini files and mod icons and description .rtf files. system/Autorun is a Union specific directory, it is default search directory for Daedalus injection scripts with zParserExtender and Union plugins.","title":"System"},{"location":"zengin/general_info/DirectoryStructure/#_workdata","text":"This is where the magic happens: Anims - contains animations and animated models. _compiled - contains compiled animations. Meshes - contains meshes source and compiled files. _compiled - contains compiled meshes. Music - contains music files. Presets - contains basic presets. Scripts _compiled - contains compiled scripts - .dat files. Content - contains scripts that make up the content of the game. System - contains scripts that make up the menu. Sound - contains sound effects .wav or .ogg format (only Union). Video - contains videos in .bik format.","title":"_work/DATA"},{"location":"zengin/general_info/ObjectPersistence/","text":"Object persistence \ud800\udf3e In order to simplify the process of loading and saving data of varying types to and from the user's hard-drive, ZenGin implements a simple object persistence system using the zCArchiver class and its derivatives, that allow individual engine classes to implement a routine specifying which data should be saved or loaded from disk, and in which manner. An object that is derived from the zCObject class may overload the Archive and Unarchive virtual methods. Within these methods, the class may then call on an interface provided by the zCArchiver class, which allows it to directly read from/write to a stream using several modes. Primarily these are ASCII and BinSafe, however, there are more options, as is explained below. Archive format \ud800\udf3e In order to better understand how this process works, it is best to look at an example of a .ZEN file containing an instance of an oCWorld object. Header \ud800\udf3e When you open up a ZenGin archive, you will see the following at the start of the file: ZenGin Archive ver 1 zCArchiverGeneric ASCII saveGame 0 date 7.1.2001 23:9:19 user roeske END objects 2594 END Let's look at each of these properties and what they mean: ZenGin Archive This simply specifies that the following data is a zCArchiver archive. ver 1 Version specification. Can be either 0 or 1 . Both Gothic 1 and 2 are already at version 1, although version 0 archives can also be occasionally found. zCArchiverGeneric Specifies which derived zCArchiver class should be used to read this archive. Accepted values are zCArchiverGeneric for ASCII and Binary archives, and zCArchiverBinSafe for BinSafe archives. More info below. This property may not be present in older archives. ASCII This is the most important part of the header, which specifies in which format the data is stored. There are 4 different modes: ASCII - The simplest mode, which stores data in human-readable ASCII notation (not unlike JSON for example). This is usually used when saving data during development and/or testing, while the final version of said data will most likely be stored as BIN_SAFE. ASCII_PROPS - Same as ASCII except with more additional data that the developer can specify for visual clarity. In practice, it isn't used anywhere and mostly serves only to prettify debug info (try typing ZWORLD VOBPROPS in the console and look in zSpy ;) ). BINARY - Binary representation of the class instance, which mostly copies the data 1:1 into/from the stream. In practice, this format is only used to store savefiles (.SAV). BIN_SAFE - BinSafe, short for Binary Safe, is an extended version of Binary which stores type information along with the data itself. This is meant to make error checking for invalid data easier. There are other changes which are explained below. Most, if not all world files (.ZEN) are stored in this format. saveGame 0 Specifies if this archive is a savefile. This property may not be present in older archives. date 7.1.2001 23:9:19 The date at which this archive was created. user roeske The user which created the archive. This property may not be present in older archives. END Tells the parses that this is the end of the header. In version 0 archives, we may additionally find a property called csum which stores the checksum of the whole archive. However, this property is unused and equals 00000000 by default. In order to correctly read the archive's header across varying engine versions, one should not count on the properties always being in the same order or even being there at all. If the archive utilizes zCArchiverGeneric then this header will also be followed by a short section specifying the number of object instances in this archive. This value will be used to initialize the objectList, which is an array of pointers where the addresses of loaded objects will be stored for later referencing. In older versions, this property would be directly part of the main header. objects 2594 END If the archive is created using zCArchiverBinSafe , then this data will be stored in the following binary structure: struct BinSafeArchiveHeader { uint32_t version ; // Always equals 2 uint32_t objectCount ; // Serves the same function as \"objects n\" uint32_t chunkPos ; // Offset to chunk hash table }; Contents \ud800\udf3e Looking further into the archive, we see what appears to be a nested structure. [% oCWorld:zCWorld 64513 0] [VobTree % 0 0] childs0=int:1 [% zCVobLevelCompo:zCVob 12289 1] pack=int:0 presetName=string: bbox3DWS=rawFloat:-71919.9609 -13091.8232 -59900 108999.992 20014.0352 67399.9922 trafoOSToWSRot=raw:0000803f0000000000000000000000000000803f0000000000000000000000000000803f trafoOSToWSPos=vec3:0 0 0 vobName=string:LEVEL-VOB visual=string:SURFACE.3DS showVisual=bool:0 visualCamAlign=enum:0 cdStatic=bool:1 cdDyn=bool:0 staticVob=bool:0 dynShadow=enum:0 [visual zCMesh 0 2] [] [ai % 0 0] [] [] ... Within ZenGin archives, we primarily differentiate between chunks and properties: Chunks \ud800\udf3e A chunk is a structure that groups properties together. Most of the time, a chunk represents a class instance, however, this is not always true, as classes may arbitrarily create chunks as is needed. For example, the sample above contains a chunk called VobTree , which does not represent a class instance, but only serves to make the reading of the archive easier. While in ASCII mode, the start of a chunk is represented using square brackets. [% oCWorld:zCWorld 64513 0] Inside the start of each chunk, there are 4 pieces of data separated by spaces, which are: Object name - The name of the chunk to use while reading. If the chunk has no name, then it will be simply equal to % . Class name - The name of the class which this chunk represents. Class names are stored with their full inheritance hierarchy (e.g. oCMobLadder:oCMobInter:oCMOB:zCVob ). In case the chunk is not an object, but an arbitrary chunk, then this field will be equal to % ( % can also mean that this chunk is a nullptr). In some cases you may encounter the symbol \u00a7 instead. This means that the object already exists and that the parser should look for it in the objectList using the object index. Using this mechanism, a single instance can be referenced multiple times without worrying about duplicity. Class version - Used to ensure that the data being read is compatible with the current game/engine version, so that there are no mismatches in the data pattern. This value is different for every class and varies between game versions. Object index - An index into the objectList under which this object will be stored. If the class name is equal to \u00a7 , then this value will be used to retrieve an existing instance from the objectList. If this is a Binary archive, the same data will be stored in the following binary structure: struct BinaryObjectHeader { uint32_t objectSize ; // Size of the whole object in bytes uint16_t classVersion ; uint32_t objectIndex ; char objectName []; // Null-terminated string char className []; // Null-terminated string }; Oddly enough, if the archive is BinSafe, then the data will be encoded the same way as in ASCII mode, except that it will be stored as a type-checked property. struct BinSafeObjectHeader { uint32_t type ; // 0x1 = TYPE_STRING uint16_t length ; // Length of the text char text []; // [% oCWorld:zCWorld 64513 0] }; In ASCII mode [] represents the end of the current chunk. Properties \ud800\udf3e Inside the chunks, we find properties, which are key-value pairs that classes use to store the actual data. Each property stores its name, type and value. In ASCII mode the format for this is name=type:value . For example: visual=string:SURFACE.3DS By default, zCArchiver allows to store properties of the following types: Int - A regular 32-bit integer. In ASCII mode, int gets stored as name=int:1 , while in Binary mode, it's just the raw value stored as 4 bytes. Byte - A 8-bit integer. ASCII mode doesn't differentiate between Int and Byte, so this will be stored as name=int:1 regardless. Binary mode stores only the single byte. Word - A 16-bit integer. ASCII mode doesn't differentiate between Int and Word, so this will be stored as name=int:1 regardless. Binary mode stores only the 2 bytes. Float - A standard IEEE 754 32-bit floating point number. In ASCII mode the format is name=float:1.0 , while in Binary mode the float gets stored raw as 4 bytes. Bool - Stores a single-byte boolean value. In ASCII mode its name=bool:1 and in Binary mode it's a single byte. String - An ASCII encoded string. While in ASCII mode, strings are stored as name=string:value . In Binary mode, strings are NULL terminated. Vec3 - A three component vector, mainly used to store positional data. The ASCII mode format is name=vec3:1.0 1.0 1.0 . In Binary mode the three components of the vector are stored in series, which equals to a total size of 12 bytes. Color - A 32-bit color value stored as BGRA. In ASCII mode the color is stored as name=color:255 255 255 255 while in Binary mode it's just 4 raw bytes. Raw - Raw binary data. In order to maintain readability, in ASCII mode this gets stored as a hex encoded string such as name=raw:63D15B07 . In Binary mode, only the data itself is stored, without any other info. Be aware that due to this you must know the size of the data beforehand. RawFloat - An array of floats, mainly used to store bounding boxes. In ASCII mode, the floats are stored as name=rawFloat:1.0 1.0 1.0 1.0 1.0 1.0 . In Binary mode the floats are stored in series as raw bytes. Same as with Raw , you must know the size of the array beforehand. Enum - An enum value. In ASCII mode, it gets stored as name=enum:1 . In Binary mode, it behaves the same as Int . As you might have noticed, binary mode doesn't perform any kind of checks on if it's reading the right property or even data of the correct type. This is why BinSafe mode exists, as it stores the property type in along with the data itself. enum TYPE { TYPE_STRING = 0x1 , TYPE_INTEGER = 0x2 , TYPE_FLOAT = 0x3 , TYPE_BYTE = 0x4 , TYPE_WORD = 0x5 , TYPE_BOOL = 0x6 , TYPE_VEC3 = 0x7 , TYPE_COLOR = 0x8 , TYPE_RAW = 0x9 , TYPE_RAWFLOAT = 0x10 , TYPE_ENUM = 0x11 TYPE_HASH = 0x12 , }; struct BinSafeProperty { TYPE type ; union { struct { uint16_t stringLength ; char stringValue []; } uint32_t integerOrHashOrEnumValue ; float floatValue ; uint8_t byteOrBoolValue ; zVEC3 vec3Value ; zCOLOR colorValue ; struct { uint16_t rawLength ; char rawValue []; } struct { uint16_t rawFloatLength ; float rawFloatValue []; } }; }; Looking at the enumeration of types, you might notice that BinSafe mode has an additional property type called Hash. BinSafe archives include a hash table which is stored in the following manner: struct BinSafeHashTable { uint32_t chunkCount ; for ( chunkCount ) { uint16_t stringLength ; uint16_t linearValue ; uint32_t hashValue ; char text [ stringLength ]; } }; Instead of storing the raw value, properties may save a hash instead, which is then used to look up the corresponding value from the hash table. Implementation \ud800\udf3e As mentioned in the opening paragraph, classes may use the described functionality by overloading the Archive and Unarchive virtual methods, which pass an instance of zCArchiver by reference. When the class instance is then serialized and/or parsed, these methods are called and perform the desired serialization/parsing work. Within these routines, the class uses methods provided by the zCArchiver instance. These methods return/accept a value of a specific type (e.g. ReadInt/WriteInt), while they do the actual reading/writing work behind the scenes based on the current mode (ASCII/Binary/BinSafe). The programmer writing the class then does not care whether the final archive will be saved as ASCII, Binary or BinSafe, as they only use the zCArchiver Read* and Write* methods. A practical example \ud800\udf3e Let's propose that we have a class which is declared like so: class zCMyClass : public zCObject { public : zCMyClass () {} virtual ~ zCMyClass () {} virtual void Archive ( zCArchiver & ); virtual void Unarchive ( zCArchiver & ); int myInt ; zCMyClass * myObject ; zCMyClass * secondPointerToMyObject ; }; The hypothetical class then implements these virtual functions: void zCMyClass::Archive ( zCArchiver & archiver ) { archiver . WriteInt ( \"myInt\" , myInt ); archiver . WriteObject ( \"myObject\" , myObject ); archiver . WriteChunkStart ( \"myChunk\" , 0 ); archiver . WriteObject ( \"secondPointerToMyObject\" , secondPointerToMyObject ); archiver . WriteChunkEnd (); } void zCMyClass::Unarchive ( zCArchiver & archiver ) { archiver . ReadInt ( \"myInt\" , myInt ); myObject = dynamic_cast < zCMyClass *> ( archiver . ReadObject ( \"myObject\" )); archiver . ReadChunkStart ( \"myChunk\" ); secondPointerToMyObject = dynamic_cast < zCMyClass *> ( archiver . ReadObject ( \"secondPointerToMyObject\" )); archiver . ReadChunkEnd (); } We then initialize the class in the following way: zCMyClass object ; object . myInt = 12121212 ; object . myObject = new zCMyClass (); object . myObject -> myInt = 34343434 ; object . secondPointerToMyObject = object . myObject ; If we now serialized, or to use the engine's term \"archived\", this instance into an ASCII archive, the result would look like this: ZenGin Archive ver 1 zCArchiverGeneric ASCII saveGame 0 date 3.7.2022 0:0:0 user GMC END objects 2 END [% zCMyClass 0 0] myInt=int:12121212 [myObject zCMyClass 0 1] myInt=int:34343434 [myObject % 0 0] [] [myChunk % 0 0] [secondPointerToMyObject % 0 0] [] [] [] [myChunk % 0 0] [secondPointerToMyObject \u00a7 0 1] [] [] [] Notice how secondPointerToMyObject doesn't have any contents. The character \u00a7 tells the parser that this object already exists in the objectList, and that instead of creating a new instance, it should return an existing instance which is stored under index 1 in the objectList. This allows an instance to be referenced from multiple places, without the need to worry about duplicity. If we used Binary or BinSafe mode, we would see a big blob of binary data instead. This would of course store the exact same data, although in a slightly less human-readable format. Final thoughts \ud800\udf3e I hope this helps you better understand the inner workings of ZenGin. If you want to see how Piranha Bytes went about implementing a much more advanced version of this system for their next engine, check out Genome's object persistence system .","title":"Object persistence"},{"location":"zengin/general_info/ObjectPersistence/#object-persistence","text":"In order to simplify the process of loading and saving data of varying types to and from the user's hard-drive, ZenGin implements a simple object persistence system using the zCArchiver class and its derivatives, that allow individual engine classes to implement a routine specifying which data should be saved or loaded from disk, and in which manner. An object that is derived from the zCObject class may overload the Archive and Unarchive virtual methods. Within these methods, the class may then call on an interface provided by the zCArchiver class, which allows it to directly read from/write to a stream using several modes. Primarily these are ASCII and BinSafe, however, there are more options, as is explained below.","title":"Object persistence"},{"location":"zengin/general_info/ObjectPersistence/#archive-format","text":"In order to better understand how this process works, it is best to look at an example of a .ZEN file containing an instance of an oCWorld object.","title":"Archive format"},{"location":"zengin/general_info/ObjectPersistence/#header","text":"When you open up a ZenGin archive, you will see the following at the start of the file: ZenGin Archive ver 1 zCArchiverGeneric ASCII saveGame 0 date 7.1.2001 23:9:19 user roeske END objects 2594 END Let's look at each of these properties and what they mean: ZenGin Archive This simply specifies that the following data is a zCArchiver archive. ver 1 Version specification. Can be either 0 or 1 . Both Gothic 1 and 2 are already at version 1, although version 0 archives can also be occasionally found. zCArchiverGeneric Specifies which derived zCArchiver class should be used to read this archive. Accepted values are zCArchiverGeneric for ASCII and Binary archives, and zCArchiverBinSafe for BinSafe archives. More info below. This property may not be present in older archives. ASCII This is the most important part of the header, which specifies in which format the data is stored. There are 4 different modes: ASCII - The simplest mode, which stores data in human-readable ASCII notation (not unlike JSON for example). This is usually used when saving data during development and/or testing, while the final version of said data will most likely be stored as BIN_SAFE. ASCII_PROPS - Same as ASCII except with more additional data that the developer can specify for visual clarity. In practice, it isn't used anywhere and mostly serves only to prettify debug info (try typing ZWORLD VOBPROPS in the console and look in zSpy ;) ). BINARY - Binary representation of the class instance, which mostly copies the data 1:1 into/from the stream. In practice, this format is only used to store savefiles (.SAV). BIN_SAFE - BinSafe, short for Binary Safe, is an extended version of Binary which stores type information along with the data itself. This is meant to make error checking for invalid data easier. There are other changes which are explained below. Most, if not all world files (.ZEN) are stored in this format. saveGame 0 Specifies if this archive is a savefile. This property may not be present in older archives. date 7.1.2001 23:9:19 The date at which this archive was created. user roeske The user which created the archive. This property may not be present in older archives. END Tells the parses that this is the end of the header. In version 0 archives, we may additionally find a property called csum which stores the checksum of the whole archive. However, this property is unused and equals 00000000 by default. In order to correctly read the archive's header across varying engine versions, one should not count on the properties always being in the same order or even being there at all. If the archive utilizes zCArchiverGeneric then this header will also be followed by a short section specifying the number of object instances in this archive. This value will be used to initialize the objectList, which is an array of pointers where the addresses of loaded objects will be stored for later referencing. In older versions, this property would be directly part of the main header. objects 2594 END If the archive is created using zCArchiverBinSafe , then this data will be stored in the following binary structure: struct BinSafeArchiveHeader { uint32_t version ; // Always equals 2 uint32_t objectCount ; // Serves the same function as \"objects n\" uint32_t chunkPos ; // Offset to chunk hash table };","title":"Header"},{"location":"zengin/general_info/ObjectPersistence/#contents","text":"Looking further into the archive, we see what appears to be a nested structure. [% oCWorld:zCWorld 64513 0] [VobTree % 0 0] childs0=int:1 [% zCVobLevelCompo:zCVob 12289 1] pack=int:0 presetName=string: bbox3DWS=rawFloat:-71919.9609 -13091.8232 -59900 108999.992 20014.0352 67399.9922 trafoOSToWSRot=raw:0000803f0000000000000000000000000000803f0000000000000000000000000000803f trafoOSToWSPos=vec3:0 0 0 vobName=string:LEVEL-VOB visual=string:SURFACE.3DS showVisual=bool:0 visualCamAlign=enum:0 cdStatic=bool:1 cdDyn=bool:0 staticVob=bool:0 dynShadow=enum:0 [visual zCMesh 0 2] [] [ai % 0 0] [] [] ... Within ZenGin archives, we primarily differentiate between chunks and properties:","title":"Contents"},{"location":"zengin/general_info/ObjectPersistence/#chunks","text":"A chunk is a structure that groups properties together. Most of the time, a chunk represents a class instance, however, this is not always true, as classes may arbitrarily create chunks as is needed. For example, the sample above contains a chunk called VobTree , which does not represent a class instance, but only serves to make the reading of the archive easier. While in ASCII mode, the start of a chunk is represented using square brackets. [% oCWorld:zCWorld 64513 0] Inside the start of each chunk, there are 4 pieces of data separated by spaces, which are: Object name - The name of the chunk to use while reading. If the chunk has no name, then it will be simply equal to % . Class name - The name of the class which this chunk represents. Class names are stored with their full inheritance hierarchy (e.g. oCMobLadder:oCMobInter:oCMOB:zCVob ). In case the chunk is not an object, but an arbitrary chunk, then this field will be equal to % ( % can also mean that this chunk is a nullptr). In some cases you may encounter the symbol \u00a7 instead. This means that the object already exists and that the parser should look for it in the objectList using the object index. Using this mechanism, a single instance can be referenced multiple times without worrying about duplicity. Class version - Used to ensure that the data being read is compatible with the current game/engine version, so that there are no mismatches in the data pattern. This value is different for every class and varies between game versions. Object index - An index into the objectList under which this object will be stored. If the class name is equal to \u00a7 , then this value will be used to retrieve an existing instance from the objectList. If this is a Binary archive, the same data will be stored in the following binary structure: struct BinaryObjectHeader { uint32_t objectSize ; // Size of the whole object in bytes uint16_t classVersion ; uint32_t objectIndex ; char objectName []; // Null-terminated string char className []; // Null-terminated string }; Oddly enough, if the archive is BinSafe, then the data will be encoded the same way as in ASCII mode, except that it will be stored as a type-checked property. struct BinSafeObjectHeader { uint32_t type ; // 0x1 = TYPE_STRING uint16_t length ; // Length of the text char text []; // [% oCWorld:zCWorld 64513 0] }; In ASCII mode [] represents the end of the current chunk.","title":"Chunks"},{"location":"zengin/general_info/ObjectPersistence/#properties","text":"Inside the chunks, we find properties, which are key-value pairs that classes use to store the actual data. Each property stores its name, type and value. In ASCII mode the format for this is name=type:value . For example: visual=string:SURFACE.3DS By default, zCArchiver allows to store properties of the following types: Int - A regular 32-bit integer. In ASCII mode, int gets stored as name=int:1 , while in Binary mode, it's just the raw value stored as 4 bytes. Byte - A 8-bit integer. ASCII mode doesn't differentiate between Int and Byte, so this will be stored as name=int:1 regardless. Binary mode stores only the single byte. Word - A 16-bit integer. ASCII mode doesn't differentiate between Int and Word, so this will be stored as name=int:1 regardless. Binary mode stores only the 2 bytes. Float - A standard IEEE 754 32-bit floating point number. In ASCII mode the format is name=float:1.0 , while in Binary mode the float gets stored raw as 4 bytes. Bool - Stores a single-byte boolean value. In ASCII mode its name=bool:1 and in Binary mode it's a single byte. String - An ASCII encoded string. While in ASCII mode, strings are stored as name=string:value . In Binary mode, strings are NULL terminated. Vec3 - A three component vector, mainly used to store positional data. The ASCII mode format is name=vec3:1.0 1.0 1.0 . In Binary mode the three components of the vector are stored in series, which equals to a total size of 12 bytes. Color - A 32-bit color value stored as BGRA. In ASCII mode the color is stored as name=color:255 255 255 255 while in Binary mode it's just 4 raw bytes. Raw - Raw binary data. In order to maintain readability, in ASCII mode this gets stored as a hex encoded string such as name=raw:63D15B07 . In Binary mode, only the data itself is stored, without any other info. Be aware that due to this you must know the size of the data beforehand. RawFloat - An array of floats, mainly used to store bounding boxes. In ASCII mode, the floats are stored as name=rawFloat:1.0 1.0 1.0 1.0 1.0 1.0 . In Binary mode the floats are stored in series as raw bytes. Same as with Raw , you must know the size of the array beforehand. Enum - An enum value. In ASCII mode, it gets stored as name=enum:1 . In Binary mode, it behaves the same as Int . As you might have noticed, binary mode doesn't perform any kind of checks on if it's reading the right property or even data of the correct type. This is why BinSafe mode exists, as it stores the property type in along with the data itself. enum TYPE { TYPE_STRING = 0x1 , TYPE_INTEGER = 0x2 , TYPE_FLOAT = 0x3 , TYPE_BYTE = 0x4 , TYPE_WORD = 0x5 , TYPE_BOOL = 0x6 , TYPE_VEC3 = 0x7 , TYPE_COLOR = 0x8 , TYPE_RAW = 0x9 , TYPE_RAWFLOAT = 0x10 , TYPE_ENUM = 0x11 TYPE_HASH = 0x12 , }; struct BinSafeProperty { TYPE type ; union { struct { uint16_t stringLength ; char stringValue []; } uint32_t integerOrHashOrEnumValue ; float floatValue ; uint8_t byteOrBoolValue ; zVEC3 vec3Value ; zCOLOR colorValue ; struct { uint16_t rawLength ; char rawValue []; } struct { uint16_t rawFloatLength ; float rawFloatValue []; } }; }; Looking at the enumeration of types, you might notice that BinSafe mode has an additional property type called Hash. BinSafe archives include a hash table which is stored in the following manner: struct BinSafeHashTable { uint32_t chunkCount ; for ( chunkCount ) { uint16_t stringLength ; uint16_t linearValue ; uint32_t hashValue ; char text [ stringLength ]; } }; Instead of storing the raw value, properties may save a hash instead, which is then used to look up the corresponding value from the hash table.","title":"Properties"},{"location":"zengin/general_info/ObjectPersistence/#implementation","text":"As mentioned in the opening paragraph, classes may use the described functionality by overloading the Archive and Unarchive virtual methods, which pass an instance of zCArchiver by reference. When the class instance is then serialized and/or parsed, these methods are called and perform the desired serialization/parsing work. Within these routines, the class uses methods provided by the zCArchiver instance. These methods return/accept a value of a specific type (e.g. ReadInt/WriteInt), while they do the actual reading/writing work behind the scenes based on the current mode (ASCII/Binary/BinSafe). The programmer writing the class then does not care whether the final archive will be saved as ASCII, Binary or BinSafe, as they only use the zCArchiver Read* and Write* methods.","title":"Implementation"},{"location":"zengin/general_info/ObjectPersistence/#a-practical-example","text":"Let's propose that we have a class which is declared like so: class zCMyClass : public zCObject { public : zCMyClass () {} virtual ~ zCMyClass () {} virtual void Archive ( zCArchiver & ); virtual void Unarchive ( zCArchiver & ); int myInt ; zCMyClass * myObject ; zCMyClass * secondPointerToMyObject ; }; The hypothetical class then implements these virtual functions: void zCMyClass::Archive ( zCArchiver & archiver ) { archiver . WriteInt ( \"myInt\" , myInt ); archiver . WriteObject ( \"myObject\" , myObject ); archiver . WriteChunkStart ( \"myChunk\" , 0 ); archiver . WriteObject ( \"secondPointerToMyObject\" , secondPointerToMyObject ); archiver . WriteChunkEnd (); } void zCMyClass::Unarchive ( zCArchiver & archiver ) { archiver . ReadInt ( \"myInt\" , myInt ); myObject = dynamic_cast < zCMyClass *> ( archiver . ReadObject ( \"myObject\" )); archiver . ReadChunkStart ( \"myChunk\" ); secondPointerToMyObject = dynamic_cast < zCMyClass *> ( archiver . ReadObject ( \"secondPointerToMyObject\" )); archiver . ReadChunkEnd (); } We then initialize the class in the following way: zCMyClass object ; object . myInt = 12121212 ; object . myObject = new zCMyClass (); object . myObject -> myInt = 34343434 ; object . secondPointerToMyObject = object . myObject ; If we now serialized, or to use the engine's term \"archived\", this instance into an ASCII archive, the result would look like this: ZenGin Archive ver 1 zCArchiverGeneric ASCII saveGame 0 date 3.7.2022 0:0:0 user GMC END objects 2 END [% zCMyClass 0 0] myInt=int:12121212 [myObject zCMyClass 0 1] myInt=int:34343434 [myObject % 0 0] [] [myChunk % 0 0] [secondPointerToMyObject % 0 0] [] [] [] [myChunk % 0 0] [secondPointerToMyObject \u00a7 0 1] [] [] [] Notice how secondPointerToMyObject doesn't have any contents. The character \u00a7 tells the parser that this object already exists in the objectList, and that instead of creating a new instance, it should return an existing instance which is stored under index 1 in the objectList. This allows an instance to be referenced from multiple places, without the need to worry about duplicity. If we used Binary or BinSafe mode, we would see a big blob of binary data instead. This would of course store the exact same data, although in a slightly less human-readable format.","title":"A practical example"},{"location":"zengin/general_info/ObjectPersistence/#final-thoughts","text":"I hope this helps you better understand the inner workings of ZenGin. If you want to see how Piranha Bytes went about implementing a much more advanced version of this system for their next engine, check out Genome's object persistence system .","title":"Final thoughts"},{"location":"zengin/general_info/vdfs/","text":"VDFS \ud800\udf3e VDFS is the virtual file system used by ZenGin to distribute and store many (but not all) game assest. Tools \ud800\udf3e During the years, the community created different tools to work with VDFS volumes. GothicVDFS viewing extracting bulding .mod and .vdf archives VDFS Tool viewing extracting bulding optimizing compressing .mod and .vdf archives","title":"VDFS"},{"location":"zengin/general_info/vdfs/#vdfs","text":"VDFS is the virtual file system used by ZenGin to distribute and store many (but not all) game assest.","title":"VDFS"},{"location":"zengin/general_info/vdfs/#tools","text":"During the years, the community created different tools to work with VDFS volumes. GothicVDFS viewing extracting bulding .mod and .vdf archives VDFS Tool viewing extracting bulding optimizing compressing .mod and .vdf archives","title":"Tools"},{"location":"zengin/meshes/","text":"Meshes \ud800\udf3e Everything about 3D models in ZenGin.","title":"Meshes"},{"location":"zengin/meshes/#meshes","text":"Everything about 3D models in ZenGin.","title":"Meshes"},{"location":"zengin/music/","text":"Music \ud800\udf3e How to get your custom music.","title":"Music"},{"location":"zengin/music/#music","text":"How to get your custom music.","title":"Music"},{"location":"zengin/scripts/","text":"Scripts \ud800\udf3e ZenGin uses its own scripting language called Daedalus. It is similar to C programming language, so if you know some C programming, it will be quite easy to get started. The Scripts directory is where the scripts live. You will be able to find Daedalus script files - .d extension and .src files, that list all files to be compiled. Daedalus scripts can be edited in any text editor. To get useful features like syntax highlighting you can use community developed tools like Gothic Sourcer Daedalus VS Code extension","title":"Scripts"},{"location":"zengin/scripts/#scripts","text":"ZenGin uses its own scripting language called Daedalus. It is similar to C programming language, so if you know some C programming, it will be quite easy to get started. The Scripts directory is where the scripts live. You will be able to find Daedalus script files - .d extension and .src files, that list all files to be compiled. Daedalus scripts can be edited in any text editor. To get useful features like syntax highlighting you can use community developed tools like Gothic Sourcer Daedalus VS Code extension","title":"Scripts"},{"location":"zengin/scripts/classes/c_info/","text":"C_INFO Daedalus class \ud800\udf3e Acknowledgment Heavily inspired by the amazing documentation site Gothic library The C_INFO class is used to define dialogues in the game. Class definition \ud800\udf3e Class definition as it is defined in Scripts/Content/_intern/Classes.d script file. C_Info Daedalus class CLASS C_Info { var int npc ; // npc instance has the dialogue var int nr ; // number of the dialogue (for sorting) var int important ; // should the npc start the dialogue automatically var func condition ; // condition function var func information ; // function called on selecting the dialogue var string description ; // text in the dialogue box var int trade ; // should the dialogue show the trade window var int permanent ; // should the dialogue be permanent or only one time deal }; Class members \ud800\udf3e Variable Type Description npc int npc instance to have the dialogue nr int dialogue order number important int npc addresses player automatically condition func condition function whether the dialogue is shown or not information func function called on dialogue selection - contains the dialogue lines and other logic description string text shown in the dialogue box trade int is it a trade dialogue permanent int does the dialogue stay after being played once Class member overview \ud800\udf3e Description of the class member variables. npc \ud800\udf3e Sets what NPC will have this dialogue instance. Set a NPC instance. INSTANCE Info_Diego_Gamestart ( C_INFO ) { npc = PC_Thief ; // NPC instance for Diego // ... }; nr \ud800\udf3e The nr member variables determines the order of shown dialogues. Dialogues are ordered in the ascending order - instances with higher nr are below instances with lower nr . INSTANCE Info_Diego_Gamestart ( C_INFO ) { // ... nr = 1 ; // ... }; Note This is why the end dialogues usually have nr = 999; this is the highest number out of any dialogues therefore will always show up at the bottom. (999 is not the highest number the nr can store, it is just considered the highest number, as there will hardly be 998 dialogue instances for a single character) important \ud800\udf3e The important member variable determines, whether the NPC will automatically address the player or not. important = TRUE - the NPC will address the player important = FALSE - the player has to talk to the NPC When important is set to TRUE the description is not needed, since the dialogue is never shown in the dialogue box. Info If there are multiple important dialogues that satisfy their condition function, they will be played in the order specified by nr . Tip important variable is of the type integer, and it is initialized by the engine to the value of 0 . If you do not want your dialogue to be important, you can omit the important member variable since it will be initialized to 0 by the engine. condition \ud800\udf3e Condition function with signature func int f() . If the function returns TRUE the dialogue is displayed, if it return FALSE it is not displayed. The function name does not have to follow a particular naming convention, but a naming convention is used throughout all of the Gothic scripts: {DialogueName}_Condition . Conditioned dialogue Unconditioned dialogue INSTANCE Info_Diego_Gamestart ( C_INFO ) { // ... condition = Info_Diego_Gamestart_Condition ; // ... }; FUNC INT Info_Diego_Gamestart_Condition () { if ( Kapitel < 2 ) // Show only when chapter is less than 2 { return TRUE ; }; return FALSE ; // Not needed, but added for readability }; INSTANCE Info_Diego_EXIT_Gamestart ( C_INFO ) { // ... condition = Info_Diego_EXIT_Gamestart_Condition ; // ... }; FUNC INT Info_Diego_EXIT_Gamestart_Condition () { return TRUE ; // or return 1; }; Tip It is not necessary to return FALSE from dialogue conditions, but in other cases it can very rarely cause subtle bugs. It is thus good practice to always return some value, even if that is FALSE . information \ud800\udf3e The information function contains the function name (without double quotes \"\" as func is a type in Daedalus) that is called when the dialogue option is selected. It contains the lines NPC's will say, items that will be transferred, quests related logic and much more. The function name does not have to follow a particular naming convention, but a naming convention is used throughout all of the Gothic scripts: {DialogueName}_Info . INSTANCE Info_Diego_Gamestart ( C_INFO ) { npc = PC_Thief ; nr = 1 ; condition = Info_Diego_Gamestart_Condition ; information = Info_Diego_Gamestart_Info ; permanent = FALSE ; important = TRUE ; }; FUNC INT Info_Diego_Gamestart_Condition () { if ( Kapitel < 2 ) { return TRUE ; }; return FALSE ; }; FUNC VOID Info_Diego_Gamestart_Info () { AI_Output ( self , hero , \"Info_Diego_Gamestart_11_00\" ); //I'm Diego. AI_Output ( hero , self , \"Info_Diego_Gamestart_15_01\" ); //I'm... AI_Output ( self , hero , \"Info_Diego_Gamestart_11_02\" ); //I'm not interested in who you are. You've just arrived. I look after the new arrivals. That's all for now. AI_Output ( self , hero , \"Info_Diego_Gamestart_11_03\" ); //If you plan to stay alive for a while, you should talk to me. But of course I won't keep you from choosing your own destruction. Well, what do you think? B_Kapitelwechsel ( 1 ); // Show the chapter 1 screen }; description \ud800\udf3e Specify a string that will be shown in the dialogue window. instance DIA_XARDAS_GMC ( C_INFO ) { // ... description = \"Hello, is this the GMC site?\" ; }; trade \ud800\udf3e If trade is set to TRUE the trading interface will be launched after the content information function is finished. Fisk's trade dialogue instance Stt_311_Fisk_Trade ( C_INFO ) { npc = Stt_311_Fisk ; nr = 800 ; condition = Stt_311_Fisk_Trade_Condition ; information = Stt_311_Fisk_Trade_Info ; permanent = TRUE ; description = \"Show me your goods.\" ; trade = TRUE ; }; FUNC int Stt_311_Fisk_Trade_Condition () { return TRUE ; }; FUNC VOID Stt_311_Fisk_Trade_Info () { AI_Output ( other , self , \"Stt_311_Fisk_Trade_15_00\" ); //Show me your goods. }; Trivia Trade manager has been added to ZenGin not that long before the release of Gothic 1 (as discussed and discovered on Phoenix the Game Discord server with the acquisition of Gothic version 0.94k ). In version 0.94 the trade manager worked quite differently and used a special (nowadays unused) Daedalus class C_ItemReact . permanent \ud800\udf3e Dialogues with permanent = TRUE do not disappear after the dialogue is played. This is used for dialogues where you ask for directions or flavor dialogues for unnamed NPCs. Bug Frequently used external function Npc_KnowsInfo which returns true if the dialogue instance has been played has had a bug in the implementation for a long time. This bug made it impossible to use this function with dialogue instances with permanent = TRUE as it would always return FALSE . This has been fixed in Union 1.0m . zParserExtender \ud800\udf3e zParserExtender implements some Quality of Life features for dialogues. More information can be found in Dialogue constants article AF Script Packet \ud800\udf3e Enhaced Info Manager (implemented using Ikarus and LeGo) adds tun of customisation and additional features to dialogues. More information can be found in the AFSP Enhanced Information Manager article","title":"C_INFO"},{"location":"zengin/scripts/classes/c_info/#c_info-daedalus-class","text":"Acknowledgment Heavily inspired by the amazing documentation site Gothic library The C_INFO class is used to define dialogues in the game.","title":"C_INFO Daedalus class"},{"location":"zengin/scripts/classes/c_info/#class-definition","text":"Class definition as it is defined in Scripts/Content/_intern/Classes.d script file. C_Info Daedalus class CLASS C_Info { var int npc ; // npc instance has the dialogue var int nr ; // number of the dialogue (for sorting) var int important ; // should the npc start the dialogue automatically var func condition ; // condition function var func information ; // function called on selecting the dialogue var string description ; // text in the dialogue box var int trade ; // should the dialogue show the trade window var int permanent ; // should the dialogue be permanent or only one time deal };","title":"Class definition"},{"location":"zengin/scripts/classes/c_info/#class-members","text":"Variable Type Description npc int npc instance to have the dialogue nr int dialogue order number important int npc addresses player automatically condition func condition function whether the dialogue is shown or not information func function called on dialogue selection - contains the dialogue lines and other logic description string text shown in the dialogue box trade int is it a trade dialogue permanent int does the dialogue stay after being played once","title":"Class members"},{"location":"zengin/scripts/classes/c_info/#class-member-overview","text":"Description of the class member variables.","title":"Class member overview"},{"location":"zengin/scripts/classes/c_info/#npc","text":"Sets what NPC will have this dialogue instance. Set a NPC instance. INSTANCE Info_Diego_Gamestart ( C_INFO ) { npc = PC_Thief ; // NPC instance for Diego // ... };","title":"npc"},{"location":"zengin/scripts/classes/c_info/#nr","text":"The nr member variables determines the order of shown dialogues. Dialogues are ordered in the ascending order - instances with higher nr are below instances with lower nr . INSTANCE Info_Diego_Gamestart ( C_INFO ) { // ... nr = 1 ; // ... }; Note This is why the end dialogues usually have nr = 999; this is the highest number out of any dialogues therefore will always show up at the bottom. (999 is not the highest number the nr can store, it is just considered the highest number, as there will hardly be 998 dialogue instances for a single character)","title":"nr"},{"location":"zengin/scripts/classes/c_info/#important","text":"The important member variable determines, whether the NPC will automatically address the player or not. important = TRUE - the NPC will address the player important = FALSE - the player has to talk to the NPC When important is set to TRUE the description is not needed, since the dialogue is never shown in the dialogue box. Info If there are multiple important dialogues that satisfy their condition function, they will be played in the order specified by nr . Tip important variable is of the type integer, and it is initialized by the engine to the value of 0 . If you do not want your dialogue to be important, you can omit the important member variable since it will be initialized to 0 by the engine.","title":"important"},{"location":"zengin/scripts/classes/c_info/#condition","text":"Condition function with signature func int f() . If the function returns TRUE the dialogue is displayed, if it return FALSE it is not displayed. The function name does not have to follow a particular naming convention, but a naming convention is used throughout all of the Gothic scripts: {DialogueName}_Condition . Conditioned dialogue Unconditioned dialogue INSTANCE Info_Diego_Gamestart ( C_INFO ) { // ... condition = Info_Diego_Gamestart_Condition ; // ... }; FUNC INT Info_Diego_Gamestart_Condition () { if ( Kapitel < 2 ) // Show only when chapter is less than 2 { return TRUE ; }; return FALSE ; // Not needed, but added for readability }; INSTANCE Info_Diego_EXIT_Gamestart ( C_INFO ) { // ... condition = Info_Diego_EXIT_Gamestart_Condition ; // ... }; FUNC INT Info_Diego_EXIT_Gamestart_Condition () { return TRUE ; // or return 1; }; Tip It is not necessary to return FALSE from dialogue conditions, but in other cases it can very rarely cause subtle bugs. It is thus good practice to always return some value, even if that is FALSE .","title":"condition"},{"location":"zengin/scripts/classes/c_info/#information","text":"The information function contains the function name (without double quotes \"\" as func is a type in Daedalus) that is called when the dialogue option is selected. It contains the lines NPC's will say, items that will be transferred, quests related logic and much more. The function name does not have to follow a particular naming convention, but a naming convention is used throughout all of the Gothic scripts: {DialogueName}_Info . INSTANCE Info_Diego_Gamestart ( C_INFO ) { npc = PC_Thief ; nr = 1 ; condition = Info_Diego_Gamestart_Condition ; information = Info_Diego_Gamestart_Info ; permanent = FALSE ; important = TRUE ; }; FUNC INT Info_Diego_Gamestart_Condition () { if ( Kapitel < 2 ) { return TRUE ; }; return FALSE ; }; FUNC VOID Info_Diego_Gamestart_Info () { AI_Output ( self , hero , \"Info_Diego_Gamestart_11_00\" ); //I'm Diego. AI_Output ( hero , self , \"Info_Diego_Gamestart_15_01\" ); //I'm... AI_Output ( self , hero , \"Info_Diego_Gamestart_11_02\" ); //I'm not interested in who you are. You've just arrived. I look after the new arrivals. That's all for now. AI_Output ( self , hero , \"Info_Diego_Gamestart_11_03\" ); //If you plan to stay alive for a while, you should talk to me. But of course I won't keep you from choosing your own destruction. Well, what do you think? B_Kapitelwechsel ( 1 ); // Show the chapter 1 screen };","title":"information"},{"location":"zengin/scripts/classes/c_info/#description","text":"Specify a string that will be shown in the dialogue window. instance DIA_XARDAS_GMC ( C_INFO ) { // ... description = \"Hello, is this the GMC site?\" ; };","title":"description"},{"location":"zengin/scripts/classes/c_info/#trade","text":"If trade is set to TRUE the trading interface will be launched after the content information function is finished. Fisk's trade dialogue instance Stt_311_Fisk_Trade ( C_INFO ) { npc = Stt_311_Fisk ; nr = 800 ; condition = Stt_311_Fisk_Trade_Condition ; information = Stt_311_Fisk_Trade_Info ; permanent = TRUE ; description = \"Show me your goods.\" ; trade = TRUE ; }; FUNC int Stt_311_Fisk_Trade_Condition () { return TRUE ; }; FUNC VOID Stt_311_Fisk_Trade_Info () { AI_Output ( other , self , \"Stt_311_Fisk_Trade_15_00\" ); //Show me your goods. }; Trivia Trade manager has been added to ZenGin not that long before the release of Gothic 1 (as discussed and discovered on Phoenix the Game Discord server with the acquisition of Gothic version 0.94k ). In version 0.94 the trade manager worked quite differently and used a special (nowadays unused) Daedalus class C_ItemReact .","title":"trade"},{"location":"zengin/scripts/classes/c_info/#permanent","text":"Dialogues with permanent = TRUE do not disappear after the dialogue is played. This is used for dialogues where you ask for directions or flavor dialogues for unnamed NPCs. Bug Frequently used external function Npc_KnowsInfo which returns true if the dialogue instance has been played has had a bug in the implementation for a long time. This bug made it impossible to use this function with dialogue instances with permanent = TRUE as it would always return FALSE . This has been fixed in Union 1.0m .","title":"permanent"},{"location":"zengin/scripts/classes/c_info/#zparserextender","text":"zParserExtender implements some Quality of Life features for dialogues. More information can be found in Dialogue constants article","title":"zParserExtender"},{"location":"zengin/scripts/classes/c_info/#af-script-packet","text":"Enhaced Info Manager (implemented using Ikarus and LeGo) adds tun of customisation and additional features to dialogues. More information can be found in the AFSP Enhanced Information Manager article","title":"AF Script Packet"},{"location":"zengin/scripts/classes/c_item/","text":"C_ITEM Daedalus class \ud800\udf3e Acknowledgment Heavily inspired by the amazing documentation site Gothic library The C_ITEM class is used to define new items in the game. Class definition \ud800\udf3e Class definition as it is defined in Scripts/Content/_intern/Classes.d script file. C_Item Daedalus class CLASS C_Item { // For all Items VAR INT id ; // ID of the item VAR STRING name ; // Name of the item VAR STRING nameID ; // Name ID VAR INT hp ; // Current health of the item VAR INT hp_max ; // Maximum healt of the item VAR INT mainflag ; // Item category flag VAR INT flags ; // Item type flag VAR INT weight ; // Weight of the item VAR INT value ; // Value of the item // For weapons VAR INT damageType ; // Damage type VAR INT damageTotal ; // Total amount of damage VAR INT damage [ DAM_INDEX_MAX ]; // Array of damage types // For armours VAR INT wear ; // Flag to specify where to wear an item VAR INT protection [ PROT_INDEX_MAX ]; // Protection array of different damage types // For food VAR INT nutrition ; // The amount of HP healed // Ben\u00f6tigte Attribute zum Benutzen des Items VAR INT cond_atr [ 3 ]; // Array of NPC attributes needed to equip the item VAR INT cond_value [ 3 ]; // Array of values corresponding to the cond_atr arry // Attributes to be changed on equip VAR INT change_atr [ 3 ]; // Array of attributes that will be changed on equip VAR INT change_value [ 3 ]; // Array of values of the attributes defined in change_atr // Parser functions VAR FUNC magic ; VAR FUNC on_equip ; // Called on equpping an item VAR FUNC on_unequip ; // Called on unequipping an item VAR FUNC on_state [ 4 ]; VAR FUNC owner ; // Owner of the item: instance name VAR INT ownerGuild ; // Owner of the item: guild VAR INT disguiseGuild ; // NPC guild set when equipping an item // 3DS model file VAR STRING visual ; // Item model file // NPC mesh change, when equipping an item VAR STRING visual_change ; // .asc file VAR STRING effect ; // Effect instance VAR INT visual_skin ; // Texture variation VAR STRING scemeName ; // Animation sceme name VAR INT material ; // Material of the object VAR INT munition ; // Ammo instance var int spell ; // ID if the spell that this item does var int range ; // Range of the weapon var int mag_circle ; // Circle of magic needed to use this item VAR STRING description ; // The name of the item shown in the preview box VAR STRING text [ ITM_TEXT_MAX ]; // Array of string describing the item (left side) VAR INT count [ ITM_TEXT_MAX ]; // Array of integers (the right side) // Parameters for displaying items in the inventory var int inv_zbias // How far away is the item from the screen var int inv_rotx // X-axis rotation var int inv_roty // Y-axis rotation var int inv_rotz // Z-axis rotation var int inv_animate // Should the item rotate in the inventory }; It has many member variables, but not all of them are used for every item. It is not necessary to define every one of these variables for every item, as it was discussed on InsideGothic . Class members \ud800\udf3e A selection of the most important class members. change_atr & change_value \ud800\udf3e change_atr stores the attributes that will be changad by the amount specified in change_value . NPCs have these attributes: const int ATR_HITPOINTS = 0 ; // Hit points const int ATR_HITPOINTS_MAX = 1 ; // Max hitpoints const int ATR_MANA = 2 ; // Mana const int ATR_MANA_MAX = 3 ; // Max mana const int ATR_STRENGTH = 4 ; // Strength const int ATR_DEXTERITY = 5 ; // Dexterity const int ATR_REGENERATEHP = 6 ; // HP regeneration per second const int ATR_REGENERATEMANA = 7 ; // Mana regeneration per second This can be used on all eqippable items, to change the attributes. As an example, we can create a sword, that has a 10 point dexterity bonus. INSTANCE ItMw_testSword ( C_Item ) { // some code change_atr [ 0 ] = ATR_DEXTERITY ; change_value [ 0 ] = 10 ; // some code }; Warning Do not change ATR_HITPOINTS , ATR_MANA , ATR_HITPOINTS_MAX or ATR_MANA_MAX , it will result in an unwanted behaviour with max health or max mana. You can change ATR_HITPOINTS_MAX and ATR_MANA_MAX attributes in on_equip and on_unequip cond_atr & cond_value \ud800\udf3e cond_atr stores the attributes that will be checked as a requirement to equip an item, the amount specified in cond_value . The next example sword is equippable only, if the NPC has at least 5 strength. If the requirements are not met G_CanNotUse() is called. INSTANCE ItMw_testSword ( C_Item ) { // some code cond_atr [ 2 ] = ATR_STRENGTH ; cond_value [ 2 ] = 5 ; // some code }; Try injecting the code below zParserExtender to test it in game right away. It is compatible with G2NotR. INSTANCE ItMw_testSword ( C_Item ) { name = TXT_Spells [ 10 ]; // demonstrates the usage of direct constr array access mainflag = ITEM_KAT_NF ; flags = ITEM_SWD ; material = MAT_METAL ; value = 10 ; damageTotal = 10 ; damagetype = DAM_EDGE ; range = 100 ; cond_atr [ 2 ] = ATR_STRENGTH ; cond_value [ 2 ] = 5 ; change_atr [ 0 ] = ATR_DEXTERITY ; change_value [ 0 ] = 10 ; visual = \"ItMw_010_1h_Sword_short_01.3DS\" ; description = name ; TEXT [ 2 ] = NAME_Damage ; COUNT [ 2 ] = damageTotal ; TEXT [ 3 ] = NAME_Str_needed ; COUNT [ 3 ] = cond_value [ 2 ]; TEXT [ 4 ] = NAME_OneHanded ; TEXT [ 5 ] = NAME_Value ; COUNT [ 5 ] = value ; }; To insert it into the game use insert ItMw_testSword in console. text & count arrays \ud800\udf3e These two arrays are used to put information into the item information box. The maximum number of lines is 6. This is defined in the engine, but for script side class definiton is declared in the scripts too. const int ITM_TEXT_MAX = 6 ; This example shows an item with all elements of TEXT and COUNT array filled. Note Please notice the last COUNT element. It did not take the value we entered, but shows 10 which is the value of the item. This behaviour can be changed with Ikarus or Union. You can find the code below INSTANCE ItMw_testSword ( C_Item ) { name = TXT_Spells [ 10 ]; mainflag = ITEM_KAT_NF ; flags = ITEM_SWD ; material = MAT_METAL ; value = 10 ; damageTotal = 10 ; damagetype = DAM_EDGE ; range = 100 ; cond_atr [ 2 ] = ATR_STRENGTH ; cond_value [ 2 ] = 5 ; change_atr [ 0 ] = ATR_DEXTERITY ; change_value [ 0 ] = 10 ; visual = \"ItMw_010_1h_Sword_short_01.3DS\" ; description = name ; TEXT [ 0 ] = \"Line 0\" ; COUNT [ 0 ] = 0 ; TEXT [ 1 ] = \"Line 1\" ; COUNT [ 1 ] = 1 ; TEXT [ 2 ] = \"Line 2\" ; COUNT [ 2 ] = 2 ; TEXT [ 3 ] = \"Line 3\" ; COUNT [ 3 ] = 3 ; TEXT [ 4 ] = \"Line 4\" ; COUNT [ 4 ] = 34 ; TEXT [ 5 ] = \"Line 5\" ; COUNT [ 5 ] = 35 ; }; description & name \ud800\udf3e description - determines the name of the item in the inventory name - determines the focus name of the item in the world In the scripts you often find that the description is asigned the value of name . INSTANCE ItMw_testSword ( C_Item ) { name = \"New amazing sword\" ; // ... description = name ; // description now has the same value as ' // ...name' // ... }; This is used in the case where you want to show the name of the item on focus too. There is a second way used in the scripts though, for example with magic scrolls the focus name in the world is \"Scroll\" and in inventory the scroll carries the name of the spell. This is how it is done. INSTANCE ItSc_InstantFireball ( C_Item ) { name = NAME_Spruchrolle ; // const string = \"Scroll\" // ... description = NAME_SPL_InstantFireball ; // const string = \"Fireball\" // ... }; hp & hp_max \ud800\udf3e Both of these parameters are unused. Trivia In alpha ZenGin versions the player was able to destroy objects. This feature was abandoned in the course of the development. This video shows the reconstruction of this feature.","title":"C_ITEM"},{"location":"zengin/scripts/classes/c_item/#c_item-daedalus-class","text":"Acknowledgment Heavily inspired by the amazing documentation site Gothic library The C_ITEM class is used to define new items in the game.","title":"C_ITEM Daedalus class"},{"location":"zengin/scripts/classes/c_item/#class-definition","text":"Class definition as it is defined in Scripts/Content/_intern/Classes.d script file. C_Item Daedalus class CLASS C_Item { // For all Items VAR INT id ; // ID of the item VAR STRING name ; // Name of the item VAR STRING nameID ; // Name ID VAR INT hp ; // Current health of the item VAR INT hp_max ; // Maximum healt of the item VAR INT mainflag ; // Item category flag VAR INT flags ; // Item type flag VAR INT weight ; // Weight of the item VAR INT value ; // Value of the item // For weapons VAR INT damageType ; // Damage type VAR INT damageTotal ; // Total amount of damage VAR INT damage [ DAM_INDEX_MAX ]; // Array of damage types // For armours VAR INT wear ; // Flag to specify where to wear an item VAR INT protection [ PROT_INDEX_MAX ]; // Protection array of different damage types // For food VAR INT nutrition ; // The amount of HP healed // Ben\u00f6tigte Attribute zum Benutzen des Items VAR INT cond_atr [ 3 ]; // Array of NPC attributes needed to equip the item VAR INT cond_value [ 3 ]; // Array of values corresponding to the cond_atr arry // Attributes to be changed on equip VAR INT change_atr [ 3 ]; // Array of attributes that will be changed on equip VAR INT change_value [ 3 ]; // Array of values of the attributes defined in change_atr // Parser functions VAR FUNC magic ; VAR FUNC on_equip ; // Called on equpping an item VAR FUNC on_unequip ; // Called on unequipping an item VAR FUNC on_state [ 4 ]; VAR FUNC owner ; // Owner of the item: instance name VAR INT ownerGuild ; // Owner of the item: guild VAR INT disguiseGuild ; // NPC guild set when equipping an item // 3DS model file VAR STRING visual ; // Item model file // NPC mesh change, when equipping an item VAR STRING visual_change ; // .asc file VAR STRING effect ; // Effect instance VAR INT visual_skin ; // Texture variation VAR STRING scemeName ; // Animation sceme name VAR INT material ; // Material of the object VAR INT munition ; // Ammo instance var int spell ; // ID if the spell that this item does var int range ; // Range of the weapon var int mag_circle ; // Circle of magic needed to use this item VAR STRING description ; // The name of the item shown in the preview box VAR STRING text [ ITM_TEXT_MAX ]; // Array of string describing the item (left side) VAR INT count [ ITM_TEXT_MAX ]; // Array of integers (the right side) // Parameters for displaying items in the inventory var int inv_zbias // How far away is the item from the screen var int inv_rotx // X-axis rotation var int inv_roty // Y-axis rotation var int inv_rotz // Z-axis rotation var int inv_animate // Should the item rotate in the inventory }; It has many member variables, but not all of them are used for every item. It is not necessary to define every one of these variables for every item, as it was discussed on InsideGothic .","title":"Class definition"},{"location":"zengin/scripts/classes/c_item/#class-members","text":"A selection of the most important class members.","title":"Class members"},{"location":"zengin/scripts/classes/c_item/#change_atr-change_value","text":"change_atr stores the attributes that will be changad by the amount specified in change_value . NPCs have these attributes: const int ATR_HITPOINTS = 0 ; // Hit points const int ATR_HITPOINTS_MAX = 1 ; // Max hitpoints const int ATR_MANA = 2 ; // Mana const int ATR_MANA_MAX = 3 ; // Max mana const int ATR_STRENGTH = 4 ; // Strength const int ATR_DEXTERITY = 5 ; // Dexterity const int ATR_REGENERATEHP = 6 ; // HP regeneration per second const int ATR_REGENERATEMANA = 7 ; // Mana regeneration per second This can be used on all eqippable items, to change the attributes. As an example, we can create a sword, that has a 10 point dexterity bonus. INSTANCE ItMw_testSword ( C_Item ) { // some code change_atr [ 0 ] = ATR_DEXTERITY ; change_value [ 0 ] = 10 ; // some code }; Warning Do not change ATR_HITPOINTS , ATR_MANA , ATR_HITPOINTS_MAX or ATR_MANA_MAX , it will result in an unwanted behaviour with max health or max mana. You can change ATR_HITPOINTS_MAX and ATR_MANA_MAX attributes in on_equip and on_unequip","title":"change_atr &amp; change_value"},{"location":"zengin/scripts/classes/c_item/#cond_atr-cond_value","text":"cond_atr stores the attributes that will be checked as a requirement to equip an item, the amount specified in cond_value . The next example sword is equippable only, if the NPC has at least 5 strength. If the requirements are not met G_CanNotUse() is called. INSTANCE ItMw_testSword ( C_Item ) { // some code cond_atr [ 2 ] = ATR_STRENGTH ; cond_value [ 2 ] = 5 ; // some code }; Try injecting the code below zParserExtender to test it in game right away. It is compatible with G2NotR. INSTANCE ItMw_testSword ( C_Item ) { name = TXT_Spells [ 10 ]; // demonstrates the usage of direct constr array access mainflag = ITEM_KAT_NF ; flags = ITEM_SWD ; material = MAT_METAL ; value = 10 ; damageTotal = 10 ; damagetype = DAM_EDGE ; range = 100 ; cond_atr [ 2 ] = ATR_STRENGTH ; cond_value [ 2 ] = 5 ; change_atr [ 0 ] = ATR_DEXTERITY ; change_value [ 0 ] = 10 ; visual = \"ItMw_010_1h_Sword_short_01.3DS\" ; description = name ; TEXT [ 2 ] = NAME_Damage ; COUNT [ 2 ] = damageTotal ; TEXT [ 3 ] = NAME_Str_needed ; COUNT [ 3 ] = cond_value [ 2 ]; TEXT [ 4 ] = NAME_OneHanded ; TEXT [ 5 ] = NAME_Value ; COUNT [ 5 ] = value ; }; To insert it into the game use insert ItMw_testSword in console.","title":"cond_atr &amp; cond_value"},{"location":"zengin/scripts/classes/c_item/#text-count-arrays","text":"These two arrays are used to put information into the item information box. The maximum number of lines is 6. This is defined in the engine, but for script side class definiton is declared in the scripts too. const int ITM_TEXT_MAX = 6 ; This example shows an item with all elements of TEXT and COUNT array filled. Note Please notice the last COUNT element. It did not take the value we entered, but shows 10 which is the value of the item. This behaviour can be changed with Ikarus or Union. You can find the code below INSTANCE ItMw_testSword ( C_Item ) { name = TXT_Spells [ 10 ]; mainflag = ITEM_KAT_NF ; flags = ITEM_SWD ; material = MAT_METAL ; value = 10 ; damageTotal = 10 ; damagetype = DAM_EDGE ; range = 100 ; cond_atr [ 2 ] = ATR_STRENGTH ; cond_value [ 2 ] = 5 ; change_atr [ 0 ] = ATR_DEXTERITY ; change_value [ 0 ] = 10 ; visual = \"ItMw_010_1h_Sword_short_01.3DS\" ; description = name ; TEXT [ 0 ] = \"Line 0\" ; COUNT [ 0 ] = 0 ; TEXT [ 1 ] = \"Line 1\" ; COUNT [ 1 ] = 1 ; TEXT [ 2 ] = \"Line 2\" ; COUNT [ 2 ] = 2 ; TEXT [ 3 ] = \"Line 3\" ; COUNT [ 3 ] = 3 ; TEXT [ 4 ] = \"Line 4\" ; COUNT [ 4 ] = 34 ; TEXT [ 5 ] = \"Line 5\" ; COUNT [ 5 ] = 35 ; };","title":"text &amp; count arrays"},{"location":"zengin/scripts/classes/c_item/#description-name","text":"description - determines the name of the item in the inventory name - determines the focus name of the item in the world In the scripts you often find that the description is asigned the value of name . INSTANCE ItMw_testSword ( C_Item ) { name = \"New amazing sword\" ; // ... description = name ; // description now has the same value as ' // ...name' // ... }; This is used in the case where you want to show the name of the item on focus too. There is a second way used in the scripts though, for example with magic scrolls the focus name in the world is \"Scroll\" and in inventory the scroll carries the name of the spell. This is how it is done. INSTANCE ItSc_InstantFireball ( C_Item ) { name = NAME_Spruchrolle ; // const string = \"Scroll\" // ... description = NAME_SPL_InstantFireball ; // const string = \"Fireball\" // ... };","title":"description &amp; name"},{"location":"zengin/scripts/classes/c_item/#hp-hp_max","text":"Both of these parameters are unused. Trivia In alpha ZenGin versions the player was able to destroy objects. This feature was abandoned in the course of the development. This video shows the reconstruction of this feature.","title":"hp &amp; hp_max"},{"location":"zengin/scripts/classes/c_svm/","text":"C_SVM Daedalus class \ud800\udf3e Acknowledgment Heavily inspired by the amazing documentation site Gothic library The C_SVM class is used to define sound dialogues (smalltalk, reactions), that are defined for every C_NPC.voice . Class definition \ud800\udf3e C_SVM class is the only class with variable number of members. The C_SVM definition in the scripts dictates the content of the class. Every Gothic game has a different number of SVM entries. As an interesting information (more than anything else) we include a table with the numbers of voice lines and voices below. Game voice lines voices Gothic 1 136 17 Gothic Sequel 110 17 (30 planned) Gothic 2 202 19 Gothic 2 Addon 235 19 Chronicles of Myrtana 1346 73 Returning New Balance 495 19 Rules \ud800\udf3e The number of instances is defined by a constant integer with a specified name read by the engine. const int SVM_MODULES = 18 ; Info The value SVM_MODULES = 18 means 18 SVMs will be parsed by the engine and because the first one SVM_0 is empty, the final number of voices is 18 - 1 = 17. Instances of the C_SVM class must have the name SVM_XXX . instance svm_1 ( c_svm ) { // ... }; The first instance svm_0 is always empty, it is used internally by the engine. instance svm_0 ( c_svm ) {}; Usage in the scripts \ud800\udf3e While some of the defined SVMs are used automatically by the engine - the 20 smalltalk lines for example, others are used in the scripts. To instruct the engine to run a specific SVM a AI_OutputSVM external function is used, in the original scripts it is wrapped in a script function B_Say . To reference the SVM, you use the $ symbol followed by the name of the member variable in the C_SVM class definition. // some code { PrintScreen ( \"Not enough skill points!\" , -1 , -1 , \"FONT_OLD_20_WHITE.TGA\" , 1 ); B_Say ( self , other , \"$NOLEARNNOPOINTS\" ); }; // some code Here the $NOLEARNNOPOINTS references the var string NoLearnNoPoints in SVM.D . The voice is then chosen automatically by the engine. class C_SVM { //... // Lehrer-Kommentare var string NoLearnNoPoints ; // NSC-Lehrer verbietet Steigerung - keine Lernpunkte! var string NoLearnOverMax ; // NSC-Lehrer verbietet Attribut-Steigerung \u00fcber 100 var string NoLearnYouAlreadyKnow ; // Du mu\u00dft erst Fortgeschritten sein, bevor du ein Meister werden kannst! var string NoLearnYoureBetter ; // Du bist jetzt schon besser! //... };","title":"C_SVM"},{"location":"zengin/scripts/classes/c_svm/#c_svm-daedalus-class","text":"Acknowledgment Heavily inspired by the amazing documentation site Gothic library The C_SVM class is used to define sound dialogues (smalltalk, reactions), that are defined for every C_NPC.voice .","title":"C_SVM Daedalus class"},{"location":"zengin/scripts/classes/c_svm/#class-definition","text":"C_SVM class is the only class with variable number of members. The C_SVM definition in the scripts dictates the content of the class. Every Gothic game has a different number of SVM entries. As an interesting information (more than anything else) we include a table with the numbers of voice lines and voices below. Game voice lines voices Gothic 1 136 17 Gothic Sequel 110 17 (30 planned) Gothic 2 202 19 Gothic 2 Addon 235 19 Chronicles of Myrtana 1346 73 Returning New Balance 495 19","title":"Class definition"},{"location":"zengin/scripts/classes/c_svm/#rules","text":"The number of instances is defined by a constant integer with a specified name read by the engine. const int SVM_MODULES = 18 ; Info The value SVM_MODULES = 18 means 18 SVMs will be parsed by the engine and because the first one SVM_0 is empty, the final number of voices is 18 - 1 = 17. Instances of the C_SVM class must have the name SVM_XXX . instance svm_1 ( c_svm ) { // ... }; The first instance svm_0 is always empty, it is used internally by the engine. instance svm_0 ( c_svm ) {};","title":"Rules"},{"location":"zengin/scripts/classes/c_svm/#usage-in-the-scripts","text":"While some of the defined SVMs are used automatically by the engine - the 20 smalltalk lines for example, others are used in the scripts. To instruct the engine to run a specific SVM a AI_OutputSVM external function is used, in the original scripts it is wrapped in a script function B_Say . To reference the SVM, you use the $ symbol followed by the name of the member variable in the C_SVM class definition. // some code { PrintScreen ( \"Not enough skill points!\" , -1 , -1 , \"FONT_OLD_20_WHITE.TGA\" , 1 ); B_Say ( self , other , \"$NOLEARNNOPOINTS\" ); }; // some code Here the $NOLEARNNOPOINTS references the var string NoLearnNoPoints in SVM.D . The voice is then chosen automatically by the engine. class C_SVM { //... // Lehrer-Kommentare var string NoLearnNoPoints ; // NSC-Lehrer verbietet Steigerung - keine Lernpunkte! var string NoLearnOverMax ; // NSC-Lehrer verbietet Attribut-Steigerung \u00fcber 100 var string NoLearnYouAlreadyKnow ; // Du mu\u00dft erst Fortgeschritten sein, bevor du ein Meister werden kannst! var string NoLearnYoureBetter ; // Du bist jetzt schon besser! //... };","title":"Usage in the scripts"},{"location":"zengin/scripts/extenders/","text":"Daedalus extenders \ud800\udf3e The default scripting language Daedalus can be quite limitng. Over the years the community created quite a few extenders to, well, extend the functinality. Before Union came algong, the standard to interface with the engine was the script library Ikarus and a callection of packages LeGo built on top of that. Not so recently an additional script packat was made (and is actively being worked on) AF Script Packet that offers even more functionality and is built on tom of Ikarus & LeGo. With the adoption of Union and plugins the Union system can use a new extender emerged called zParserExtender . Other Union plugins can, of course, implement their own external functions.","title":"Daedalus extenders"},{"location":"zengin/scripts/extenders/#daedalus-extenders","text":"The default scripting language Daedalus can be quite limitng. Over the years the community created quite a few extenders to, well, extend the functinality. Before Union came algong, the standard to interface with the engine was the script library Ikarus and a callection of packages LeGo built on top of that. Not so recently an additional script packat was made (and is actively being worked on) AF Script Packet that offers even more functionality and is built on tom of Ikarus & LeGo. With the adoption of Union and plugins the Union system can use a new extender emerged called zParserExtender . Other Union plugins can, of course, implement their own external functions.","title":"Daedalus extenders"},{"location":"zengin/scripts/extenders/afsp/","text":"AF Script Packet \ud800\udf3e A uronen & F awkes' script packet is a script package built on top of Ikarus and LeGo . It implements many features, there is also a Union version (that is in its infancy stage). Note AFSP's documentation is lacking (@Auronen: \"My fault\"). The authors will host the documentation on GMC. Contacts Authors Fawkes & Auronen GitHub AFSP Forum AFSP","title":"AF Script Packet"},{"location":"zengin/scripts/extenders/afsp/#af-script-packet","text":"A uronen & F awkes' script packet is a script package built on top of Ikarus and LeGo . It implements many features, there is also a Union version (that is in its infancy stage). Note AFSP's documentation is lacking (@Auronen: \"My fault\"). The authors will host the documentation on GMC. Contacts Authors Fawkes & Auronen GitHub AFSP Forum AFSP","title":"AF Script Packet"},{"location":"zengin/scripts/extenders/afsp/afsp_eim/","text":"Enhanced Information Manager \ud800\udf3e Warning This is a quick paste-in of and old version of AFSP's documentation, the information should be taken with a grain of salt, might not be up to date, since AFSP is being developed all the time. (And this is only a demo page) Enhanced Information Manager allows you to more precisely control the Information Manager (dialogue manager). Change color, font and much more! This package \"scans\" the dialogue string for modifiers and alters the string based on the modifiers you specify. Initialization \ud800\udf3e To use this feature you have to Add _headers_G[1/2]_EnhancedInfoManager.src or _headers_G[1/2]_All.src to your Gothic.src after Ikarus and LeGo initialization. Call G12_EnhancedInfoManager_Init(); from your INIT_GLOBAL() function in Startup.d Change colour \ud800\udf3e Set font color for a dialogue choice. h@[hex color value] Set font color for highlighted dialogue choice. hs@[hex color value] Example description = \"h@2a85a3 hs@2ea9d1 This dialogue is blue.\" ; Change font \ud800\udf3e Set font itself for a dialogue choice. f@[font name] Set font itself for highlighted dialogue choice. fs@[font name] Example description = \"f@font_old_20_white.tga fs@font_old_10_white.tga This dialogue has a different font, when selected.\" ; Change text alignment \ud800\udf3e Align text left al@ Align text center ac@ Align text right ar@ Example description = \"al@ This dialogue has LEFT alignment.\" ; description = \"ac@ This dialogue has CENTER alignment.\" ; description = \"ar@ This dialogue has RIGHT alignment.\" ; Disable dialogue \ud800\udf3e Player cannot highlight (and select) this dialogue d@ Text input field \ud800\udf3e Input field allows you to turn a dialogue choice into a input text field. a@ Example INSTANCE DIA_Xardas_Password ( C_Info ) { npc = NONE_100_Xardas ; nr = 1 ; condition = DIA_Xardas_Password_Condition ; information = DIA_Xardas_Password_Info ; permanent = FALSE ; description = \"a@ What is the password to get to the Mages of Water?\" ; }; FUNC INT DIA_Xardas_Password_Condition () { return TRUE ; }; FUNC VOID DIA_Xardas_Password_Info () { if ( Hlp_StrCmp ( InfoManagerAnswer , \"TETRIANDOCH\" )) { PrintScreen ( \"Yes that is correct!\" , -1 , -1 , \"font_old_10_white.tga\" , 3 ); } else { PrintScreen ( \"No that is wrong!\" , -1 , -1 , \"font_old_10_white.tga\" , 3 ); }; }; Dialogue numbers \ud800\udf3e This feature shows a dialogue number next to the dialogue line (visual for Dialogue keyboard controls ) To turn this on, you just set InfoManagerNumKeysNumbers variable to true. (in your INIT_GLOBAL() function) InfoManagerNumKeysNumbers = TRUE; Dialogue keyboard controls \ud800\udf3e Note This has also been fixed int Union and we noticed a strange behavior with different keyboard layouts. This feature changes the way number keys affect dialogue selection. The first dialogue is no longer 0, by pressing appropriate number you highlight the dialogue option. InfoManagerNumKeysControls = TRUE; Spinners \ud800\udf3e This is by far the most flashy feature of EIM, it allows you to use left/right arrow keys on a dialogue option to increase/decease numerical value. This can be used in many ways. This feature is a bit more complex: 1. Set up a standard dialogue Notice Notice we are using \" dummy \" as a description, since it is going to get updated. If something goes wrong, the \" dummy \" string shows up and you can clearly tell somethings went wrong. INSTANCE PC_Pan_Cook_Meat ( C_Info ) { nr = 1 ; condition = PC_Pan_Cook_Meat_Condition ; information = PC_Pan_Cook_Meat_Info ; permanent = TRUE ; description = \"dummy\" ; //Description is updated in PC_Pan_Cook_Meat_Condition }; Most of the magic takes place in the condition function (apart from the code behind the scenes, of course). var int selectedMeat ; // global variable for this spinner value FUNC INT PC_Pan_Cook_Meat_Condition () { if ( PLAYER_MOBSI_PRODUCTION == MOBSI_DIALOG_PAN ) { var string lastSpinnerID ; var int total ; total = NPC_HasItems ( self , ItFoMuttonRaw ); if ( selectedMeat == 0 ) { selectedMeat = 1 ; }; //Default initial value //Check currently selected spinned ID --> is it this one? if ( Hlp_StrCmp ( InfoManagerSpinnerID , \"CookMeat\" )) { //Setup spinner if spinner ID has changed if ( ! Hlp_StrCmp ( InfoManagerSpinnerID , lastSpinnerID )) { //Restore previous value InfoManagerSpinnerValue = selectedMeat ; }; //Page Up/Down quantity InfoManagerSpinnerPageSize = 5 ; //Min/Max value (Home/End keys) InfoManagerSpinnerValueMin = 1 ; InfoManagerSpinnerValueMax = total ; //Update number which is shown in description (in case it was changed by _HOOK_VIEWDIALOGCHOICE_HANDLEEVENT selectedMeat = InfoManagerSpinnerValue ; }; lastSpinnerID = InfoManagerSpinnerID ; //Remember last active spinner ID var string newDescription ; //Spinner ID 'CookMeat' newDescription = \"s@CookMeat Cook some meat: \" ; newDescription = ConcatStrings ( newDescription , IntToString ( selectedMeat )); newDescription = ConcatStrings ( newDescription , \" / \" ); newDescription = ConcatStrings ( newDescription , IntToString ( total )); //Update description PC_Pan_Cook_Meat . description = newDescription ; return TRUE ; }; return FALSE ; }; We can use the spinner value stored in selectedMeat variable here in the info function, to create the meat (or do other stuff with it). FUNC VOID PC_Pan_Cook_Meat_Info () { //If we don't have any meat ... don't cook any :) if ( ! NPC_HasItems ( self , ItFoMuttonRaw )) { return ; }; //This should not happen - but you never know! if ( selectedMeat < 1 ) { return ; }; //This should not happen either! but just in case if ( selectedMeat > ( NPC_HasItems ( self , ItFoMuttonRaw ))) { selectedMeat = NPC_HasItems ( self , ItFoMuttonRaw ); }; NPC_RemoveInvItems ( self , ItFoMuttonRaw , selectedMeat ); CreateInvItems ( self , ItFoMutton , selectedMeat ); //Reset value for next time selectedMeat = 1 ; }; Spinners: Full code example \ud800\udf3e Spinner example INSTANCE PC_Pan_Cook_Meat ( C_Info ) { nr = 1 ; condition = PC_Pan_Cook_Meat_Condition ; information = PC_Pan_Cook_Meat_Info ; permanent = TRUE ; description = \"dummy\" ; //Description is updated in PC_Pan_Cook_Meat_Condition }; var int selectedMeat ; FUNC INT PC_Pan_Cook_Meat_Condition () { if ( PLAYER_MOBSI_PRODUCTION == MOBSI_DIALOG_PAN ) { var string lastSpinnerID ; var int total ; total = NPC_HasItems ( self , ItFoMuttonRaw ); if ( selectedMeat == 0 ) { selectedMeat = 1 ; }; //Default initial value //Check currently selected spinned ID --> is it this one? if ( Hlp_StrCmp ( InfoManagerSpinnerID , \"CookMeat\" )) { //Setup spinner if spinner ID has changed if ( ! Hlp_StrCmp ( InfoManagerSpinnerID , lastSpinnerID )) { //Restore previous value InfoManagerSpinnerValue = selectedMeat ; }; //Page Up/Down quantity InfoManagerSpinnerPageSize = 5 ; //Min/Max value (Home/End keys) InfoManagerSpinnerValueMin = 1 ; InfoManagerSpinnerValueMax = total ; //Update number which is shown in description (in case it was changed by _HOOK_VIEWDIALOGCHOICE_HANDLEEVENT selectedMeat = InfoManagerSpinnerValue ; }; lastSpinnerID = InfoManagerSpinnerID ; //Remember last active spinner ID var string newDescription ; //Spinner ID 'CookMeat' newDescription = \"s@CookMeat Cook some meat: \" ; newDescription = ConcatStrings ( newDescription , IntToString ( selectedMeat )); newDescription = ConcatStrings ( newDescription , \" / \" ); newDescription = ConcatStrings ( newDescription , IntToString ( total )); //Update description PC_Pan_Cook_Meat . description = newDescription ; return TRUE ; }; return FALSE ; }; FUNC VOID PC_Pan_Cook_Meat_Info () { //If we don't have any meat ... don't cook any :) if ( ! NPC_HasItems ( self , ItFoMuttonRaw )) { return ; }; //This should not happen - but you never know! if ( selectedMeat < 1 ) { return ; }; //This should not happen either! but just in case if ( selectedMeat > ( NPC_HasItems ( self , ItFoMuttonRaw ))) { selectedMeat = NPC_HasItems ( self , ItFoMuttonRaw ); }; NPC_RemoveInvItems ( self , ItFoMuttonRaw , selectedMeat ); CreateInvItems ( self , ItFoMutton , selectedMeat ); //Reset value for next time InfoManagerSpinnerValue = 1 ; }; INSTANCE PC_Pan_Cook_Meat_Exit ( C_Info ) { nr = 999 ; condition = PC_Pan_Cook_Meat_Exit_Condition ; information = PC_Pan_Cook_Meat_Exit_Info ; permanent = TRUE ; description = \"End\" ; }; FUNC INT PC_Pan_Cook_Meat_Exit_Condition () { if ( PLAYER_MOBSI_PRODUCTION == MOBSI_DIALOG_PAN ) { return TRUE ; }; return FALSE ; }; FUNC VOID PC_Pan_Cook_Meat_Exit_Info () { if ( PLAYER_MOBSI_PRODUCTION != MOBSI_DIALOG_NONE ) { PLAYER_MOBSI_PRODUCTION = MOBSI_DIALOG_NONE ; hero . aivar [ AIV_INVINCIBLE ] = FALSE ; AI_StopProcessInfos ( hero ); }; };","title":"Enhanced Info Manager"},{"location":"zengin/scripts/extenders/afsp/afsp_eim/#enhanced-information-manager","text":"Warning This is a quick paste-in of and old version of AFSP's documentation, the information should be taken with a grain of salt, might not be up to date, since AFSP is being developed all the time. (And this is only a demo page) Enhanced Information Manager allows you to more precisely control the Information Manager (dialogue manager). Change color, font and much more! This package \"scans\" the dialogue string for modifiers and alters the string based on the modifiers you specify.","title":"Enhanced Information Manager"},{"location":"zengin/scripts/extenders/afsp/afsp_eim/#initialization","text":"To use this feature you have to Add _headers_G[1/2]_EnhancedInfoManager.src or _headers_G[1/2]_All.src to your Gothic.src after Ikarus and LeGo initialization. Call G12_EnhancedInfoManager_Init(); from your INIT_GLOBAL() function in Startup.d","title":"Initialization"},{"location":"zengin/scripts/extenders/afsp/afsp_eim/#change-colour","text":"Set font color for a dialogue choice. h@[hex color value] Set font color for highlighted dialogue choice. hs@[hex color value] Example description = \"h@2a85a3 hs@2ea9d1 This dialogue is blue.\" ;","title":"Change colour"},{"location":"zengin/scripts/extenders/afsp/afsp_eim/#change-font","text":"Set font itself for a dialogue choice. f@[font name] Set font itself for highlighted dialogue choice. fs@[font name] Example description = \"f@font_old_20_white.tga fs@font_old_10_white.tga This dialogue has a different font, when selected.\" ;","title":"Change font"},{"location":"zengin/scripts/extenders/afsp/afsp_eim/#change-text-alignment","text":"Align text left al@ Align text center ac@ Align text right ar@ Example description = \"al@ This dialogue has LEFT alignment.\" ; description = \"ac@ This dialogue has CENTER alignment.\" ; description = \"ar@ This dialogue has RIGHT alignment.\" ;","title":"Change text alignment"},{"location":"zengin/scripts/extenders/afsp/afsp_eim/#disable-dialogue","text":"Player cannot highlight (and select) this dialogue d@","title":"Disable dialogue"},{"location":"zengin/scripts/extenders/afsp/afsp_eim/#text-input-field","text":"Input field allows you to turn a dialogue choice into a input text field. a@ Example INSTANCE DIA_Xardas_Password ( C_Info ) { npc = NONE_100_Xardas ; nr = 1 ; condition = DIA_Xardas_Password_Condition ; information = DIA_Xardas_Password_Info ; permanent = FALSE ; description = \"a@ What is the password to get to the Mages of Water?\" ; }; FUNC INT DIA_Xardas_Password_Condition () { return TRUE ; }; FUNC VOID DIA_Xardas_Password_Info () { if ( Hlp_StrCmp ( InfoManagerAnswer , \"TETRIANDOCH\" )) { PrintScreen ( \"Yes that is correct!\" , -1 , -1 , \"font_old_10_white.tga\" , 3 ); } else { PrintScreen ( \"No that is wrong!\" , -1 , -1 , \"font_old_10_white.tga\" , 3 ); }; };","title":"Text input field"},{"location":"zengin/scripts/extenders/afsp/afsp_eim/#dialogue-numbers","text":"This feature shows a dialogue number next to the dialogue line (visual for Dialogue keyboard controls ) To turn this on, you just set InfoManagerNumKeysNumbers variable to true. (in your INIT_GLOBAL() function) InfoManagerNumKeysNumbers = TRUE;","title":"Dialogue numbers"},{"location":"zengin/scripts/extenders/afsp/afsp_eim/#dialogue-keyboard-controls","text":"Note This has also been fixed int Union and we noticed a strange behavior with different keyboard layouts. This feature changes the way number keys affect dialogue selection. The first dialogue is no longer 0, by pressing appropriate number you highlight the dialogue option. InfoManagerNumKeysControls = TRUE;","title":"Dialogue keyboard controls"},{"location":"zengin/scripts/extenders/afsp/afsp_eim/#spinners","text":"This is by far the most flashy feature of EIM, it allows you to use left/right arrow keys on a dialogue option to increase/decease numerical value. This can be used in many ways. This feature is a bit more complex: 1. Set up a standard dialogue Notice Notice we are using \" dummy \" as a description, since it is going to get updated. If something goes wrong, the \" dummy \" string shows up and you can clearly tell somethings went wrong. INSTANCE PC_Pan_Cook_Meat ( C_Info ) { nr = 1 ; condition = PC_Pan_Cook_Meat_Condition ; information = PC_Pan_Cook_Meat_Info ; permanent = TRUE ; description = \"dummy\" ; //Description is updated in PC_Pan_Cook_Meat_Condition }; Most of the magic takes place in the condition function (apart from the code behind the scenes, of course). var int selectedMeat ; // global variable for this spinner value FUNC INT PC_Pan_Cook_Meat_Condition () { if ( PLAYER_MOBSI_PRODUCTION == MOBSI_DIALOG_PAN ) { var string lastSpinnerID ; var int total ; total = NPC_HasItems ( self , ItFoMuttonRaw ); if ( selectedMeat == 0 ) { selectedMeat = 1 ; }; //Default initial value //Check currently selected spinned ID --> is it this one? if ( Hlp_StrCmp ( InfoManagerSpinnerID , \"CookMeat\" )) { //Setup spinner if spinner ID has changed if ( ! Hlp_StrCmp ( InfoManagerSpinnerID , lastSpinnerID )) { //Restore previous value InfoManagerSpinnerValue = selectedMeat ; }; //Page Up/Down quantity InfoManagerSpinnerPageSize = 5 ; //Min/Max value (Home/End keys) InfoManagerSpinnerValueMin = 1 ; InfoManagerSpinnerValueMax = total ; //Update number which is shown in description (in case it was changed by _HOOK_VIEWDIALOGCHOICE_HANDLEEVENT selectedMeat = InfoManagerSpinnerValue ; }; lastSpinnerID = InfoManagerSpinnerID ; //Remember last active spinner ID var string newDescription ; //Spinner ID 'CookMeat' newDescription = \"s@CookMeat Cook some meat: \" ; newDescription = ConcatStrings ( newDescription , IntToString ( selectedMeat )); newDescription = ConcatStrings ( newDescription , \" / \" ); newDescription = ConcatStrings ( newDescription , IntToString ( total )); //Update description PC_Pan_Cook_Meat . description = newDescription ; return TRUE ; }; return FALSE ; }; We can use the spinner value stored in selectedMeat variable here in the info function, to create the meat (or do other stuff with it). FUNC VOID PC_Pan_Cook_Meat_Info () { //If we don't have any meat ... don't cook any :) if ( ! NPC_HasItems ( self , ItFoMuttonRaw )) { return ; }; //This should not happen - but you never know! if ( selectedMeat < 1 ) { return ; }; //This should not happen either! but just in case if ( selectedMeat > ( NPC_HasItems ( self , ItFoMuttonRaw ))) { selectedMeat = NPC_HasItems ( self , ItFoMuttonRaw ); }; NPC_RemoveInvItems ( self , ItFoMuttonRaw , selectedMeat ); CreateInvItems ( self , ItFoMutton , selectedMeat ); //Reset value for next time selectedMeat = 1 ; };","title":"Spinners"},{"location":"zengin/scripts/extenders/afsp/afsp_eim/#spinners-full-code-example","text":"Spinner example INSTANCE PC_Pan_Cook_Meat ( C_Info ) { nr = 1 ; condition = PC_Pan_Cook_Meat_Condition ; information = PC_Pan_Cook_Meat_Info ; permanent = TRUE ; description = \"dummy\" ; //Description is updated in PC_Pan_Cook_Meat_Condition }; var int selectedMeat ; FUNC INT PC_Pan_Cook_Meat_Condition () { if ( PLAYER_MOBSI_PRODUCTION == MOBSI_DIALOG_PAN ) { var string lastSpinnerID ; var int total ; total = NPC_HasItems ( self , ItFoMuttonRaw ); if ( selectedMeat == 0 ) { selectedMeat = 1 ; }; //Default initial value //Check currently selected spinned ID --> is it this one? if ( Hlp_StrCmp ( InfoManagerSpinnerID , \"CookMeat\" )) { //Setup spinner if spinner ID has changed if ( ! Hlp_StrCmp ( InfoManagerSpinnerID , lastSpinnerID )) { //Restore previous value InfoManagerSpinnerValue = selectedMeat ; }; //Page Up/Down quantity InfoManagerSpinnerPageSize = 5 ; //Min/Max value (Home/End keys) InfoManagerSpinnerValueMin = 1 ; InfoManagerSpinnerValueMax = total ; //Update number which is shown in description (in case it was changed by _HOOK_VIEWDIALOGCHOICE_HANDLEEVENT selectedMeat = InfoManagerSpinnerValue ; }; lastSpinnerID = InfoManagerSpinnerID ; //Remember last active spinner ID var string newDescription ; //Spinner ID 'CookMeat' newDescription = \"s@CookMeat Cook some meat: \" ; newDescription = ConcatStrings ( newDescription , IntToString ( selectedMeat )); newDescription = ConcatStrings ( newDescription , \" / \" ); newDescription = ConcatStrings ( newDescription , IntToString ( total )); //Update description PC_Pan_Cook_Meat . description = newDescription ; return TRUE ; }; return FALSE ; }; FUNC VOID PC_Pan_Cook_Meat_Info () { //If we don't have any meat ... don't cook any :) if ( ! NPC_HasItems ( self , ItFoMuttonRaw )) { return ; }; //This should not happen - but you never know! if ( selectedMeat < 1 ) { return ; }; //This should not happen either! but just in case if ( selectedMeat > ( NPC_HasItems ( self , ItFoMuttonRaw ))) { selectedMeat = NPC_HasItems ( self , ItFoMuttonRaw ); }; NPC_RemoveInvItems ( self , ItFoMuttonRaw , selectedMeat ); CreateInvItems ( self , ItFoMutton , selectedMeat ); //Reset value for next time InfoManagerSpinnerValue = 1 ; }; INSTANCE PC_Pan_Cook_Meat_Exit ( C_Info ) { nr = 999 ; condition = PC_Pan_Cook_Meat_Exit_Condition ; information = PC_Pan_Cook_Meat_Exit_Info ; permanent = TRUE ; description = \"End\" ; }; FUNC INT PC_Pan_Cook_Meat_Exit_Condition () { if ( PLAYER_MOBSI_PRODUCTION == MOBSI_DIALOG_PAN ) { return TRUE ; }; return FALSE ; }; FUNC VOID PC_Pan_Cook_Meat_Exit_Info () { if ( PLAYER_MOBSI_PRODUCTION != MOBSI_DIALOG_NONE ) { PLAYER_MOBSI_PRODUCTION = MOBSI_DIALOG_NONE ; hero . aivar [ AIV_INVINCIBLE ] = FALSE ; AI_StopProcessInfos ( hero ); }; };","title":"Spinners: Full code example"},{"location":"zengin/scripts/extenders/ikarus/","text":"Ikarus \ud800\udf3e Is a daedalus library for the game Gothic. Exploits the interpreter to allow arbitrary memory access and defines a lot of useful functions for interfacing with the engine. Contacts Author Sektenspinner & contributors GitHub Ikarus Forum Ikarus Note Ikarus is hosted on GitHub and the documentation is built in . The translation is planned.","title":"Ikarus"},{"location":"zengin/scripts/extenders/ikarus/#ikarus","text":"Is a daedalus library for the game Gothic. Exploits the interpreter to allow arbitrary memory access and defines a lot of useful functions for interfacing with the engine. Contacts Author Sektenspinner & contributors GitHub Ikarus Forum Ikarus Note Ikarus is hosted on GitHub and the documentation is built in . The translation is planned.","title":"Ikarus"},{"location":"zengin/scripts/extenders/lego/","text":"LeGo \ud800\udf3e LeGo ( Le hona Go ttfried) is a script packet built on top of Ikarus . Contacts Author Lehona, Gottfried & contributors GitHub LeGo Forum LeGo Note The code for LeGo is hosted on GitHub and LeGo has its very own documentation page .","title":"LeGo"},{"location":"zengin/scripts/extenders/lego/#lego","text":"LeGo ( Le hona Go ttfried) is a script packet built on top of Ikarus . Contacts Author Lehona, Gottfried & contributors GitHub LeGo Forum LeGo Note The code for LeGo is hosted on GitHub and LeGo has its very own documentation page .","title":"LeGo"},{"location":"zengin/scripts/extenders/lego/ConsoleCommands/","text":"Console Commands \ud800\udf3e This package allows you to create new console commands. Dependencies \ud800\udf3e PermMem HookEngine Initialization \ud800\udf3e Initialize with LeGo_ConsoleCommands flag. LeGo_Init ( LeGo_ConsoleCommands ) Implementation \ud800\udf3e ConsoleCommands.d on GitHub Functions \ud800\udf3e CC_Register \ud800\udf3e Registers a new console command. void CC_Register ( func f , string cmdPrefix , string description ) f - This function is executed when the command cmdPrefix is entered in the console. The function signature is func string f(var string p0) . The string passed is everything that was specified in the console after the actual command. The return value is then displayed in the console. cmdPrefix - This is the command that can be entered in the console. description - This text appears next to the command (in zSpy) when you use the help command in the console. CC_Remove \ud800\udf3e Removes a function from the console commands. void CC_Remove ( func f ) f - This function will be removed, i.e. the associated command will no longer work. CC_Active \ud800\udf3e Checks whether the function passed is already part of a console command. int CC_Active ( func f ) f - function being checked return - TRUE if there is a corresponding function, FALSE otherwise. Examples \ud800\udf3e Basic command example \ud800\udf3e As a basic example let's create a version command that prints a version of our modification. First we declare a constant string variable to hold the version string to be shown. const string Mod_Version = \"My mod version 0.1alpha\" ; Next we create the command function. Note Notice the correct function signature. If you do not adhere to the correct function signature the command will crash the game. // This function is called by our console func string CC_ModVersion ( var string param ) { return Mod_Version ; }; Then we have to register the functions. For convenience I create a new RegisterConsoleFunctions function to initialize all console commands. The function is really simple. func void RegisterConsoleFunctions () { CC_Register ( CC_ModVersion , \"mod_version\" , \"Version of my amazing mod.\" ); }; Lastaly we have to call this function from INIT_GLOBAL function. func void INIT_GLOBAL () { // will be called for every world (from INIT_<LevelName>) Game_InitGerman (); // Ikarus initialization MEM_InitAll (); // LeGo initialization LeGo_Init ( LeGo_ConsoleCommands ); // Here we register all of our commands RegisterConsoleFunctions (); // the rest of the code };","title":"ConsoleCommands"},{"location":"zengin/scripts/extenders/lego/ConsoleCommands/#console-commands","text":"This package allows you to create new console commands.","title":"Console Commands"},{"location":"zengin/scripts/extenders/lego/ConsoleCommands/#dependencies","text":"PermMem HookEngine","title":"Dependencies"},{"location":"zengin/scripts/extenders/lego/ConsoleCommands/#initialization","text":"Initialize with LeGo_ConsoleCommands flag. LeGo_Init ( LeGo_ConsoleCommands )","title":"Initialization"},{"location":"zengin/scripts/extenders/lego/ConsoleCommands/#implementation","text":"ConsoleCommands.d on GitHub","title":"Implementation"},{"location":"zengin/scripts/extenders/lego/ConsoleCommands/#functions","text":"","title":"Functions"},{"location":"zengin/scripts/extenders/lego/ConsoleCommands/#cc_register","text":"Registers a new console command. void CC_Register ( func f , string cmdPrefix , string description ) f - This function is executed when the command cmdPrefix is entered in the console. The function signature is func string f(var string p0) . The string passed is everything that was specified in the console after the actual command. The return value is then displayed in the console. cmdPrefix - This is the command that can be entered in the console. description - This text appears next to the command (in zSpy) when you use the help command in the console.","title":"CC_Register"},{"location":"zengin/scripts/extenders/lego/ConsoleCommands/#cc_remove","text":"Removes a function from the console commands. void CC_Remove ( func f ) f - This function will be removed, i.e. the associated command will no longer work.","title":"CC_Remove"},{"location":"zengin/scripts/extenders/lego/ConsoleCommands/#cc_active","text":"Checks whether the function passed is already part of a console command. int CC_Active ( func f ) f - function being checked return - TRUE if there is a corresponding function, FALSE otherwise.","title":"CC_Active"},{"location":"zengin/scripts/extenders/lego/ConsoleCommands/#examples","text":"","title":"Examples"},{"location":"zengin/scripts/extenders/lego/ConsoleCommands/#basic-command-example","text":"As a basic example let's create a version command that prints a version of our modification. First we declare a constant string variable to hold the version string to be shown. const string Mod_Version = \"My mod version 0.1alpha\" ; Next we create the command function. Note Notice the correct function signature. If you do not adhere to the correct function signature the command will crash the game. // This function is called by our console func string CC_ModVersion ( var string param ) { return Mod_Version ; }; Then we have to register the functions. For convenience I create a new RegisterConsoleFunctions function to initialize all console commands. The function is really simple. func void RegisterConsoleFunctions () { CC_Register ( CC_ModVersion , \"mod_version\" , \"Version of my amazing mod.\" ); }; Lastaly we have to call this function from INIT_GLOBAL function. func void INIT_GLOBAL () { // will be called for every world (from INIT_<LevelName>) Game_InitGerman (); // Ikarus initialization MEM_InitAll (); // LeGo initialization LeGo_Init ( LeGo_ConsoleCommands ); // Here we register all of our commands RegisterConsoleFunctions (); // the rest of the code };","title":"Basic command example"},{"location":"zengin/scripts/extenders/lego/ItemHelper/","text":"ItemHelper \ud800\udf3e This package is very simple. Retrieve a oCItem pointer from a C_Item instance valid for the current world and session. Warning Make sure every world has waypoint with name TOT (\"dead\" in German). Ikarus & LeGo need this waypoint to spawn helper NPCs. This is especially important in Gothic 1 since G1 vanilla worlds do not have the TOT waypoint. Dependencies \ud800\udf3e No dependencies Initialization \ud800\udf3e No initialization Implementation \ud800\udf3e ItemHelper.d on GitHub Functions \ud800\udf3e ITM_GetPtr \ud800\udf3e int ITM_GetPtr ( int instance ) instance - C_Item instance to get the pointer of return - oCItem pointer of the C_Item instance","title":"ItemHelper"},{"location":"zengin/scripts/extenders/lego/ItemHelper/#itemhelper","text":"This package is very simple. Retrieve a oCItem pointer from a C_Item instance valid for the current world and session. Warning Make sure every world has waypoint with name TOT (\"dead\" in German). Ikarus & LeGo need this waypoint to spawn helper NPCs. This is especially important in Gothic 1 since G1 vanilla worlds do not have the TOT waypoint.","title":"ItemHelper"},{"location":"zengin/scripts/extenders/lego/ItemHelper/#dependencies","text":"No dependencies","title":"Dependencies"},{"location":"zengin/scripts/extenders/lego/ItemHelper/#initialization","text":"No initialization","title":"Initialization"},{"location":"zengin/scripts/extenders/lego/ItemHelper/#implementation","text":"ItemHelper.d on GitHub","title":"Implementation"},{"location":"zengin/scripts/extenders/lego/ItemHelper/#functions","text":"","title":"Functions"},{"location":"zengin/scripts/extenders/lego/ItemHelper/#itm_getptr","text":"int ITM_GetPtr ( int instance ) instance - C_Item instance to get the pointer of return - oCItem pointer of the C_Item instance","title":"ITM_GetPtr"},{"location":"zengin/scripts/extenders/lego/Misc/","text":"Misc \ud800\udf3e The Misc package introduces various helper functions, that did not fit into any other package. Dependencies \ud800\udf3e No dependencies Initialization \ud800\udf3e No initialization Implementation \ud800\udf3e Misc.d on GitHub Functions \ud800\udf3e atan2f \ud800\udf3e Calculates the arcus tangent of an angle between the origin and (x, y) point float atan2f ( int x , int y ) x - x-coordinate y - y-coordinate return - arcus tangent in radians as Ikarus float sin \ud800\udf3e Calculates the sine of an angle given in radians. float sin ( float angle ) angle - the angle in radians as a Ikarus float return - sine of the angle cos \ud800\udf3e Calculates the cosine of an angle given in radians. float cos ( float angle ) angle - the angle in radians as a Ikarus float return - cosine of the angle tan \ud800\udf3e Calculates the tangent of an angle given in radians. float tan ( float angle ) angle - the angle in radians as a Ikarus float return - tangent of the angle asin \ud800\udf3e Calculates the arcus sine float asin ( float sine ) sine - the sine of an angle return - arcus sine of the angle acos \ud800\udf3e Calculates the arcus cosine float acos ( float cosine ) sine - the cosine of an angle return - arcus cosine of the angle distance2D \ud800\udf3e Calculates the distance between two points on a two-dimensional plane int distance2D ( int x1 , int x2 , int y1 , int y2 ) x1 - X-coordinate of the first point x2 - X-coordinate of the second point y1 - Y-coordinate of the first point y2 - Y-coordinate of the second point return - the distance between the two points distance2Df \ud800\udf3e Calculates the distance between two points on a two-dimensional plane as Ikarus floats float distance2Df ( float x1 , float x2 , float y1 , float y2 ) x1 - X-coordinate of the first point x2 - X-coordinate of the second point y1 - Y-coordinate of the first point y2 - Y-coordinate of the second point return - the distance between the two points as Ikarus float","title":"Misc"},{"location":"zengin/scripts/extenders/lego/Misc/#misc","text":"The Misc package introduces various helper functions, that did not fit into any other package.","title":"Misc"},{"location":"zengin/scripts/extenders/lego/Misc/#dependencies","text":"No dependencies","title":"Dependencies"},{"location":"zengin/scripts/extenders/lego/Misc/#initialization","text":"No initialization","title":"Initialization"},{"location":"zengin/scripts/extenders/lego/Misc/#implementation","text":"Misc.d on GitHub","title":"Implementation"},{"location":"zengin/scripts/extenders/lego/Misc/#functions","text":"","title":"Functions"},{"location":"zengin/scripts/extenders/lego/Misc/#atan2f","text":"Calculates the arcus tangent of an angle between the origin and (x, y) point float atan2f ( int x , int y ) x - x-coordinate y - y-coordinate return - arcus tangent in radians as Ikarus float","title":"atan2f"},{"location":"zengin/scripts/extenders/lego/Misc/#sin","text":"Calculates the sine of an angle given in radians. float sin ( float angle ) angle - the angle in radians as a Ikarus float return - sine of the angle","title":"sin"},{"location":"zengin/scripts/extenders/lego/Misc/#cos","text":"Calculates the cosine of an angle given in radians. float cos ( float angle ) angle - the angle in radians as a Ikarus float return - cosine of the angle","title":"cos"},{"location":"zengin/scripts/extenders/lego/Misc/#tan","text":"Calculates the tangent of an angle given in radians. float tan ( float angle ) angle - the angle in radians as a Ikarus float return - tangent of the angle","title":"tan"},{"location":"zengin/scripts/extenders/lego/Misc/#asin","text":"Calculates the arcus sine float asin ( float sine ) sine - the sine of an angle return - arcus sine of the angle","title":"asin"},{"location":"zengin/scripts/extenders/lego/Misc/#acos","text":"Calculates the arcus cosine float acos ( float cosine ) sine - the cosine of an angle return - arcus cosine of the angle","title":"acos"},{"location":"zengin/scripts/extenders/lego/Misc/#distance2d","text":"Calculates the distance between two points on a two-dimensional plane int distance2D ( int x1 , int x2 , int y1 , int y2 ) x1 - X-coordinate of the first point x2 - X-coordinate of the second point y1 - Y-coordinate of the first point y2 - Y-coordinate of the second point return - the distance between the two points","title":"distance2D"},{"location":"zengin/scripts/extenders/lego/Misc/#distance2df","text":"Calculates the distance between two points on a two-dimensional plane as Ikarus floats float distance2Df ( float x1 , float x2 , float y1 , float y2 ) x1 - X-coordinate of the first point x2 - X-coordinate of the second point y1 - Y-coordinate of the first point y2 - Y-coordinate of the second point return - the distance between the two points as Ikarus float","title":"distance2Df"},{"location":"zengin/scripts/extenders/lego/Talents/","text":"Talents \ud800\udf3e The Talents package does two things save any number of values for a specific NPC (effectively AIVar array extension), identify NPC by unique ID. Talents package uses one free AIVar variables, the default is AIVar with the index 89, but can be customized in Userconst.d the AIV_TALENT constant . Dependencies \ud800\udf3e PermMem Initialization \ud800\udf3e Initialize with LeGo_PermMem flag. LeGo_Init ( LeGo_PermMem ) Implementation \ud800\udf3e Talents.d on GitHub Functions \ud800\udf3e NPC_GetID \ud800\udf3e Returns unique ID specific for provided NPC. int NPC_GetID ( c_npc slf ) slf NPC return NPCs unique ID NPC_FindByID \ud800\udf3e Finds the NPC pointer of an NPC with the given ID. int NPC_FindByID ( int ID ) ID - NPC ID return - NPC pointer NPC_FindByID \ud800\udf3e Finds the NPC pointer of an NPC with the given ID. int NPC_FindByID ( int ID ) ID NPC ID return NPC pointer TAL_CreateTalent \ud800\udf3e Creates a talent, into which you can later save a value for every NPC (just like AI_Var). int TAL_CreateTalent () return - Value that can be later used as a talent index TAL_SetValue \ud800\udf3e Sets a new value to the specified talent. void TAL_SetValue ( c_npc npc , int talent , int value ) npc - Set the talent value for this NPC talent - Talent ID value - Value to be set TAL_GetValue \ud800\udf3e Returns the value of a save talent for specified NPC. int TAL_GetValue ( c_npc npc , int talent ) npc - Get the talent value from this NPC talent - Talent ID","title":"Talents"},{"location":"zengin/scripts/extenders/lego/Talents/#talents","text":"The Talents package does two things save any number of values for a specific NPC (effectively AIVar array extension), identify NPC by unique ID. Talents package uses one free AIVar variables, the default is AIVar with the index 89, but can be customized in Userconst.d the AIV_TALENT constant .","title":"Talents"},{"location":"zengin/scripts/extenders/lego/Talents/#dependencies","text":"PermMem","title":"Dependencies"},{"location":"zengin/scripts/extenders/lego/Talents/#initialization","text":"Initialize with LeGo_PermMem flag. LeGo_Init ( LeGo_PermMem )","title":"Initialization"},{"location":"zengin/scripts/extenders/lego/Talents/#implementation","text":"Talents.d on GitHub","title":"Implementation"},{"location":"zengin/scripts/extenders/lego/Talents/#functions","text":"","title":"Functions"},{"location":"zengin/scripts/extenders/lego/Talents/#npc_getid","text":"Returns unique ID specific for provided NPC. int NPC_GetID ( c_npc slf ) slf NPC return NPCs unique ID","title":"NPC_GetID"},{"location":"zengin/scripts/extenders/lego/Talents/#npc_findbyid","text":"Finds the NPC pointer of an NPC with the given ID. int NPC_FindByID ( int ID ) ID - NPC ID return - NPC pointer","title":"NPC_FindByID"},{"location":"zengin/scripts/extenders/lego/Talents/#npc_findbyid_1","text":"Finds the NPC pointer of an NPC with the given ID. int NPC_FindByID ( int ID ) ID NPC ID return NPC pointer","title":"NPC_FindByID"},{"location":"zengin/scripts/extenders/lego/Talents/#tal_createtalent","text":"Creates a talent, into which you can later save a value for every NPC (just like AI_Var). int TAL_CreateTalent () return - Value that can be later used as a talent index","title":"TAL_CreateTalent"},{"location":"zengin/scripts/extenders/lego/Talents/#tal_setvalue","text":"Sets a new value to the specified talent. void TAL_SetValue ( c_npc npc , int talent , int value ) npc - Set the talent value for this NPC talent - Talent ID value - Value to be set","title":"TAL_SetValue"},{"location":"zengin/scripts/extenders/lego/Talents/#tal_getvalue","text":"Returns the value of a save talent for specified NPC. int TAL_GetValue ( c_npc npc , int talent ) npc - Get the talent value from this NPC talent - Talent ID","title":"TAL_GetValue"},{"location":"zengin/scripts/extenders/lego/Trialoge/","text":"Trialoge \ud800\udf3e This package allows you to create conversations with any number of NPC's and control the camera during the dialog. Dependencies \ud800\udf3e AI_Function Initialization \ud800\udf3e Initialize with LeGo_Trialoge flag. LeGo_Init ( LeGo_Trialoge ) Implementation \ud800\udf3e Trialoge.d on GitHub Functions \ud800\udf3e EquipWeapon \ud800\udf3e Sektenspinner's function. (Taken from the forum.) void EquipWeapon ( c_npc slf , int ItemInstance ) slf - NPC to have a weapon equipped ItemInstance - weapon instance to be equipped Npc_GetArmor \ud800\udf3e Returns NPC's equipped armor. int Npc_GetArmor ( c_npc slf ) slf - NPC to get the armour from return - armor instance Npc_GetMeleeWeapon \ud800\udf3e Returns NPC's equipped melee weapon. int Npc_GetMeleeWeapon ( c_npc slf ) slf - NPC to get the weapon from DiaCAM_Update \ud800\udf3e Sektenspinner's function. Updates the dialogue camera. (Used internally.) void DiaCAM_Update () DiaCAM_Disable \ud800\udf3e Completely disable the dialogue cameras. void DiaCAM_Disable () DiaCAM_Enable \ud800\udf3e Resets the dialogue cameras to the default settings. void DiaCAM_Enable () TRIA_Wait \ud800\udf3e Makes self and other wait for each other, e.g. for AI_GotoW P actions for synchronization. void TRIA_Wait () TRIA_Invite \ud800\udf3e Invites an NPC into a conversation. Must be called before TRIA_Start . void TRIA_Invite ( c_npc slf ) slf - The invited NPC TRIA_Start \ud800\udf3e Starts trialogues. Before that, all NPC's should be invited by TRI_Invite . void TRIA_Start () TRIA_Barrier \ud800\udf3e Similar to TRIA_Wait but applies to all participating NPCs. void TRIA_Barrier () TRIA_Next \ud800\udf3e Sets the called npc to self . void TRIA_Next ( c_npc n0 ) n0 - can be addressed with self TRIA_Cam \ud800\udf3e Starts a tracking shot. void TRIA_Cam ( string evt ) evt - the name of the tracking shot in Spacer. If \"\" is passed, the running trace shot will be aborted TRIA_Finish \ud800\udf3e Ends an ongoing trialogue. Must always be called at the end, otherwise no further trialogues can be started. void TRIA_Finish () Examples \ud800\udf3e A Simple Trialogue \ud800\udf3e The following conversation is resolved via the trialogues: Arto: Sorry hero, but you can't pass here Hero: Why not? Horka: The city has been closed. Hero: I have some gold with me, can we trade? Squelto: No. We are not open to bribery. Hero: Sure? Arto: I have to ask you to leave now Hero: Well... instance TRIA_Test ( C_INFO ) { npc = PAL_100_Friend ; nr = 10 ; condition = TRIA_Test_condition ; information = TRIA_Test_info ; important = FALSE ; permanent = 1 ; description = \"TRIALOGTEST\" ; }; func int TRIA_Test_condition () { return TRUE ; }; func void TRIA_Test_info () { var c_npc Arto ; Arto = Hlp_GetNpc ( PAL_100_Friend ); // He is the owner of dialogue var c_npc Horka ; Horka = Hlp_GetNpc ( PAL_101_Horka ); var c_npc Squelto ; Squelto = Hlp_GetNpc ( PAL_102_Squelto ); TRIA_Invite ( Horka ); // Invite Horka into this dialogue TRIA_Invite ( Squelto ); // Invite Squelto into this dialog TRIA_Start (); // Start the conversation // The hero and Arto do not have to/may not be invited. They are in dialogue anyway. // Hero now talks to Arto (self = Arto, other = Hero) TRIA_Next ( Arto ); DIAG_Reset (); AI_Output ( self , other , \"TRIA_TEST_00\" ); //Sorry hero, but you can't pass here // Hero now talks to Horka (self = Horka, other = Hero) TRIA_Next ( Horka ); AI_Output ( other , self , \"TRIA_TEST_01\" ); //Why not? AI_GotoNpc ( self , other ); AI_TurnToNpc ( other , self ); AI_Output ( self , other , \"TRIA_TEST_02\" ); //The city has been closed. // Held looks around conspiratorially during the next sentence DIAG ( \"Nervous\" , 1 , 2 ); AI_Output ( other , self , \"TRIA_TEST_03\" ); //I have some gold with me, can we trade? // Hero should now move normally again DIAG_Reset (); // Start tracking shot TRIA_Cam ( \"CAMERASTART\" ); // Hero now talks to Squelto (self = Squelto, other = Hero) TRIA_Next ( Squelto ); AI_TurnToNpc ( other , self ); DIAG ( \"No\" , 0 , 1 ); AI_Output ( self , other , \"TRIA_TEST_04\" ); //No. We are not open to bribery. // Hero talks to Arto again (self = Arto, other = Hero) TRIA_Next ( Arto ); // Hero should now articulate questioningly DIAG ( \"NotSure\" , 0 , 1 ); AI_Output ( other , self , \"TRIA_TEST_05\" ); //Sure? AI_TurnToNpc ( other , self ); // tracking shot end TRIA_Cam ( \"\" ); // Arto should react angrily DIAG ( \"Angry\" , 0 , 4 ); AI_Output ( self , other , \"TRIA_TEST_06\" ); //I have to ask you to leave now // Hero should now move normally again DIAG_Reset (); AI_Output ( other , self , \"TRIA_TEST_07\" ); //Well... TRIA_Finish (); // End }; Note In addition, here are still dialog gestures used (the page will be added later).","title":"Trialoge"},{"location":"zengin/scripts/extenders/lego/Trialoge/#trialoge","text":"This package allows you to create conversations with any number of NPC's and control the camera during the dialog.","title":"Trialoge"},{"location":"zengin/scripts/extenders/lego/Trialoge/#dependencies","text":"AI_Function","title":"Dependencies"},{"location":"zengin/scripts/extenders/lego/Trialoge/#initialization","text":"Initialize with LeGo_Trialoge flag. LeGo_Init ( LeGo_Trialoge )","title":"Initialization"},{"location":"zengin/scripts/extenders/lego/Trialoge/#implementation","text":"Trialoge.d on GitHub","title":"Implementation"},{"location":"zengin/scripts/extenders/lego/Trialoge/#functions","text":"","title":"Functions"},{"location":"zengin/scripts/extenders/lego/Trialoge/#equipweapon","text":"Sektenspinner's function. (Taken from the forum.) void EquipWeapon ( c_npc slf , int ItemInstance ) slf - NPC to have a weapon equipped ItemInstance - weapon instance to be equipped","title":"EquipWeapon"},{"location":"zengin/scripts/extenders/lego/Trialoge/#npc_getarmor","text":"Returns NPC's equipped armor. int Npc_GetArmor ( c_npc slf ) slf - NPC to get the armour from return - armor instance","title":"Npc_GetArmor"},{"location":"zengin/scripts/extenders/lego/Trialoge/#npc_getmeleeweapon","text":"Returns NPC's equipped melee weapon. int Npc_GetMeleeWeapon ( c_npc slf ) slf - NPC to get the weapon from","title":"Npc_GetMeleeWeapon"},{"location":"zengin/scripts/extenders/lego/Trialoge/#diacam_update","text":"Sektenspinner's function. Updates the dialogue camera. (Used internally.) void DiaCAM_Update ()","title":"DiaCAM_Update"},{"location":"zengin/scripts/extenders/lego/Trialoge/#diacam_disable","text":"Completely disable the dialogue cameras. void DiaCAM_Disable ()","title":"DiaCAM_Disable"},{"location":"zengin/scripts/extenders/lego/Trialoge/#diacam_enable","text":"Resets the dialogue cameras to the default settings. void DiaCAM_Enable ()","title":"DiaCAM_Enable"},{"location":"zengin/scripts/extenders/lego/Trialoge/#tria_wait","text":"Makes self and other wait for each other, e.g. for AI_GotoW P actions for synchronization. void TRIA_Wait ()","title":"TRIA_Wait"},{"location":"zengin/scripts/extenders/lego/Trialoge/#tria_invite","text":"Invites an NPC into a conversation. Must be called before TRIA_Start . void TRIA_Invite ( c_npc slf ) slf - The invited NPC","title":"TRIA_Invite"},{"location":"zengin/scripts/extenders/lego/Trialoge/#tria_start","text":"Starts trialogues. Before that, all NPC's should be invited by TRI_Invite . void TRIA_Start ()","title":"TRIA_Start"},{"location":"zengin/scripts/extenders/lego/Trialoge/#tria_barrier","text":"Similar to TRIA_Wait but applies to all participating NPCs. void TRIA_Barrier ()","title":"TRIA_Barrier"},{"location":"zengin/scripts/extenders/lego/Trialoge/#tria_next","text":"Sets the called npc to self . void TRIA_Next ( c_npc n0 ) n0 - can be addressed with self","title":"TRIA_Next"},{"location":"zengin/scripts/extenders/lego/Trialoge/#tria_cam","text":"Starts a tracking shot. void TRIA_Cam ( string evt ) evt - the name of the tracking shot in Spacer. If \"\" is passed, the running trace shot will be aborted","title":"TRIA_Cam"},{"location":"zengin/scripts/extenders/lego/Trialoge/#tria_finish","text":"Ends an ongoing trialogue. Must always be called at the end, otherwise no further trialogues can be started. void TRIA_Finish ()","title":"TRIA_Finish"},{"location":"zengin/scripts/extenders/lego/Trialoge/#examples","text":"","title":"Examples"},{"location":"zengin/scripts/extenders/lego/Trialoge/#a-simple-trialogue","text":"The following conversation is resolved via the trialogues: Arto: Sorry hero, but you can't pass here Hero: Why not? Horka: The city has been closed. Hero: I have some gold with me, can we trade? Squelto: No. We are not open to bribery. Hero: Sure? Arto: I have to ask you to leave now Hero: Well... instance TRIA_Test ( C_INFO ) { npc = PAL_100_Friend ; nr = 10 ; condition = TRIA_Test_condition ; information = TRIA_Test_info ; important = FALSE ; permanent = 1 ; description = \"TRIALOGTEST\" ; }; func int TRIA_Test_condition () { return TRUE ; }; func void TRIA_Test_info () { var c_npc Arto ; Arto = Hlp_GetNpc ( PAL_100_Friend ); // He is the owner of dialogue var c_npc Horka ; Horka = Hlp_GetNpc ( PAL_101_Horka ); var c_npc Squelto ; Squelto = Hlp_GetNpc ( PAL_102_Squelto ); TRIA_Invite ( Horka ); // Invite Horka into this dialogue TRIA_Invite ( Squelto ); // Invite Squelto into this dialog TRIA_Start (); // Start the conversation // The hero and Arto do not have to/may not be invited. They are in dialogue anyway. // Hero now talks to Arto (self = Arto, other = Hero) TRIA_Next ( Arto ); DIAG_Reset (); AI_Output ( self , other , \"TRIA_TEST_00\" ); //Sorry hero, but you can't pass here // Hero now talks to Horka (self = Horka, other = Hero) TRIA_Next ( Horka ); AI_Output ( other , self , \"TRIA_TEST_01\" ); //Why not? AI_GotoNpc ( self , other ); AI_TurnToNpc ( other , self ); AI_Output ( self , other , \"TRIA_TEST_02\" ); //The city has been closed. // Held looks around conspiratorially during the next sentence DIAG ( \"Nervous\" , 1 , 2 ); AI_Output ( other , self , \"TRIA_TEST_03\" ); //I have some gold with me, can we trade? // Hero should now move normally again DIAG_Reset (); // Start tracking shot TRIA_Cam ( \"CAMERASTART\" ); // Hero now talks to Squelto (self = Squelto, other = Hero) TRIA_Next ( Squelto ); AI_TurnToNpc ( other , self ); DIAG ( \"No\" , 0 , 1 ); AI_Output ( self , other , \"TRIA_TEST_04\" ); //No. We are not open to bribery. // Hero talks to Arto again (self = Arto, other = Hero) TRIA_Next ( Arto ); // Hero should now articulate questioningly DIAG ( \"NotSure\" , 0 , 1 ); AI_Output ( other , self , \"TRIA_TEST_05\" ); //Sure? AI_TurnToNpc ( other , self ); // tracking shot end TRIA_Cam ( \"\" ); // Arto should react angrily DIAG ( \"Angry\" , 0 , 4 ); AI_Output ( self , other , \"TRIA_TEST_06\" ); //I have to ask you to leave now // Hero should now move normally again DIAG_Reset (); AI_Output ( other , self , \"TRIA_TEST_07\" ); //Well... TRIA_Finish (); // End }; Note In addition, here are still dialog gestures used (the page will be added later).","title":"A Simple Trialogue"},{"location":"zengin/scripts/extenders/zParserExtender/","text":"zParserExtender \ud800\udf3e zParserExtender extends ZenGins parser and adds many useful features. It significantly extends the functionlaity of scripts (with added functionality and new external functions), enhances script compilation (allowing to compile OU files directly with the game) and allows for runtime script injection. Since the Union version 1.0m zParserExtender is fully integrated in Union itself. Note This is mostly a translation of the original release post Contacts Author Gratt GitHub zParserExtender Forum zParserExtender Extensions and Externals \ud800\udf3e zParserExtender adds quite a lot of new features and even some new syntax and keywords. Extensions and Externals Native WHILE loop Namespaces Event functions Test-else binding Extern binding External functions Classes C_Trigger class Engine classes Injection Daedalus injection META block Hooks Other features External functions zParserExtender - External functions String functions Menu function Log function Event function CAST functions HLP functions WLD functions MDL functions NPC functions MOB functions AI functions PAR functions VOB functions","title":"zParserExtender"},{"location":"zengin/scripts/extenders/zParserExtender/#zparserextender","text":"zParserExtender extends ZenGins parser and adds many useful features. It significantly extends the functionlaity of scripts (with added functionality and new external functions), enhances script compilation (allowing to compile OU files directly with the game) and allows for runtime script injection. Since the Union version 1.0m zParserExtender is fully integrated in Union itself. Note This is mostly a translation of the original release post Contacts Author Gratt GitHub zParserExtender Forum zParserExtender","title":"zParserExtender"},{"location":"zengin/scripts/extenders/zParserExtender/#extensions-and-externals","text":"zParserExtender adds quite a lot of new features and even some new syntax and keywords. Extensions and Externals Native WHILE loop Namespaces Event functions Test-else binding Extern binding External functions Classes C_Trigger class Engine classes Injection Daedalus injection META block Hooks Other features External functions zParserExtender - External functions String functions Menu function Log function Event function CAST functions HLP functions WLD functions MDL functions NPC functions MOB functions AI functions PAR functions VOB functions","title":"Extensions and Externals"},{"location":"zengin/scripts/extenders/zParserExtender/META/","text":"META block \ud800\udf3e The META block is optional, but if it is specified, it has to be the very first thing in the file, without any indent or a comment above it. Syntax: META { Parser // specifies into which compiled file the scripts are going to be injected /* Code Name DAT file --- ------ ------- Game parser Gothic.dat SFX parserSoundFX SFX.dat PFX parserParticleFX ParticleFX.dat VFX parserVisualFX VisualFX.dat Camera parserCamera Camera.dat Menu parserMenu Menu.dat Music parserMusic Music.dat */ MergeMode // 0 - if confilct occurs = comilation error, 1 - if conflict occurs = hook Engine // comma separated list of engines for which the scripts will be injected /* Code Engine Human readable name --- ----- ----------------------- G1 Gothic I Gothic I Classic G1A Gothic Sequel Gothic I Addon <3 G2 Gothic II Gothic II Classic G2A Gothic II NoTR Gothic II Addon */ NativeWhile // use native while Namespace // namespace of this script file Using // comma separated list of namespaces, that are considered local for this script file Mod // specify for which mod should this code be injected After // comma separated list of scripts, after which this script should be parsed };","title":"META block"},{"location":"zengin/scripts/extenders/zParserExtender/META/#meta-block","text":"The META block is optional, but if it is specified, it has to be the very first thing in the file, without any indent or a comment above it. Syntax: META { Parser // specifies into which compiled file the scripts are going to be injected /* Code Name DAT file --- ------ ------- Game parser Gothic.dat SFX parserSoundFX SFX.dat PFX parserParticleFX ParticleFX.dat VFX parserVisualFX VisualFX.dat Camera parserCamera Camera.dat Menu parserMenu Menu.dat Music parserMusic Music.dat */ MergeMode // 0 - if confilct occurs = comilation error, 1 - if conflict occurs = hook Engine // comma separated list of engines for which the scripts will be injected /* Code Engine Human readable name --- ----- ----------------------- G1 Gothic I Gothic I Classic G1A Gothic Sequel Gothic I Addon <3 G2 Gothic II Gothic II Classic G2A Gothic II NoTR Gothic II Addon */ NativeWhile // use native while Namespace // namespace of this script file Using // comma separated list of namespaces, that are considered local for this script file Mod // specify for which mod should this code be injected After // comma separated list of scripts, after which this script should be parsed };","title":"META block"},{"location":"zengin/scripts/extenders/zParserExtender/c_trigger/","text":"Trigger functions and the C_Trigger class \ud800\udf3e zParserExtender also implements cyclical functions (called triggers - not to e confused with triggers in ZEN files) similar to a part of the functionality implemented in LeGo AI_Functions . These functions are called independently after a specified period of time. These triggers can also store a user information, up to 16 int variables can be stored in each trigger, as well as self , other and victim instances. Class definition \ud800\udf3e To define a trigger, the C_Trigger class is used: /// Union zPraserExtender Trigger class class C_Trigger { var int Delay ; // defines the frequency (in miliseconds) at which the function will be called. var int Enabled ; // determines if the trigger is active. If the value is equal to zero, the trigger is destroyed. var int AIVariables [ 16 ]; // user data, which can be set independently when creating trigger (yes, you can write there absolutely everything you want). // Hidden variable members /* - Func - The function that the trigger will call. - Self - The NPC that will be placed in `self` when the function is called. - Other - An NPC that will be placed in `other` when the function is called. - Victim - The NPC that will be placed in `victim` when the function is called. */ }; Creating instances \ud800\udf3e There are two external functions // function returns a trigger with no NPC (self, other or victim) bound to it func C_Trigger AI_StartTriggerScript ( var string funcName , var int delay ) // function is extended, if certain participants need to be assigned to it func C_Trigger AI_StartTriggerScriptEx ( var string funcName , var int delay , var C_Npc slf , var C_Npc oth , var C_Npc vct ) Both of these functions return an instance of C_Trigger . You can, of course, configure the instance after its creation (for example to fill in the AIVariables with relevant data). The trigger function has the required signature if 'func int f()'. It must return a value indicating the state of the loop - if the function returns LOOP_END the trigger will be stopped and the instance deleted, if LOOP_CONTINUE is returned, the function will be called again after Delay ms have passed. Poison example \ud800\udf3e // Implement a trigger to simulate the effect of poison debuff: // Let's create a trigger on function `c_loop` with a call interval of 1 second. // When the function is called, the instance hero will be placed in self (although it can be any other NPC if desired). // The rest of the instances are left null (not used). var C_Trigger trigger ; trigger = AI_StartTriggerScriptEx ( \"c_loop\" , 1000 , hero , null , null ); trigger . AIVariables [ 0 ] = 15 ; // how many times the function should be called trigger . AIVariables [ 1 ] = 5 ; // how much damage to deal each iteration The trigger function func int c_loop () { // Create a loop end check, if the number of // available iterations has reached 0. If it did // we stop the trigger by returning the LOOP_END value. if ( SelfTrigger . AIVariables [ 0 ] <= 0 ) { return Loop_end ; }; SelfTrigger . Delay -= 20 ; // Accelerate loop each call by 20 ms SelfTrigger . AIVariables [ 0 ] -= 1 ; // Reduce number of remaining repeats self . Attribute [ ATR_HITPOINTS ] -= SelfTrigger . AIVariables [ 1 ]; // Take health from self return LOOP_CONTINUE ; }; Trigger scope \ud800\udf3e Triggers can be divided into two types: Global trigger ( AI_StartTriggerScript ) trigger creted using this function works in all worlds. A trigger is considered global by default if neither self nor other nor victim has been provided for it. Local trigger ( AI_StartTriggerScriptEx) trigger created with this function only works in the world in which it was created. A trigger is considered local if it has been presented with at least one NPC in self , other or victim (not null ). If you want to create a trigger, but without linking to any NPC, it is recommended to simply pass hero as self to the trigger. Saving \ud800\udf3e The plugin creates a new save archive to save the information of the triggers, that does not conflict with any of the built-in save files. Searching \ud800\udf3e To search for a specifin trigger, for example by NPC, the trigger external functions can be used. // This way you can disable all triggers running on the `hero` instance var C_Trigger trigget = FirstTrigger ; var C_Trigger trigget_saved ; while ( ! Hlp_IsNULL ( trigget )) { trigget_saved = trigger ; trigger = AI_GetNextTriggerBySelf ( hero ); trigget_saved . Enabled = false ; };","title":"C_Trigger class"},{"location":"zengin/scripts/extenders/zParserExtender/c_trigger/#trigger-functions-and-the-c_trigger-class","text":"zParserExtender also implements cyclical functions (called triggers - not to e confused with triggers in ZEN files) similar to a part of the functionality implemented in LeGo AI_Functions . These functions are called independently after a specified period of time. These triggers can also store a user information, up to 16 int variables can be stored in each trigger, as well as self , other and victim instances.","title":"Trigger functions and the C_Trigger class"},{"location":"zengin/scripts/extenders/zParserExtender/c_trigger/#class-definition","text":"To define a trigger, the C_Trigger class is used: /// Union zPraserExtender Trigger class class C_Trigger { var int Delay ; // defines the frequency (in miliseconds) at which the function will be called. var int Enabled ; // determines if the trigger is active. If the value is equal to zero, the trigger is destroyed. var int AIVariables [ 16 ]; // user data, which can be set independently when creating trigger (yes, you can write there absolutely everything you want). // Hidden variable members /* - Func - The function that the trigger will call. - Self - The NPC that will be placed in `self` when the function is called. - Other - An NPC that will be placed in `other` when the function is called. - Victim - The NPC that will be placed in `victim` when the function is called. */ };","title":"Class definition"},{"location":"zengin/scripts/extenders/zParserExtender/c_trigger/#creating-instances","text":"There are two external functions // function returns a trigger with no NPC (self, other or victim) bound to it func C_Trigger AI_StartTriggerScript ( var string funcName , var int delay ) // function is extended, if certain participants need to be assigned to it func C_Trigger AI_StartTriggerScriptEx ( var string funcName , var int delay , var C_Npc slf , var C_Npc oth , var C_Npc vct ) Both of these functions return an instance of C_Trigger . You can, of course, configure the instance after its creation (for example to fill in the AIVariables with relevant data). The trigger function has the required signature if 'func int f()'. It must return a value indicating the state of the loop - if the function returns LOOP_END the trigger will be stopped and the instance deleted, if LOOP_CONTINUE is returned, the function will be called again after Delay ms have passed.","title":"Creating instances"},{"location":"zengin/scripts/extenders/zParserExtender/c_trigger/#poison-example","text":"// Implement a trigger to simulate the effect of poison debuff: // Let's create a trigger on function `c_loop` with a call interval of 1 second. // When the function is called, the instance hero will be placed in self (although it can be any other NPC if desired). // The rest of the instances are left null (not used). var C_Trigger trigger ; trigger = AI_StartTriggerScriptEx ( \"c_loop\" , 1000 , hero , null , null ); trigger . AIVariables [ 0 ] = 15 ; // how many times the function should be called trigger . AIVariables [ 1 ] = 5 ; // how much damage to deal each iteration The trigger function func int c_loop () { // Create a loop end check, if the number of // available iterations has reached 0. If it did // we stop the trigger by returning the LOOP_END value. if ( SelfTrigger . AIVariables [ 0 ] <= 0 ) { return Loop_end ; }; SelfTrigger . Delay -= 20 ; // Accelerate loop each call by 20 ms SelfTrigger . AIVariables [ 0 ] -= 1 ; // Reduce number of remaining repeats self . Attribute [ ATR_HITPOINTS ] -= SelfTrigger . AIVariables [ 1 ]; // Take health from self return LOOP_CONTINUE ; };","title":"Poison example"},{"location":"zengin/scripts/extenders/zParserExtender/c_trigger/#trigger-scope","text":"Triggers can be divided into two types: Global trigger ( AI_StartTriggerScript ) trigger creted using this function works in all worlds. A trigger is considered global by default if neither self nor other nor victim has been provided for it. Local trigger ( AI_StartTriggerScriptEx) trigger created with this function only works in the world in which it was created. A trigger is considered local if it has been presented with at least one NPC in self , other or victim (not null ). If you want to create a trigger, but without linking to any NPC, it is recommended to simply pass hero as self to the trigger.","title":"Trigger scope"},{"location":"zengin/scripts/extenders/zParserExtender/c_trigger/#saving","text":"The plugin creates a new save archive to save the information of the triggers, that does not conflict with any of the built-in save files.","title":"Saving"},{"location":"zengin/scripts/extenders/zParserExtender/c_trigger/#searching","text":"To search for a specifin trigger, for example by NPC, the trigger external functions can be used. // This way you can disable all triggers running on the `hero` instance var C_Trigger trigget = FirstTrigger ; var C_Trigger trigget_saved ; while ( ! Hlp_IsNULL ( trigget )) { trigget_saved = trigger ; trigger = AI_GetNextTriggerBySelf ( hero ); trigget_saved . Enabled = false ; };","title":"Searching"},{"location":"zengin/scripts/extenders/zParserExtender/dialogues/","text":"Dialogue constants \ud800\udf3e To simplify dialogues, you can define up to 2 auxiliary variables (or constants) into which values corresponding to the current C_Info instance will be dynamically written. DIA_CurrentInstance \ud800\udf3e var int DIA_CurrentInstance Contains the ID of the current C_Info instance. Can greatly simplify code or make it more reusable. Should be defined in scripts. Example usage Info_ClearChoices ( DIA_CurrentInstance ) Info_AddChoice ( DIA_CurrentInstance , /*text*/ , /*func*/ ) Npc_KnowsInfo ( hero , DIA_CurrentInstance ) // In this case DIA_CurrentInstance contains the last C_Info instance?? Create a wrapper function based on this variable func int C_HeroKnowsCurrentInfo () { return Npc_KnowsInfo ( hero , DIA_CurrentInstance ); }; DIA_CurrentName \ud800\udf3e var string DIA_CurrentName Contains the name of the current instance of C_Info . Can be useful for debugging purposes. Should be defined in scripts. Usage scenarios: Hlp_PrintConsole ( DIA_CurrentName ); Hlp_PrintConsole ( Str_Format ( \"%s[%s]\" , DIA_CurrentName , self . name ); Hlp_StrCmp ( DIA_CurrentName , \"DIA_DiegoOw_Teach\" );","title":"Dialogue constants"},{"location":"zengin/scripts/extenders/zParserExtender/dialogues/#dialogue-constants","text":"To simplify dialogues, you can define up to 2 auxiliary variables (or constants) into which values corresponding to the current C_Info instance will be dynamically written.","title":"Dialogue constants"},{"location":"zengin/scripts/extenders/zParserExtender/dialogues/#dia_currentinstance","text":"var int DIA_CurrentInstance Contains the ID of the current C_Info instance. Can greatly simplify code or make it more reusable. Should be defined in scripts. Example usage Info_ClearChoices ( DIA_CurrentInstance ) Info_AddChoice ( DIA_CurrentInstance , /*text*/ , /*func*/ ) Npc_KnowsInfo ( hero , DIA_CurrentInstance ) // In this case DIA_CurrentInstance contains the last C_Info instance?? Create a wrapper function based on this variable func int C_HeroKnowsCurrentInfo () { return Npc_KnowsInfo ( hero , DIA_CurrentInstance ); };","title":"DIA_CurrentInstance"},{"location":"zengin/scripts/extenders/zParserExtender/dialogues/#dia_currentname","text":"var string DIA_CurrentName Contains the name of the current instance of C_Info . Can be useful for debugging purposes. Should be defined in scripts. Usage scenarios: Hlp_PrintConsole ( DIA_CurrentName ); Hlp_PrintConsole ( Str_Format ( \"%s[%s]\" , DIA_CurrentName , self . name ); Hlp_StrCmp ( DIA_CurrentName , \"DIA_DiegoOw_Teach\" );","title":"DIA_CurrentName"},{"location":"zengin/scripts/extenders/zParserExtender/events/","text":"Event functions \ud800\udf3e Event functions are functions sharing the same name, that can be defined multiple times, but only once per file. Such functions are useful for implementing callback type functions. Every time an event is called, all instances of the same name will be called. The event is func with a return type event . Events are defined globally, meaning, they ignore namespace they are in. To call an event from a script, use the external function Hlp_DoEvent(var string funcName) . func void GiveXP () { Hlp_DoEvent ( \"OnGiveXP\" ); }; func event OnGiveXP () { // TODO // This function can be defined in many files to do different things // more appropriate for that file's context and all of them will be // called, when function GiveXP (above) is called. }; Plugin implements two of these event functions func event GameInit() - called when entering the main menu on game start func event GameLoop() - called every frame when a world is loaded Define these in any file in your scripts, and they will be automatically called","title":"Event functions"},{"location":"zengin/scripts/extenders/zParserExtender/events/#event-functions","text":"Event functions are functions sharing the same name, that can be defined multiple times, but only once per file. Such functions are useful for implementing callback type functions. Every time an event is called, all instances of the same name will be called. The event is func with a return type event . Events are defined globally, meaning, they ignore namespace they are in. To call an event from a script, use the external function Hlp_DoEvent(var string funcName) . func void GiveXP () { Hlp_DoEvent ( \"OnGiveXP\" ); }; func event OnGiveXP () { // TODO // This function can be defined in many files to do different things // more appropriate for that file's context and all of them will be // called, when function GiveXP (above) is called. }; Plugin implements two of these event functions func event GameInit() - called when entering the main menu on game start func event GameLoop() - called every frame when a world is loaded Define these in any file in your scripts, and they will be automatically called","title":"Event functions"},{"location":"zengin/scripts/extenders/zParserExtender/extern/","text":"Extern binding \ud800\udf3e The extern binding allows you to secure your code against overriding or undefined symbol. Keyword extern before declaration means that if object of the same name exists, source object should be used. If not, a new one will be created. extern instance PC_Hero ( C_Npc ) { // TODO };","title":"Extern binding"},{"location":"zengin/scripts/extenders/zParserExtender/extern/#extern-binding","text":"The extern binding allows you to secure your code against overriding or undefined symbol. Keyword extern before declaration means that if object of the same name exists, source object should be used. If not, a new one will be created. extern instance PC_Hero ( C_Npc ) { // TODO };","title":"Extern binding"},{"location":"zengin/scripts/extenders/zParserExtender/externals/","text":"External functions \ud800\udf3e External functions are Daedalus functions (defined in the engine itself) used to interface with the enigne. zParseExtender adds quite a huge amount of new functions, that help scripters to interface with the engine in more ways, that was possible before (without script extenders such as Ikarus and LeGo). CAST data type conversion functions \ud800\udf3e External functions for data type conversion and pointer casting. func instance Cast_PointerToInstance ( var int address ) {}; func int Cast_InstanceToPointer ( var instance object ) {}; func C_NPC Cast_PointerToNpc ( var int address ) {}; func C_ITEM Cast_PointerToItem ( var int address ) {}; func int Cast_InstanceIsNpc ( var instance object ) {}; func int Cast_InstanceIsItem ( var instance object ) {}; func int Cast_InstanceIsMob ( var instance object ) {}; func int Cast_GetInstanceIndex ( var instance object ) {}; /// Returns the class identifier of a class by its name /// /// @param className name of the class /// @return class identifier func int Cast_GetClassID ( var string className ) {}; /// Returns class identifier of the zCObject vob class /// /// @param object object instance /// @return class zCObject identifier func int Cast_GetVobClassID ( var instance object ) {}; /// Checks if the classId class is the parent class of the object /// /// @param classId class identifier, from Cast_GetClassID function /// @param object object instance /// @return class zCObject identifier func int Cast_CheckVobClassID ( var int classId , var instance object ) {}; HLP help functions \ud800\udf3e Helper functions, used for safety checks or to get specific information from the engine. func int Hlp_HasFocusVob ( var C_NPC npc ) {}; func instance Hlp_GetFocusVob ( var C_NPC npc ) {}; func string Hlp_GetFocusVobName ( var C_NPC npc ) {}; func int Hlp_GetStringLength ( var string str ) {}; func int IsNAN ( var float value ) {}; func int Hlp_KeyToggled ( var int key ) {}; func int Hlp_KeyPressed ( var int key ) {}; func int Hlp_LogicalKeyToggled ( var int key ) {}; func int Hlp_GameOnPause () {}; func void Hlp_MessageBox ( var string message ) {}; func void Hlp_PrintConsole ( var string message ) {}; func int Hlp_ReadOptionInt ( var string optName , var string section , var string entry , var int default ) {}; func float Hlp_ReadOptionFloat ( var string optName , var string section , var string entry , var float default ) {}; func string Hlp_ReadOptionString ( var string optName , var string section , var string entry , var string default ) {}; func int Hlp_OptionIsExists ( var string optName , var string section , var string entry ) {}; func void Hlp_WriteOptionInt ( var string optName , var string section , var string entry , var int value ) {}; func void Hlp_WriteOptionFloat ( var string optName , var string section , var string entry , var float value ) {}; func void Hlp_WriteOptionString ( var string optName , var string section , var string entry , var string value ) {}; WLD world manipulation functions \ud800\udf3e Functions related to the world. func void Wld_ChangeLevel ( var string world , var string waypoint ) {}; func instance Wld_FindVob ( var string vobname ) {}; func void Wld_PlayEffectVob ( var string effect , var instance pvob , var int level , var int damage , var int damage_type , var int damage_speed ) {}; func void Wld_PlayEffectAt ( var string effect , var instance coord , var int level , var int damage , var int damage_type , var int damage_speed ) {}; func void Wld_ToggleRain ( var float weight , var flaot time ) {}; func void Wld_SetWeatherType ( var int type ) {}; func int Wld_GetWeatherType () {}; MDL model functions \ud800\udf3e Functions to tweak animation and other model related settings. func int Mdl_GetAnimationIndex ( var C_NPC npc , var string ani_name ) {}; func string Mdl_GetAnimationName ( var C_NPC npc , var int ani_index ) {}; func int Mdl_AnimationIsExists ( var C_NPC npc , var int ani_index ) {}; func int Mdl_AnimationIsActive ( var C_NPC npc , var int ani_index ) {}; func float Mdl_SetAllAnimationsFPS ( var C_NPC npc , var float fps ) {}; func float Mdl_ResetAllAnimationsFPS ( var C_NPC npc ) {}; func float Mdl_SetAnimationFPS ( var C_NPC npc , var int idx , var float fps ) {}; func float Mdl_ResetAnimationFPS ( var C_NPC npc , var int ani_index ) {}; func void Mdl_SetVisible ( var C_NPC npc , var int isVisible ) {}; /// Applies or moves existing overlay to the top of the list /// /// @param mdsName name of the overlay func void Mdl_ApplyOverlayMds_AtFirst ( var string mdsName ) {}; /// Sets a multipler for animation speed /// 1.0 = 100% speed (normal speed) /// /// @param npc npc to be affected /// @param multiplier speed of the animation func void Mdl_SetNpcSpeedMultiplier ( var C_Npc npc , var float multiplier ) {}; /// Resets the animation speed of an NPC /// /// @param npc npc to be affected func void Mdl_ResetNpcSpeedMultiplier ( var C_Npc npc ) {}; NPC character functions \ud800\udf3e NPC realted functions. func void Npc_SetAsHero ( var C_NPC npc ) {}; func void Npc_OpenInventory ( var C_NPC npc ) {}; func void Npc_OpenInventorySteal ( var C_NPC npc ) {}; func void Npc_OpenInventoryTrade ( var C_NPC npc ) {}; /// Returns an item in NPC's left hand slot /// /// @param npc npc to be affected func C_Item Npc_GetLeftHandItem ( var C_Npc npc ) {}; /// Returns an item in NPC's right hand slot /// /// @param npc npc to be affected func C_Item Npc_GetRightHandItem ( var C_Npc npc ) {}; /// Returns an item from a slot with the slotName /// /// @param npc npc to be affected /// @param slotName name of the slot func C_Item Npc_GetSlotItem ( var C_Npc npc , var string slotName ) {}; /// Places an instance of the oCVom class (including items and NPCs) object into the slotName of the NPC /// The copyInInv parameter determines wheter a copy of the object should remian in the character's inventory /// /// @param npc npc to remove the item from /// @param slotName name of the slot fro which to remove the item /// @param object object to be inserted into the slot /// @param copyInInv should a copy of the object stay in character inventory func void Npc_PutInSlot ( var C_Npc npc , var string slotName , var instance object , var int copyInInv ) {}; /// Removes an object from the slotName of the NPC. /// The dropIt parameter in Gothic 2 defines, wheter or not the object should drop out of the slot. In Gothic 1, this parameter is reserved and must be 0. /// /// @param npc npc to remove the item from /// @param slotName name of the slot fro which to remove the item /// @param dropIt should the object be dropped func void Npc_RemoveFromSlot ( var C_Npc npc , var string slotName , var int dropIt ) {}; MOB interactive object functions \ud800\udf3e Functions to manipulate interactive objects like destroying MOBs, setting lockpick combination and such. func void Mob_Destroy ( var instance object ) {}; func void Mob_RemoveItem ( var instance object , var int item ) {}; func void Mob_RemoveItems ( var instance object , var int item , var int cnt ) {}; func void Mob_InsertItem ( var instance object , var int item ) {}; func void Mob_InsertItems ( var instance object , var int item , var int cnt ) {}; func string Mob_GetLockCombination ( var instance object ) {}; func void Mob_SetLockCombination ( var instance object , var string comb ) {}; func int Mob_IsLocked ( var instance object ) {}; func void Mob_SetLocked ( var instance object , var int locked ) {}; func instance Mob_GetKeyInstance ( var instance object ) {}; func void Mob_SetKeyInstance ( var instance object , var int key ) {}; AI functions for working with AI \ud800\udf3e Functions to work with the new C_Trigger class and NPC's AI queue. func void AI_CallScript ( var string funcName , var C_Npc slf , var C_Npc oth ) {}; func C_Trigger AI_StartTriggerScript ( var string funcName , var int delay ) {}; func C_Trigger AI_StartTriggerScriptEx ( var string funcName , var int delay , var C_Npc slf , var C_Npc oth , var C_Npc vct ) {}; const int selfID = 0 ; const int otherID = 1 ; const int victimID = 2 ; func int Hlp_IsNULL ( var instance pointer ) {}; func C_Trigger AI_GetTriggerByID ( var int ID ) {}; func int AI_GetTriggersNum () {}; func C_Trigger AI_GetTriggerNPC ( var int npcID ) {}; func func AI_GetTriggerFunc ( var C_Trigger trigger ) {}; func string AI_GetTriggerFuncName ( var C_Trigger trigger ) {}; AI_GetNextTriggerByFunc ( var C_Trigger startTrigger , var func function ) {}; AI_GetNextTriggerByFuncName ( var C_Trigger startTrigger , var string functionName ) {}; AI_GetNextTriggerBySelf ( var C_Trigger startTrigger , var C_Npc self ) {}; AI_GetNextTriggerByOther ( var C_Trigger startTrigger , var C_Npc other ) {}; AI_GetNextTriggerByVictim ( var C_Trigger startTrigger , var C_Npc victim ) {}; AI_GetNextTriggerByNPCs ( var C_Trigger startTrigger , var C_Npc self , var C_Npc other , var C_Npc victim ) {}; /// Returns the name of the current Steam user /// Returns empty string when not run with Steam /// /// @return string containing the Steam username, or empty string func string Hlp_GetSteamPersonalName () {}; PAR functions for parser manipulation \ud800\udf3e Parser functions are used to manipulate the parsers. Retrieve SymbolID, access arrays and such. func int Par_GetParserID ( var string parName ) {}; func int Par_GetSymbolID ( var int parId , var string symName ) {}; func int Par_GetSymbolLength ( var int parId , var int symId ) {}; func int Par_GetSymbolValueInt ( var int parId , var int symId ) {}; func float Par_GetSymbolValueFloat ( var int parId , var int symId ) {}; func string Par_GetSymbolValueString ( var int parId , var int symId ) {}; func instance Par_GetSymbolValueInstance ( var int parId , var int symId ) {}; func int Par_GetSymbolValueIntArray ( var int parId , var int symId , var int arrayId ) {}; func float Par_GetSymbolValueFloatArray ( var int parId , var int symId , var int arrayId ) {}; func string Par_GetSymbolValueStringArray ( var int parId , var int symId , var int arrayId ) {}; func void Par_SetSymbolValueInt ( var int value , var int parId , var int symId , var int arrayId ) {}; func void Par_SetSymbolValueFloat ( var float value , var int parId , var int symId , var int arrayId ) {}; func void Par_SetSymbolValueString ( var string value , var int parId , var int symId , var int arrayId ) {}; func void Par_SetSymbolValueInstance ( var instance value , var int parId , var int symId , var int arrayId ) {}; func void Par_SetSymbolValueIntArray ( var int value , var int parId , var int symId , var int arrayId ) {}; func void Par_SetSymbolValueFloatArray ( var float value , var int parId , var int symId , var int arrayId ) {}; func void Par_SetSymbolValueStringArray ( var string value , var int parId , var int symId , var int arrayId ) {}; VOB functions for object manipulation \ud800\udf3e VOB functions allow you to manipulate game world objects. /// Returns the current position of the object in the world /// /// @param vob vob to ge the position of /// @return C_Position instace - position of the VOB func C_Position Vob_GetVobPosition ( var C_Vob vob ) {}; /// Sets the current position of the object in the world /// /// @param vob vob to get the position of /// @param pos new position of the vob func void Vob_SetVobPosition ( var C_Vob vob , var C_Position pos ) {}; /// Returns the universal data of the zCVob object /// /// @param vob VOB to get the position of /// @return general vob data C_Vob_Data func C_Vob_Data Vob_GetVobData ( var C_Vob vob ) {}; /// Sets the universal data to a zCVob object /// /// @param vob VOB to get the position of /// @param data general vob data C_Vob_Data func void Vob_SetVobData ( var C_Vob vob , var C_Vob_Data data ) {}; /// Returns zCVobLight object data /// /// @param vobLight vobLight object /// @return C_Light_Data of the light func C_Light_Data Vob_GetLightData ( var C_Vob vobLight ) {}; /// Sets the data of a zCVobLight object /// /// @param vobLight object to apply the light data to /// @param data C_Light_Data light data to be set func void Vob_SetLightData ( var C_Vob vobLight , var C_Light_Data data ) {}; /// Clears the list of animation colours for the light source /// /// @param vobLight light vob func void Vob_ClearLightAniList ( var C_Vob vobLight ) {}; /// Adds a color to the colour list /// /// @param vobLight object to apply the colour to /// @param col colour to be applied func void Vob_AddLightAniColor ( var C_Vob vobLight , var C_Color col ) {}; /// Adds a color to the colour list /// /// @param vobLight object to apply the colour to /// @param r red colour channel /// @param g green colour channel /// @param b blue colour channel func void Vob_AddLightAniColorRGB ( var C_Vob vobLight , var int r , var int g , var int b ) {}; /// Returns the data of the oCMOB object /// /// @param mob oCMOB object /// @return mob data func C_Mob_Data Vob_GetMobData ( var C_Vob mob ) {}; /// Sets the data of the oCMOB object /// /// @param mob oCMOB object /// @param data C_Mob_Data to be set func void Vob_SetMobData ( var C_Vob mob , var C_Mob_Data data ) {}; /// Returns the data of the oCMobInter object /// /// @param mobInter oCMobInter object /// @return MobInter_Data of the object func MobInter_Data Vob_GetMobInterData ( var C_Vob mobInter ) {}; /// Sets the data of the oCMobInter object /// /// @param mobInter oCMobInter object /// @param data MobInter_Data of the object func void Vob_SetMobInterData ( var C_Vob mobInter , var C_MobInter_Data data ) {}; /// Returns the data of the oCMobLockable object /// /// @param mobLock oCMobLockable object /// @param data MobInter_Data of the object func C_MobLockable_Data Vob_GetMobInterData ( var C_Vob mobLock ) {}; /// Sets the data of the oCMobLockable object /// /// @param mobLock oCMobLockable object /// @param data C_MobLockable_Data of the object func void Vob_SetMobInterData ( var C_Vob mobLock , var C_MobLockable_Data data ) {}; String function \ud800\udf3e Functions to manipulate and format strings. /// Returns formatted string using format specifiers /// /// Format specifiers: /// %s - inserts a string /// %i - inserts a integer number /// %x - inserts a integer in hexadecimal /// %f - inserts a floating point number /// %b - inserts a logical expression /// %p - inserts a pointer /// /// @return formatted string func string Str_Format ( var string format , ... ) {}; /// Returns a string in the current language, otherwise in English. /// Arguments MUST be encoded in UTF-8! The result string will be converted to apropriate ANSI string. /// /// @param russian Russian string /// @param english English string /// @param german German string /// @param polish Polish string /// /// @return string in the current language func string Str_GetLocalizedString ( var string russian , var string english , var string german , var string polish ) {}; /// Returns a string in the current language, otherwise in English. /// Offers additional languages /// /// @param russian Russian string /// @param english English string /// @param german German string /// @param polish Polish string /// @param czech Czech string /// @param romanian Romanian string /// @param italian Italian string /// @param spanish Spanish string /// /// @return string in the current language func string Str_GetLocalizedStringEx ( var string russian , var string english , var string german , var string polish , var string czech , var string romanian , var string italian , var string spanish ) {}; /// Converts UTF-8 string into an ANSI string with codePage /// /// @param utf8 string encoded in UTF8 /// @param codePage codePage id, can be obtained from Str_GetCurrentCP func string Str_UTF8_to_ANSI ( var string utf8 , var int codePage ) {}; /// Return the code page corresponding to the current language set in the Union System func int Str_GetCurrentCP () {}; /// Returns the length of a string /// /// @param str string to be measured /// @return length of the string func int Str_GetLength ( var int str ) {}; Menu function \ud800\udf3e /// Find all C_MenuItem object instances by the mask and automatically places them in the current menu instance /// /// @param mask regex like mask for searching func void Menu_SearchItems ( var string mask ) {}; Log functions \ud800\udf3e As discussed on Inside Gothic , vanilla Gothic has no way of getting the status of a quest. These functions implement that functionality. /// Returns the status of diary topic /// Not found - (-1) /// Free - 0 /// Running - 1 /// Success - 2 /// Failure - 3 /// Obsolete - 4 /// /// @param topic name of the topic /// @return topic status func int Log_GetTopicStatus ( var string topic ) {}; /// Returns the topic the diary topic is in /// Not found - (-1) /// Missions - 0 /// Notes - 1 /// All - 2 /// /// @param topic name of the topic /// @return topic section func int Log_GetTopicSection ( var string topic ) {}; Event functions and variables \ud800\udf3e On top of external functions, zParserExtender also adds functi func event GameLoop () {}; func event GameInit () {}; const instance null ; const float NaN ;","title":"External functions"},{"location":"zengin/scripts/extenders/zParserExtender/externals/#external-functions","text":"External functions are Daedalus functions (defined in the engine itself) used to interface with the enigne. zParseExtender adds quite a huge amount of new functions, that help scripters to interface with the engine in more ways, that was possible before (without script extenders such as Ikarus and LeGo).","title":"External functions"},{"location":"zengin/scripts/extenders/zParserExtender/externals/#cast-data-type-conversion-functions","text":"External functions for data type conversion and pointer casting. func instance Cast_PointerToInstance ( var int address ) {}; func int Cast_InstanceToPointer ( var instance object ) {}; func C_NPC Cast_PointerToNpc ( var int address ) {}; func C_ITEM Cast_PointerToItem ( var int address ) {}; func int Cast_InstanceIsNpc ( var instance object ) {}; func int Cast_InstanceIsItem ( var instance object ) {}; func int Cast_InstanceIsMob ( var instance object ) {}; func int Cast_GetInstanceIndex ( var instance object ) {}; /// Returns the class identifier of a class by its name /// /// @param className name of the class /// @return class identifier func int Cast_GetClassID ( var string className ) {}; /// Returns class identifier of the zCObject vob class /// /// @param object object instance /// @return class zCObject identifier func int Cast_GetVobClassID ( var instance object ) {}; /// Checks if the classId class is the parent class of the object /// /// @param classId class identifier, from Cast_GetClassID function /// @param object object instance /// @return class zCObject identifier func int Cast_CheckVobClassID ( var int classId , var instance object ) {};","title":"CAST data type conversion functions"},{"location":"zengin/scripts/extenders/zParserExtender/externals/#hlp-help-functions","text":"Helper functions, used for safety checks or to get specific information from the engine. func int Hlp_HasFocusVob ( var C_NPC npc ) {}; func instance Hlp_GetFocusVob ( var C_NPC npc ) {}; func string Hlp_GetFocusVobName ( var C_NPC npc ) {}; func int Hlp_GetStringLength ( var string str ) {}; func int IsNAN ( var float value ) {}; func int Hlp_KeyToggled ( var int key ) {}; func int Hlp_KeyPressed ( var int key ) {}; func int Hlp_LogicalKeyToggled ( var int key ) {}; func int Hlp_GameOnPause () {}; func void Hlp_MessageBox ( var string message ) {}; func void Hlp_PrintConsole ( var string message ) {}; func int Hlp_ReadOptionInt ( var string optName , var string section , var string entry , var int default ) {}; func float Hlp_ReadOptionFloat ( var string optName , var string section , var string entry , var float default ) {}; func string Hlp_ReadOptionString ( var string optName , var string section , var string entry , var string default ) {}; func int Hlp_OptionIsExists ( var string optName , var string section , var string entry ) {}; func void Hlp_WriteOptionInt ( var string optName , var string section , var string entry , var int value ) {}; func void Hlp_WriteOptionFloat ( var string optName , var string section , var string entry , var float value ) {}; func void Hlp_WriteOptionString ( var string optName , var string section , var string entry , var string value ) {};","title":"HLP help functions"},{"location":"zengin/scripts/extenders/zParserExtender/externals/#wld-world-manipulation-functions","text":"Functions related to the world. func void Wld_ChangeLevel ( var string world , var string waypoint ) {}; func instance Wld_FindVob ( var string vobname ) {}; func void Wld_PlayEffectVob ( var string effect , var instance pvob , var int level , var int damage , var int damage_type , var int damage_speed ) {}; func void Wld_PlayEffectAt ( var string effect , var instance coord , var int level , var int damage , var int damage_type , var int damage_speed ) {}; func void Wld_ToggleRain ( var float weight , var flaot time ) {}; func void Wld_SetWeatherType ( var int type ) {}; func int Wld_GetWeatherType () {};","title":"WLD world manipulation functions"},{"location":"zengin/scripts/extenders/zParserExtender/externals/#mdl-model-functions","text":"Functions to tweak animation and other model related settings. func int Mdl_GetAnimationIndex ( var C_NPC npc , var string ani_name ) {}; func string Mdl_GetAnimationName ( var C_NPC npc , var int ani_index ) {}; func int Mdl_AnimationIsExists ( var C_NPC npc , var int ani_index ) {}; func int Mdl_AnimationIsActive ( var C_NPC npc , var int ani_index ) {}; func float Mdl_SetAllAnimationsFPS ( var C_NPC npc , var float fps ) {}; func float Mdl_ResetAllAnimationsFPS ( var C_NPC npc ) {}; func float Mdl_SetAnimationFPS ( var C_NPC npc , var int idx , var float fps ) {}; func float Mdl_ResetAnimationFPS ( var C_NPC npc , var int ani_index ) {}; func void Mdl_SetVisible ( var C_NPC npc , var int isVisible ) {}; /// Applies or moves existing overlay to the top of the list /// /// @param mdsName name of the overlay func void Mdl_ApplyOverlayMds_AtFirst ( var string mdsName ) {}; /// Sets a multipler for animation speed /// 1.0 = 100% speed (normal speed) /// /// @param npc npc to be affected /// @param multiplier speed of the animation func void Mdl_SetNpcSpeedMultiplier ( var C_Npc npc , var float multiplier ) {}; /// Resets the animation speed of an NPC /// /// @param npc npc to be affected func void Mdl_ResetNpcSpeedMultiplier ( var C_Npc npc ) {};","title":"MDL model functions"},{"location":"zengin/scripts/extenders/zParserExtender/externals/#npc-character-functions","text":"NPC realted functions. func void Npc_SetAsHero ( var C_NPC npc ) {}; func void Npc_OpenInventory ( var C_NPC npc ) {}; func void Npc_OpenInventorySteal ( var C_NPC npc ) {}; func void Npc_OpenInventoryTrade ( var C_NPC npc ) {}; /// Returns an item in NPC's left hand slot /// /// @param npc npc to be affected func C_Item Npc_GetLeftHandItem ( var C_Npc npc ) {}; /// Returns an item in NPC's right hand slot /// /// @param npc npc to be affected func C_Item Npc_GetRightHandItem ( var C_Npc npc ) {}; /// Returns an item from a slot with the slotName /// /// @param npc npc to be affected /// @param slotName name of the slot func C_Item Npc_GetSlotItem ( var C_Npc npc , var string slotName ) {}; /// Places an instance of the oCVom class (including items and NPCs) object into the slotName of the NPC /// The copyInInv parameter determines wheter a copy of the object should remian in the character's inventory /// /// @param npc npc to remove the item from /// @param slotName name of the slot fro which to remove the item /// @param object object to be inserted into the slot /// @param copyInInv should a copy of the object stay in character inventory func void Npc_PutInSlot ( var C_Npc npc , var string slotName , var instance object , var int copyInInv ) {}; /// Removes an object from the slotName of the NPC. /// The dropIt parameter in Gothic 2 defines, wheter or not the object should drop out of the slot. In Gothic 1, this parameter is reserved and must be 0. /// /// @param npc npc to remove the item from /// @param slotName name of the slot fro which to remove the item /// @param dropIt should the object be dropped func void Npc_RemoveFromSlot ( var C_Npc npc , var string slotName , var int dropIt ) {};","title":"NPC character functions"},{"location":"zengin/scripts/extenders/zParserExtender/externals/#mob-interactive-object-functions","text":"Functions to manipulate interactive objects like destroying MOBs, setting lockpick combination and such. func void Mob_Destroy ( var instance object ) {}; func void Mob_RemoveItem ( var instance object , var int item ) {}; func void Mob_RemoveItems ( var instance object , var int item , var int cnt ) {}; func void Mob_InsertItem ( var instance object , var int item ) {}; func void Mob_InsertItems ( var instance object , var int item , var int cnt ) {}; func string Mob_GetLockCombination ( var instance object ) {}; func void Mob_SetLockCombination ( var instance object , var string comb ) {}; func int Mob_IsLocked ( var instance object ) {}; func void Mob_SetLocked ( var instance object , var int locked ) {}; func instance Mob_GetKeyInstance ( var instance object ) {}; func void Mob_SetKeyInstance ( var instance object , var int key ) {};","title":"MOB interactive object functions"},{"location":"zengin/scripts/extenders/zParserExtender/externals/#ai-functions-for-working-with-ai","text":"Functions to work with the new C_Trigger class and NPC's AI queue. func void AI_CallScript ( var string funcName , var C_Npc slf , var C_Npc oth ) {}; func C_Trigger AI_StartTriggerScript ( var string funcName , var int delay ) {}; func C_Trigger AI_StartTriggerScriptEx ( var string funcName , var int delay , var C_Npc slf , var C_Npc oth , var C_Npc vct ) {}; const int selfID = 0 ; const int otherID = 1 ; const int victimID = 2 ; func int Hlp_IsNULL ( var instance pointer ) {}; func C_Trigger AI_GetTriggerByID ( var int ID ) {}; func int AI_GetTriggersNum () {}; func C_Trigger AI_GetTriggerNPC ( var int npcID ) {}; func func AI_GetTriggerFunc ( var C_Trigger trigger ) {}; func string AI_GetTriggerFuncName ( var C_Trigger trigger ) {}; AI_GetNextTriggerByFunc ( var C_Trigger startTrigger , var func function ) {}; AI_GetNextTriggerByFuncName ( var C_Trigger startTrigger , var string functionName ) {}; AI_GetNextTriggerBySelf ( var C_Trigger startTrigger , var C_Npc self ) {}; AI_GetNextTriggerByOther ( var C_Trigger startTrigger , var C_Npc other ) {}; AI_GetNextTriggerByVictim ( var C_Trigger startTrigger , var C_Npc victim ) {}; AI_GetNextTriggerByNPCs ( var C_Trigger startTrigger , var C_Npc self , var C_Npc other , var C_Npc victim ) {}; /// Returns the name of the current Steam user /// Returns empty string when not run with Steam /// /// @return string containing the Steam username, or empty string func string Hlp_GetSteamPersonalName () {};","title":"AI functions for working with AI"},{"location":"zengin/scripts/extenders/zParserExtender/externals/#par-functions-for-parser-manipulation","text":"Parser functions are used to manipulate the parsers. Retrieve SymbolID, access arrays and such. func int Par_GetParserID ( var string parName ) {}; func int Par_GetSymbolID ( var int parId , var string symName ) {}; func int Par_GetSymbolLength ( var int parId , var int symId ) {}; func int Par_GetSymbolValueInt ( var int parId , var int symId ) {}; func float Par_GetSymbolValueFloat ( var int parId , var int symId ) {}; func string Par_GetSymbolValueString ( var int parId , var int symId ) {}; func instance Par_GetSymbolValueInstance ( var int parId , var int symId ) {}; func int Par_GetSymbolValueIntArray ( var int parId , var int symId , var int arrayId ) {}; func float Par_GetSymbolValueFloatArray ( var int parId , var int symId , var int arrayId ) {}; func string Par_GetSymbolValueStringArray ( var int parId , var int symId , var int arrayId ) {}; func void Par_SetSymbolValueInt ( var int value , var int parId , var int symId , var int arrayId ) {}; func void Par_SetSymbolValueFloat ( var float value , var int parId , var int symId , var int arrayId ) {}; func void Par_SetSymbolValueString ( var string value , var int parId , var int symId , var int arrayId ) {}; func void Par_SetSymbolValueInstance ( var instance value , var int parId , var int symId , var int arrayId ) {}; func void Par_SetSymbolValueIntArray ( var int value , var int parId , var int symId , var int arrayId ) {}; func void Par_SetSymbolValueFloatArray ( var float value , var int parId , var int symId , var int arrayId ) {}; func void Par_SetSymbolValueStringArray ( var string value , var int parId , var int symId , var int arrayId ) {};","title":"PAR functions for parser manipulation"},{"location":"zengin/scripts/extenders/zParserExtender/externals/#vob-functions-for-object-manipulation","text":"VOB functions allow you to manipulate game world objects. /// Returns the current position of the object in the world /// /// @param vob vob to ge the position of /// @return C_Position instace - position of the VOB func C_Position Vob_GetVobPosition ( var C_Vob vob ) {}; /// Sets the current position of the object in the world /// /// @param vob vob to get the position of /// @param pos new position of the vob func void Vob_SetVobPosition ( var C_Vob vob , var C_Position pos ) {}; /// Returns the universal data of the zCVob object /// /// @param vob VOB to get the position of /// @return general vob data C_Vob_Data func C_Vob_Data Vob_GetVobData ( var C_Vob vob ) {}; /// Sets the universal data to a zCVob object /// /// @param vob VOB to get the position of /// @param data general vob data C_Vob_Data func void Vob_SetVobData ( var C_Vob vob , var C_Vob_Data data ) {}; /// Returns zCVobLight object data /// /// @param vobLight vobLight object /// @return C_Light_Data of the light func C_Light_Data Vob_GetLightData ( var C_Vob vobLight ) {}; /// Sets the data of a zCVobLight object /// /// @param vobLight object to apply the light data to /// @param data C_Light_Data light data to be set func void Vob_SetLightData ( var C_Vob vobLight , var C_Light_Data data ) {}; /// Clears the list of animation colours for the light source /// /// @param vobLight light vob func void Vob_ClearLightAniList ( var C_Vob vobLight ) {}; /// Adds a color to the colour list /// /// @param vobLight object to apply the colour to /// @param col colour to be applied func void Vob_AddLightAniColor ( var C_Vob vobLight , var C_Color col ) {}; /// Adds a color to the colour list /// /// @param vobLight object to apply the colour to /// @param r red colour channel /// @param g green colour channel /// @param b blue colour channel func void Vob_AddLightAniColorRGB ( var C_Vob vobLight , var int r , var int g , var int b ) {}; /// Returns the data of the oCMOB object /// /// @param mob oCMOB object /// @return mob data func C_Mob_Data Vob_GetMobData ( var C_Vob mob ) {}; /// Sets the data of the oCMOB object /// /// @param mob oCMOB object /// @param data C_Mob_Data to be set func void Vob_SetMobData ( var C_Vob mob , var C_Mob_Data data ) {}; /// Returns the data of the oCMobInter object /// /// @param mobInter oCMobInter object /// @return MobInter_Data of the object func MobInter_Data Vob_GetMobInterData ( var C_Vob mobInter ) {}; /// Sets the data of the oCMobInter object /// /// @param mobInter oCMobInter object /// @param data MobInter_Data of the object func void Vob_SetMobInterData ( var C_Vob mobInter , var C_MobInter_Data data ) {}; /// Returns the data of the oCMobLockable object /// /// @param mobLock oCMobLockable object /// @param data MobInter_Data of the object func C_MobLockable_Data Vob_GetMobInterData ( var C_Vob mobLock ) {}; /// Sets the data of the oCMobLockable object /// /// @param mobLock oCMobLockable object /// @param data C_MobLockable_Data of the object func void Vob_SetMobInterData ( var C_Vob mobLock , var C_MobLockable_Data data ) {};","title":"VOB functions for object manipulation"},{"location":"zengin/scripts/extenders/zParserExtender/externals/#string-function","text":"Functions to manipulate and format strings. /// Returns formatted string using format specifiers /// /// Format specifiers: /// %s - inserts a string /// %i - inserts a integer number /// %x - inserts a integer in hexadecimal /// %f - inserts a floating point number /// %b - inserts a logical expression /// %p - inserts a pointer /// /// @return formatted string func string Str_Format ( var string format , ... ) {}; /// Returns a string in the current language, otherwise in English. /// Arguments MUST be encoded in UTF-8! The result string will be converted to apropriate ANSI string. /// /// @param russian Russian string /// @param english English string /// @param german German string /// @param polish Polish string /// /// @return string in the current language func string Str_GetLocalizedString ( var string russian , var string english , var string german , var string polish ) {}; /// Returns a string in the current language, otherwise in English. /// Offers additional languages /// /// @param russian Russian string /// @param english English string /// @param german German string /// @param polish Polish string /// @param czech Czech string /// @param romanian Romanian string /// @param italian Italian string /// @param spanish Spanish string /// /// @return string in the current language func string Str_GetLocalizedStringEx ( var string russian , var string english , var string german , var string polish , var string czech , var string romanian , var string italian , var string spanish ) {}; /// Converts UTF-8 string into an ANSI string with codePage /// /// @param utf8 string encoded in UTF8 /// @param codePage codePage id, can be obtained from Str_GetCurrentCP func string Str_UTF8_to_ANSI ( var string utf8 , var int codePage ) {}; /// Return the code page corresponding to the current language set in the Union System func int Str_GetCurrentCP () {}; /// Returns the length of a string /// /// @param str string to be measured /// @return length of the string func int Str_GetLength ( var int str ) {};","title":"String function"},{"location":"zengin/scripts/extenders/zParserExtender/externals/#menu-function","text":"/// Find all C_MenuItem object instances by the mask and automatically places them in the current menu instance /// /// @param mask regex like mask for searching func void Menu_SearchItems ( var string mask ) {};","title":"Menu function"},{"location":"zengin/scripts/extenders/zParserExtender/externals/#log-functions","text":"As discussed on Inside Gothic , vanilla Gothic has no way of getting the status of a quest. These functions implement that functionality. /// Returns the status of diary topic /// Not found - (-1) /// Free - 0 /// Running - 1 /// Success - 2 /// Failure - 3 /// Obsolete - 4 /// /// @param topic name of the topic /// @return topic status func int Log_GetTopicStatus ( var string topic ) {}; /// Returns the topic the diary topic is in /// Not found - (-1) /// Missions - 0 /// Notes - 1 /// All - 2 /// /// @param topic name of the topic /// @return topic section func int Log_GetTopicSection ( var string topic ) {};","title":"Log functions"},{"location":"zengin/scripts/extenders/zParserExtender/externals/#event-functions-and-variables","text":"On top of external functions, zParserExtender also adds functi func event GameLoop () {}; func event GameInit () {}; const instance null ; const float NaN ;","title":"Event functions and variables"},{"location":"zengin/scripts/extenders/zParserExtender/helperclasses/","text":"Engine classes \ud800\udf3e zParserExtender implements various proxy classes that can be used to access game world objects. Warning It is not recommended to implement complex mechanics using these classes and functions. They are present as a simple backup option for accessing game world objects and for quick fixes. C_VOB \ud800\udf3e This class represents basic pointer to a game world object. C_Color \ud800\udf3e Represents color in the RGBA format class C_Color { var int R ; // red channel value var int G ; // green channel value var int B ; // blue channel value var int A ; // alpha channel value }; C_Position \ud800\udf3e Represents 3D position in the world class C_Position { var int X ; // X coordinate var int Y ; // Y coordinate var int Z ; // Z coordinate }; Externals: /// Returns the current position of the object in the world /// /// @param vob vob to ge the position of /// @return C_Position instace - position of the VOB func C_Position Vob_GetVobPosition ( var C_Vob vob ) {}; /// Sets the current position of the object in the world /// /// @param vob vob to get the position of /// @param pos new position of the vob func void Vob_SetVobPosition ( var C_Vob vob , var C_Position pos ) {}; Note The following classes define properties of C_VOB objects or classes derived from it. C_VOB_DATA \ud800\udf3e Represents universal zCVob class class C_VOB_DATA { var string Name ; // object name var float VisualAlpha ; // object's transparency 0.0 - 1.0 var int ShowVisual ; // display the mode var int DrawBBox3D ; // show objects bounding box var int VisualAlphaEnabled ; // enables objects transparency var int PhysicsEnabled ; // enables object's physics var int IgnoredByTraceRay ; // allow any object collisions var int CollDetectionStatic ; // allow collision with static world polygons var int CollDetectionDynamic ; // allow collision with dynamic world objects var int CastDynShadow ; // display shadow of the object var int LightColorStatDirty ; // allow static liging of the object var int LightColorDynDirty ; // allow dynamic lighing of the object var int SleepingMode ; // sets object's activity mode (0 - inactive, 1 - active, 2 - AI only) var int DontWriteIntoArchive ; // turns of the serialization of this object to the save file }; Externals: /// Returns the universal data of the zCVob object /// /// @param vob VOB to get the position of /// @return general vob data C_Vob_Data func C_Vob_Data Vob_GetVobData ( var C_Vob vob ) {}; /// Sets the universal data to a zCVob object /// /// @param vob VOB to get the position of /// @param data general vob data C_Vob_Data func void Vob_SetVobData ( var C_Vob vob , var C_Vob_Data data ) {}; C_LIGHT_DATA \ud800\udf3e Represents zCVobLight objects class C_LIGHT_DATA { var int R ; // red light intensity var int G ; // green light intensity var int B ; // blue light intensity var int Range ; // radius var int RangeInv ; // var int RangeBackup ; // var int RangeAniActFrame ; // current light animation frame for the radius var int RangeAniFPS ; // speed of light animation for the radius var int ColorAniActFrame ; // current light animation frame for colour var int ColorAniFPS ; // speed of light animation for colour var int SpotConeAngleDeg ; // angle of cone light source var int IsStatic ; // whether the source is static var int RangeAniSmooth ; // [UNUSED] var int RangeAniLoop ; // [UNUSED] var int ColorAniSmooth ; // allows soft transitions between colours var int ColorAniLoop ; // [UNUSED] var int IsTurnedOn ; // whether the light source is on var int LightQuality ; // source quality (when statically compiling light) (0 - high, 1 - medium, 2 - low) var int LightType ; // type of source (at static light compilation) (0 - point, 1 - cone) }; Externals: /// Returns zCVobLight object data /// /// @param vobLight vobLight object /// @return C_Light_Data of the light func C_Light_Data Vob_GetLightData ( var C_Vob vobLight ) {}; /// Sets the data of a zCVobLight object /// /// @param vobLight object to apply the light data to /// @param data C_Light_Data light data to be set func void Vob_SetLightData ( var C_Vob vobLight , var C_Light_Data data ) {}; /// Clears the list of animation colours for the light source /// /// @param vobLight light vob func void Vob_ClearLightAniList ( var C_Vob vobLight ) {}; /// Adds a color to the colour list /// /// @param vobLight object to apply the colour to /// @param col colour to be applied func void Vob_AddLightAniColor ( var C_Vob vobLight , var C_Color col ) {}; /// Adds a color to the colour list /// /// @param vobLight object to apply the colour to /// @param r red colour channel /// @param g green colour channel /// @param b blue colour channel func void Vob_AddLightAniColorRGB ( var C_Vob vobLight , var int r , var int g , var int b ) {}; C_MOB_DATA \ud800\udf3e Represents data for the used oCMOB object class C_MOB_DATA { var string VisibleName ; // name shown above the object var int Hitpoints ; // number of hitpoints var int Damage ; // damage the object can cause var int IsDestroyed ; // if the object is destroyed var int Moveable ; // whether the object can be moved var int Takeable ; // whether the object can be taken var int FocusOverride ; // if the object will redefine focus in combat mode var int SndMat ; // object's material (0 - wood, 1 - stone, 2 - metal, 3 - skin, 4 - clay, 5 - glass) var string VisualDestroyed ; // model when the object is destroyed var string OwnerStr ; // name of the instance of the owner of the object var string OwnerGuildStr ; // name of the guild of the object var int Owner ; // instance of the owner var int OwnerGuild ; // guild instance var int FocusNameIndex ; // the script string of the displayed name }; /// Returns the data of the oCMOB object /// /// @param mob oCMOB object /// @return mob data func C_Mob_Data Vob_GetMobData ( var C_Vob mob ) {}; /// Sets the data of the oCMOB object /// /// @param mob oCMOB object /// @param data C_Mob_Data to be set func void Vob_SetMobData ( var C_Vob mob , var C_Mob_Data data ) {}; C_MOBINTER_DATA \ud800\udf3e Represents data for the interactive object oCMobInter class C_MOBINTER_DATA { var string TriggerTarget ; // object name which will be triggered by OnTrigger var string UseWithItem ; // name of the object instance that is needed for interaction var string Sceme ; // name of the scene that corresponds to the object and character animations var string ConditionFunc ; // scripting condition under which the interaction can be performed var string OnStateFuncName ; // the name pattern of the functions that will be called when the object changes the state var int State ; // the current state of the object var int State_num ; // number of object's states var int State_target // current state of the object var int Rewind ; // prohibits object updating var int MobStateAni ; // current animation of the object var int NpcStateAni ; // current character animation }; /// Returns the data of the oCMobInter object /// /// @param mobInter oCMobInter object /// @return MobInter_Data of the object func MobInter_Data Vob_GetMobInterData ( var C_Vob mobInter ) {}; /// Sets the data of the oCMobInter object /// /// @param mobInter oCMobInter object /// @param data MobInter_Data of the object func void Vob_SetMobInterData ( var C_Vob mobInter , var C_MobInter_Data data ) {}; C_MOBLOCKABLE_DATA \ud800\udf3e Represents data for the locked interactive object oCMobLockable class C_MOBLOCKABLE_DATA { var int Locked ; // whether the object is locked var int AutoOpen ; // [UNUSED] var int PickLockNr ; // current rotation number var string KeyInstance ; // key instance name for the object var string PickLockStr ; // combination to open the object (\"LRRLR\") }; /// Returns the data of the oCMobLockable object /// /// @param mobLock oCMobLockable object /// @param data MobInter_Data of the object func C_MobLockable_Data Vob_GetMobInterData ( var C_Vob mobLock ) {}; /// Sets the data of the oCMobLockable object /// /// @param mobLock oCMobLockable object /// @param data C_MobLockable_Data of the object func void Vob_SetMobInterData ( var C_Vob mobLock , var C_MobLockable_Data data ) {};","title":"Engine classes"},{"location":"zengin/scripts/extenders/zParserExtender/helperclasses/#engine-classes","text":"zParserExtender implements various proxy classes that can be used to access game world objects. Warning It is not recommended to implement complex mechanics using these classes and functions. They are present as a simple backup option for accessing game world objects and for quick fixes.","title":"Engine classes"},{"location":"zengin/scripts/extenders/zParserExtender/helperclasses/#c_vob","text":"This class represents basic pointer to a game world object.","title":"C_VOB"},{"location":"zengin/scripts/extenders/zParserExtender/helperclasses/#c_color","text":"Represents color in the RGBA format class C_Color { var int R ; // red channel value var int G ; // green channel value var int B ; // blue channel value var int A ; // alpha channel value };","title":"C_Color"},{"location":"zengin/scripts/extenders/zParserExtender/helperclasses/#c_position","text":"Represents 3D position in the world class C_Position { var int X ; // X coordinate var int Y ; // Y coordinate var int Z ; // Z coordinate }; Externals: /// Returns the current position of the object in the world /// /// @param vob vob to ge the position of /// @return C_Position instace - position of the VOB func C_Position Vob_GetVobPosition ( var C_Vob vob ) {}; /// Sets the current position of the object in the world /// /// @param vob vob to get the position of /// @param pos new position of the vob func void Vob_SetVobPosition ( var C_Vob vob , var C_Position pos ) {}; Note The following classes define properties of C_VOB objects or classes derived from it.","title":"C_Position"},{"location":"zengin/scripts/extenders/zParserExtender/helperclasses/#c_vob_data","text":"Represents universal zCVob class class C_VOB_DATA { var string Name ; // object name var float VisualAlpha ; // object's transparency 0.0 - 1.0 var int ShowVisual ; // display the mode var int DrawBBox3D ; // show objects bounding box var int VisualAlphaEnabled ; // enables objects transparency var int PhysicsEnabled ; // enables object's physics var int IgnoredByTraceRay ; // allow any object collisions var int CollDetectionStatic ; // allow collision with static world polygons var int CollDetectionDynamic ; // allow collision with dynamic world objects var int CastDynShadow ; // display shadow of the object var int LightColorStatDirty ; // allow static liging of the object var int LightColorDynDirty ; // allow dynamic lighing of the object var int SleepingMode ; // sets object's activity mode (0 - inactive, 1 - active, 2 - AI only) var int DontWriteIntoArchive ; // turns of the serialization of this object to the save file }; Externals: /// Returns the universal data of the zCVob object /// /// @param vob VOB to get the position of /// @return general vob data C_Vob_Data func C_Vob_Data Vob_GetVobData ( var C_Vob vob ) {}; /// Sets the universal data to a zCVob object /// /// @param vob VOB to get the position of /// @param data general vob data C_Vob_Data func void Vob_SetVobData ( var C_Vob vob , var C_Vob_Data data ) {};","title":"C_VOB_DATA"},{"location":"zengin/scripts/extenders/zParserExtender/helperclasses/#c_light_data","text":"Represents zCVobLight objects class C_LIGHT_DATA { var int R ; // red light intensity var int G ; // green light intensity var int B ; // blue light intensity var int Range ; // radius var int RangeInv ; // var int RangeBackup ; // var int RangeAniActFrame ; // current light animation frame for the radius var int RangeAniFPS ; // speed of light animation for the radius var int ColorAniActFrame ; // current light animation frame for colour var int ColorAniFPS ; // speed of light animation for colour var int SpotConeAngleDeg ; // angle of cone light source var int IsStatic ; // whether the source is static var int RangeAniSmooth ; // [UNUSED] var int RangeAniLoop ; // [UNUSED] var int ColorAniSmooth ; // allows soft transitions between colours var int ColorAniLoop ; // [UNUSED] var int IsTurnedOn ; // whether the light source is on var int LightQuality ; // source quality (when statically compiling light) (0 - high, 1 - medium, 2 - low) var int LightType ; // type of source (at static light compilation) (0 - point, 1 - cone) }; Externals: /// Returns zCVobLight object data /// /// @param vobLight vobLight object /// @return C_Light_Data of the light func C_Light_Data Vob_GetLightData ( var C_Vob vobLight ) {}; /// Sets the data of a zCVobLight object /// /// @param vobLight object to apply the light data to /// @param data C_Light_Data light data to be set func void Vob_SetLightData ( var C_Vob vobLight , var C_Light_Data data ) {}; /// Clears the list of animation colours for the light source /// /// @param vobLight light vob func void Vob_ClearLightAniList ( var C_Vob vobLight ) {}; /// Adds a color to the colour list /// /// @param vobLight object to apply the colour to /// @param col colour to be applied func void Vob_AddLightAniColor ( var C_Vob vobLight , var C_Color col ) {}; /// Adds a color to the colour list /// /// @param vobLight object to apply the colour to /// @param r red colour channel /// @param g green colour channel /// @param b blue colour channel func void Vob_AddLightAniColorRGB ( var C_Vob vobLight , var int r , var int g , var int b ) {};","title":"C_LIGHT_DATA"},{"location":"zengin/scripts/extenders/zParserExtender/helperclasses/#c_mob_data","text":"Represents data for the used oCMOB object class C_MOB_DATA { var string VisibleName ; // name shown above the object var int Hitpoints ; // number of hitpoints var int Damage ; // damage the object can cause var int IsDestroyed ; // if the object is destroyed var int Moveable ; // whether the object can be moved var int Takeable ; // whether the object can be taken var int FocusOverride ; // if the object will redefine focus in combat mode var int SndMat ; // object's material (0 - wood, 1 - stone, 2 - metal, 3 - skin, 4 - clay, 5 - glass) var string VisualDestroyed ; // model when the object is destroyed var string OwnerStr ; // name of the instance of the owner of the object var string OwnerGuildStr ; // name of the guild of the object var int Owner ; // instance of the owner var int OwnerGuild ; // guild instance var int FocusNameIndex ; // the script string of the displayed name }; /// Returns the data of the oCMOB object /// /// @param mob oCMOB object /// @return mob data func C_Mob_Data Vob_GetMobData ( var C_Vob mob ) {}; /// Sets the data of the oCMOB object /// /// @param mob oCMOB object /// @param data C_Mob_Data to be set func void Vob_SetMobData ( var C_Vob mob , var C_Mob_Data data ) {};","title":"C_MOB_DATA"},{"location":"zengin/scripts/extenders/zParserExtender/helperclasses/#c_mobinter_data","text":"Represents data for the interactive object oCMobInter class C_MOBINTER_DATA { var string TriggerTarget ; // object name which will be triggered by OnTrigger var string UseWithItem ; // name of the object instance that is needed for interaction var string Sceme ; // name of the scene that corresponds to the object and character animations var string ConditionFunc ; // scripting condition under which the interaction can be performed var string OnStateFuncName ; // the name pattern of the functions that will be called when the object changes the state var int State ; // the current state of the object var int State_num ; // number of object's states var int State_target // current state of the object var int Rewind ; // prohibits object updating var int MobStateAni ; // current animation of the object var int NpcStateAni ; // current character animation }; /// Returns the data of the oCMobInter object /// /// @param mobInter oCMobInter object /// @return MobInter_Data of the object func MobInter_Data Vob_GetMobInterData ( var C_Vob mobInter ) {}; /// Sets the data of the oCMobInter object /// /// @param mobInter oCMobInter object /// @param data MobInter_Data of the object func void Vob_SetMobInterData ( var C_Vob mobInter , var C_MobInter_Data data ) {};","title":"C_MOBINTER_DATA"},{"location":"zengin/scripts/extenders/zParserExtender/helperclasses/#c_moblockable_data","text":"Represents data for the locked interactive object oCMobLockable class C_MOBLOCKABLE_DATA { var int Locked ; // whether the object is locked var int AutoOpen ; // [UNUSED] var int PickLockNr ; // current rotation number var string KeyInstance ; // key instance name for the object var string PickLockStr ; // combination to open the object (\"LRRLR\") }; /// Returns the data of the oCMobLockable object /// /// @param mobLock oCMobLockable object /// @param data MobInter_Data of the object func C_MobLockable_Data Vob_GetMobInterData ( var C_Vob mobLock ) {}; /// Sets the data of the oCMobLockable object /// /// @param mobLock oCMobLockable object /// @param data C_MobLockable_Data of the object func void Vob_SetMobInterData ( var C_Vob mobLock , var C_MobLockable_Data data ) {};","title":"C_MOBLOCKABLE_DATA"},{"location":"zengin/scripts/extenders/zParserExtender/hooks/","text":"Hooking Daedalus \ud800\udf3e Daedalus hooking is one of the most powerful features of this plugin. Hooking is a mechanism that allows you to replace any scripted object with new one. To do thos, you must define a new object with the same type, name and in the same namespace . Hook/replacement will be performed only, if the MergeMode setting is set to true for the current script in the META block, or in the parameter of the same name in the .ini file of the mod. Warning If you forget to turn on the MergeMode , the compilation will fail with the redefinition error. When an object (instanc, function or variable) is hooked/replaced, the original one is available under the same name with the _old suffix ( PC_Hero -> PC_Hero_old ), this allows you to refer to the old object. Function hook example \ud800\udf3e void void ZS_Attack_Loop () { // if the enemy is a player and has no weapon, then // also sheath the weapon. if ( Npc_IsPlayer ( other ) && ! Npc_HasReadiedWeapon ( other )) { return LOOP_END ; }; // otherwise call the original function return ZS_Attack_Loop_Old (); }; This kind of substitution works for instances and variables too. Warning While hooking instances, you have to take care not to call the prototype. Prototype should be always changed back to the original class. This is wrong instance pc_hero ( Npc_Default ) { pc_hero_old (); name = \"Pepe\" ; }; This leads to a double call of prototype Npc_Default which is considered an unsafe practice with undefined behaviour. The correct way is to call it like this: instance pc_hero ( C_NPC ) // no prototype Npc_Default { pc_hero_old (); name = \"Pepe\" ; }; This way the prototype is called in the original function pc_hero_old() and not for the second time, when creating the new hooked instance. Dialogue hook example \ud800\udf3e The hooking mechanism is designed to introduce new dialogues into the game, as well as to replace old ones with hooks. The scripter can create new merchants, quests, dialogues, as well as attach svm phrases to them. All new or replaced dialogues will immediately become available, including from saves. In the event that new dialogs are disabled (plugin or script removed), the engine will continue to keep them in the save file, which will allow the dialogs to return at any time with the same state they were in the last time. Warning Currently not working as intended (I think). The old dialogue is still used and as a result you will end up with both the old and the new dialogue (unless you edit the old condition function). instance DIA_XARDAS_HELLO ( C_INFO ) { DIA_XARDAS_HELLO_old (); important = FALSE ; };","title":"Hooking"},{"location":"zengin/scripts/extenders/zParserExtender/hooks/#hooking-daedalus","text":"Daedalus hooking is one of the most powerful features of this plugin. Hooking is a mechanism that allows you to replace any scripted object with new one. To do thos, you must define a new object with the same type, name and in the same namespace . Hook/replacement will be performed only, if the MergeMode setting is set to true for the current script in the META block, or in the parameter of the same name in the .ini file of the mod. Warning If you forget to turn on the MergeMode , the compilation will fail with the redefinition error. When an object (instanc, function or variable) is hooked/replaced, the original one is available under the same name with the _old suffix ( PC_Hero -> PC_Hero_old ), this allows you to refer to the old object.","title":"Hooking Daedalus"},{"location":"zengin/scripts/extenders/zParserExtender/hooks/#function-hook-example","text":"void void ZS_Attack_Loop () { // if the enemy is a player and has no weapon, then // also sheath the weapon. if ( Npc_IsPlayer ( other ) && ! Npc_HasReadiedWeapon ( other )) { return LOOP_END ; }; // otherwise call the original function return ZS_Attack_Loop_Old (); }; This kind of substitution works for instances and variables too. Warning While hooking instances, you have to take care not to call the prototype. Prototype should be always changed back to the original class. This is wrong instance pc_hero ( Npc_Default ) { pc_hero_old (); name = \"Pepe\" ; }; This leads to a double call of prototype Npc_Default which is considered an unsafe practice with undefined behaviour. The correct way is to call it like this: instance pc_hero ( C_NPC ) // no prototype Npc_Default { pc_hero_old (); name = \"Pepe\" ; }; This way the prototype is called in the original function pc_hero_old() and not for the second time, when creating the new hooked instance.","title":"Function hook example"},{"location":"zengin/scripts/extenders/zParserExtender/hooks/#dialogue-hook-example","text":"The hooking mechanism is designed to introduce new dialogues into the game, as well as to replace old ones with hooks. The scripter can create new merchants, quests, dialogues, as well as attach svm phrases to them. All new or replaced dialogues will immediately become available, including from saves. In the event that new dialogs are disabled (plugin or script removed), the engine will continue to keep them in the save file, which will allow the dialogs to return at any time with the same state they were in the last time. Warning Currently not working as intended (I think). The old dialogue is still used and as a result you will end up with both the old and the new dialogue (unless you edit the old condition function). instance DIA_XARDAS_HELLO ( C_INFO ) { DIA_XARDAS_HELLO_old (); important = FALSE ; };","title":"Dialogue hook example"},{"location":"zengin/scripts/extenders/zParserExtender/injection/","text":"Daedalus Injection \ud800\udf3e Script injection is a process of injecting Daedalus scripts on runtime, without the need to recompile the scripts. This is essential for Union plugins that need to alter the scripts in a certain way, for hotfixes or just testing scripts without the need to recompile the whole .dat file. To inject a script, simply put a .d or .src file in Gothic/System/Autorun directory and run the game. Tip Automatic injection does not extend to nested directories in the Autorun directory directly, but you can put a .src file into Autorun directory and the rest into a subdirectory to keep a cleaner structure. Scripts in subdirectories can be accessed in two ways They are specified in a .src file The script file is an API script API script \ud800\udf3e API scripts are .d files placed in Autorun subdirectories and are used as a dependency. It is assumed, that the API script is not called on its own (or from a .src ) file, but is called using the dependency keyword After in one of the injected script files' META block. These scripts are meant to contain ready-made solution that need to be used by many other scripts as a dependency. Warning If the file specified in the After tag in the META block does not exist, the current file will not be parsed and injected, since the dependency is missing, it would fail. Due to this it is best to ship the dependency in the Autorun directory, even if it comes from a different plugin.","title":"Daedalus Injection"},{"location":"zengin/scripts/extenders/zParserExtender/injection/#daedalus-injection","text":"Script injection is a process of injecting Daedalus scripts on runtime, without the need to recompile the scripts. This is essential for Union plugins that need to alter the scripts in a certain way, for hotfixes or just testing scripts without the need to recompile the whole .dat file. To inject a script, simply put a .d or .src file in Gothic/System/Autorun directory and run the game. Tip Automatic injection does not extend to nested directories in the Autorun directory directly, but you can put a .src file into Autorun directory and the rest into a subdirectory to keep a cleaner structure. Scripts in subdirectories can be accessed in two ways They are specified in a .src file The script file is an API script","title":"Daedalus Injection"},{"location":"zengin/scripts/extenders/zParserExtender/injection/#api-script","text":"API scripts are .d files placed in Autorun subdirectories and are used as a dependency. It is assumed, that the API script is not called on its own (or from a .src ) file, but is called using the dependency keyword After in one of the injected script files' META block. These scripts are meant to contain ready-made solution that need to be used by many other scripts as a dependency. Warning If the file specified in the After tag in the META block does not exist, the current file will not be parsed and injected, since the dependency is missing, it would fail. Due to this it is best to ship the dependency in the Autorun directory, even if it comes from a different plugin.","title":"API script"},{"location":"zengin/scripts/extenders/zParserExtender/namespaces/","text":"Namespaces \ud800\udf3e zParserExtender also implements namespaces. Namespaces ensure that all symbols inside the namespace are unique. Defining a namespace \ud800\udf3e To define a namespace the new keyword namespace is used. Regular scripts Injectable scripts namespace zTestNamespace { var int var01 ; func void func01 () { }; }; META { Namespace = zTestNamespace ; }; var int var01 ; func void func01 () { }; Namespace nesting \ud800\udf3e Namespaces can be nested for finer control. In case of injection, the namespace defined in META is applied to all code inside the script. To go deeper into the namespaces you use the namespace operator : . This code shows function with the same name within three different namespaces. The call in GameInit is made from the global namespace. namespace zTestNamespace01 { func void func01 () { }; }; namespace zTestNamespace02 { func void func01 () { }; }; namespace zTestNamespace03 { namespace zTestNamespace04 { func void func01 () { }; }; }; func event GameInit () { // In this case, the reference is from global namespace to zTestNamespace zTestNamespace01 : func01 (); zTestNamespace02 : func01 (); zTestNamespace03 : zTestNamespace04 : func01 (); }; Namespace traversal \ud800\udf3e To go up a namespace tree you use the namespace operator : without specifying a namespace. Number of operators determines how many levels you go up. Exiting nested namespaces func void func01 () { Hlp_MessageBox ( \"#1\" ); }; namespace zTestNamespace01 { func void func01 () { Hlp_MessageBox ( \"#2\" ); }; namespace zTestNamespace02 { func void func01 () { Hlp_MessageBox ( \"#3\" ); }; namespace zTestNamespace03 { func void func01 () { Hlp_MessageBox ( \"#4\" ); }; func event GameInit () { ::: func01 (); // Calls the function 3 levels up :: func01 (); // Calls the function 2 levels up : func01 (); // Calls the function 1 level up func01 (); // Calls the function from the current namespace }; }; }; }; Optional namespace specification \ud800\udf3e There are three cases where the namespace prefix is optional Shares the same namespace If the funciton is in higher level namespace If using is psecified in the META block namespace zTestNamespace01 { func void func01 () { Hlp_MessageBox ( \"#1\" ); }; func event GameInit () { // Function call from the current namespace func01 (); }; }; func void func01 () { Hlp_MessageBox ( \"#1\" ); }; namespace zTestNamespace01 { func void func01 () { Hlp_MessageBox ( \"#2\" ); }; namespace zTestNamespace02 { func event GameInit () { // Function call from the global namespace func01 (); }; }; }; META { using = zTestNamespace01 ; }; namespace zTestNamespace01 { func void func01 () { Hlp_MessageBox ( \"#1\" ); }; }; func event GameInit () { // Calls the function with the namespace specified in the META block func01 (); }; Global namespace and Daedalus hooking \ud800\udf3e Namespace can not only be defined to an existing symbol, but also to define new ones. Next code example shows how to implement a hook to a global instance. namespace zTestNamespace01 { const string Var01 = \"New instance name\" ; // Hooking the global instance instance : ItAr_Pir_L_Addon ( C_Item ) { ItAr_Pir_L_Addon_Old (); name = Var01 ; }; }; To hook and object not only the signature, but also the namespace has to match. To hook an instance from a different space it is syntactically allowed to explicitly specify to which namespace the object will belong. This means that to hook instance ItAr_Pir_L_Addon from the namespace zTestNamespace01 to a global namespace, you have to refer to the global namespace using the namespace operator : . Since the function will be defined globally (as every symbol in ZenGin), it will be a part of the zTestNamespace01 , that means that all functions will be local to this namespace.","title":"Namespaces"},{"location":"zengin/scripts/extenders/zParserExtender/namespaces/#namespaces","text":"zParserExtender also implements namespaces. Namespaces ensure that all symbols inside the namespace are unique.","title":"Namespaces"},{"location":"zengin/scripts/extenders/zParserExtender/namespaces/#defining-a-namespace","text":"To define a namespace the new keyword namespace is used. Regular scripts Injectable scripts namespace zTestNamespace { var int var01 ; func void func01 () { }; }; META { Namespace = zTestNamespace ; }; var int var01 ; func void func01 () { };","title":"Defining a namespace"},{"location":"zengin/scripts/extenders/zParserExtender/namespaces/#namespace-nesting","text":"Namespaces can be nested for finer control. In case of injection, the namespace defined in META is applied to all code inside the script. To go deeper into the namespaces you use the namespace operator : . This code shows function with the same name within three different namespaces. The call in GameInit is made from the global namespace. namespace zTestNamespace01 { func void func01 () { }; }; namespace zTestNamespace02 { func void func01 () { }; }; namespace zTestNamespace03 { namespace zTestNamespace04 { func void func01 () { }; }; }; func event GameInit () { // In this case, the reference is from global namespace to zTestNamespace zTestNamespace01 : func01 (); zTestNamespace02 : func01 (); zTestNamespace03 : zTestNamespace04 : func01 (); };","title":"Namespace nesting"},{"location":"zengin/scripts/extenders/zParserExtender/namespaces/#namespace-traversal","text":"To go up a namespace tree you use the namespace operator : without specifying a namespace. Number of operators determines how many levels you go up. Exiting nested namespaces func void func01 () { Hlp_MessageBox ( \"#1\" ); }; namespace zTestNamespace01 { func void func01 () { Hlp_MessageBox ( \"#2\" ); }; namespace zTestNamespace02 { func void func01 () { Hlp_MessageBox ( \"#3\" ); }; namespace zTestNamespace03 { func void func01 () { Hlp_MessageBox ( \"#4\" ); }; func event GameInit () { ::: func01 (); // Calls the function 3 levels up :: func01 (); // Calls the function 2 levels up : func01 (); // Calls the function 1 level up func01 (); // Calls the function from the current namespace }; }; }; };","title":"Namespace traversal"},{"location":"zengin/scripts/extenders/zParserExtender/namespaces/#optional-namespace-specification","text":"There are three cases where the namespace prefix is optional Shares the same namespace If the funciton is in higher level namespace If using is psecified in the META block namespace zTestNamespace01 { func void func01 () { Hlp_MessageBox ( \"#1\" ); }; func event GameInit () { // Function call from the current namespace func01 (); }; }; func void func01 () { Hlp_MessageBox ( \"#1\" ); }; namespace zTestNamespace01 { func void func01 () { Hlp_MessageBox ( \"#2\" ); }; namespace zTestNamespace02 { func event GameInit () { // Function call from the global namespace func01 (); }; }; }; META { using = zTestNamespace01 ; }; namespace zTestNamespace01 { func void func01 () { Hlp_MessageBox ( \"#1\" ); }; }; func event GameInit () { // Calls the function with the namespace specified in the META block func01 (); };","title":"Optional namespace specification"},{"location":"zengin/scripts/extenders/zParserExtender/namespaces/#global-namespace-and-daedalus-hooking","text":"Namespace can not only be defined to an existing symbol, but also to define new ones. Next code example shows how to implement a hook to a global instance. namespace zTestNamespace01 { const string Var01 = \"New instance name\" ; // Hooking the global instance instance : ItAr_Pir_L_Addon ( C_Item ) { ItAr_Pir_L_Addon_Old (); name = Var01 ; }; }; To hook and object not only the signature, but also the namespace has to match. To hook an instance from a different space it is syntactically allowed to explicitly specify to which namespace the object will belong. This means that to hook instance ItAr_Pir_L_Addon from the namespace zTestNamespace01 to a global namespace, you have to refer to the global namespace using the namespace operator : . Since the function will be defined globally (as every symbol in ZenGin), it will be a part of the zTestNamespace01 , that means that all functions will be local to this namespace.","title":"Global namespace and Daedalus hooking"},{"location":"zengin/scripts/extenders/zParserExtender/other/","text":"Other functions of the extender \ud800\udf3e ini parameters \ud800\udf3e The choice of ini file depends on how the game was launched. If it was launched from Gothic.exe, then the parameters will be read from SystemPack.ini . If it was launched through GothicStarter.exe, then they will be read from the ini of the mod. [zParserExtender] LoadScript(obsolete) = ;specifies a parser-script format script to run the scripts. The parameter is currently invalid. MergeMode = True ;specifies whether injections will produce hooks. CompileDat = False ;Determines if a copy of DAT file which has been modified by injection will be created. CompileOU = False ;determines if a copy of an injection-modified OU file will be created. NativeWhile = False ;Determines if a WHILE loop will be compiled. Defaults to False (for Ninja compatibility). MessagesLevel = 1 ;sets the output level. The higher the level, the more information will be printed to the debug console. StringIndexingMode = -1 ;defines string indexing mode (see string indexing). Default value is -1. ;Default = -1 - The default mode for the moment is Repair mode. ;Disabled = 0 - Do nothing with the indices. ;TopSymbol = 1 - The plugin finds the uppermost unnamed string and sets a counter for it. ;Repair = 2 - The plugin goes through the whole string table and, if the indexing order is broken, puts the correct names. The counter is set on the basis of the search. MARVIN console commands \ud800\udf3e zParserExtender adds console commands that save copies of the .dat files with the injected code. Warning If the mod uses Ikarus, the CompileDat option (in the .ini file) should be used, since a fatal error may occur whe using the command. Parser SaveDat OU - exports OU . Edited . bin Parser SaveDat Game - exports Gothic . Edited . dat Parser SaveDat SFX - exports SFX . Edited . dat Parser SaveDat PFX - exports ParticleFX . Edited . dat Parser SaveDat VFX - exports VisualFX . Edited . dat Parser SaveDat Camera - exports Camera . Edited . dat Parser SaveDat Menu - exports Menu . Edited . dat Parser SaveDat Music - exports Music . Edited . dat Parser Export Stringlist - exports the full string table to Scripts \\ Exports \\ StringList . d Launch options \ud800\udf3e Command line parameters can be passed to the game's exe via the command line or using GothicStarter_Mod. - zReparse_OU - parses and creates OU . bin - zReparse_Game - parses and creates Gothic . dat - zReparse_SFX - parses and creates SFX . dat - zReparse_PFX - parses and creates ParticleFX . dat - zReparse_VFX - parses and creates VisualFX . dat - zReparse_Camera - parses and creates Camera . dat - zReparse_Menu - parses and creates Menu . dat - zReparse_Music - parses and creates Music . dat Note If you want to compile OU, you also have to include the Game parameter -zReparse_Game -zReparse_OU Const array access \ud800\udf3e The original zParser doesn't allow direct access to const string arrays. zParserExtender allows you to do so. Example: func event GameInit () { Hlp_MessageBox ( TXT_INV_CAT [ 4 ]); // Prints \"Artifacts\" }; Other engine fixes \ud800\udf3e When creating an item instance, the instance is placed into the global item instance On DAT file load, the engine restores the original symbol hierarchy When loading a save, the engine now skips unkonw symbols, insted of crashing","title":"Other features"},{"location":"zengin/scripts/extenders/zParserExtender/other/#other-functions-of-the-extender","text":"","title":"Other functions of the extender"},{"location":"zengin/scripts/extenders/zParserExtender/other/#ini-parameters","text":"The choice of ini file depends on how the game was launched. If it was launched from Gothic.exe, then the parameters will be read from SystemPack.ini . If it was launched through GothicStarter.exe, then they will be read from the ini of the mod. [zParserExtender] LoadScript(obsolete) = ;specifies a parser-script format script to run the scripts. The parameter is currently invalid. MergeMode = True ;specifies whether injections will produce hooks. CompileDat = False ;Determines if a copy of DAT file which has been modified by injection will be created. CompileOU = False ;determines if a copy of an injection-modified OU file will be created. NativeWhile = False ;Determines if a WHILE loop will be compiled. Defaults to False (for Ninja compatibility). MessagesLevel = 1 ;sets the output level. The higher the level, the more information will be printed to the debug console. StringIndexingMode = -1 ;defines string indexing mode (see string indexing). Default value is -1. ;Default = -1 - The default mode for the moment is Repair mode. ;Disabled = 0 - Do nothing with the indices. ;TopSymbol = 1 - The plugin finds the uppermost unnamed string and sets a counter for it. ;Repair = 2 - The plugin goes through the whole string table and, if the indexing order is broken, puts the correct names. The counter is set on the basis of the search.","title":"ini parameters"},{"location":"zengin/scripts/extenders/zParserExtender/other/#marvin-console-commands","text":"zParserExtender adds console commands that save copies of the .dat files with the injected code. Warning If the mod uses Ikarus, the CompileDat option (in the .ini file) should be used, since a fatal error may occur whe using the command. Parser SaveDat OU - exports OU . Edited . bin Parser SaveDat Game - exports Gothic . Edited . dat Parser SaveDat SFX - exports SFX . Edited . dat Parser SaveDat PFX - exports ParticleFX . Edited . dat Parser SaveDat VFX - exports VisualFX . Edited . dat Parser SaveDat Camera - exports Camera . Edited . dat Parser SaveDat Menu - exports Menu . Edited . dat Parser SaveDat Music - exports Music . Edited . dat Parser Export Stringlist - exports the full string table to Scripts \\ Exports \\ StringList . d","title":"MARVIN console commands"},{"location":"zengin/scripts/extenders/zParserExtender/other/#launch-options","text":"Command line parameters can be passed to the game's exe via the command line or using GothicStarter_Mod. - zReparse_OU - parses and creates OU . bin - zReparse_Game - parses and creates Gothic . dat - zReparse_SFX - parses and creates SFX . dat - zReparse_PFX - parses and creates ParticleFX . dat - zReparse_VFX - parses and creates VisualFX . dat - zReparse_Camera - parses and creates Camera . dat - zReparse_Menu - parses and creates Menu . dat - zReparse_Music - parses and creates Music . dat Note If you want to compile OU, you also have to include the Game parameter -zReparse_Game -zReparse_OU","title":"Launch options"},{"location":"zengin/scripts/extenders/zParserExtender/other/#const-array-access","text":"The original zParser doesn't allow direct access to const string arrays. zParserExtender allows you to do so. Example: func event GameInit () { Hlp_MessageBox ( TXT_INV_CAT [ 4 ]); // Prints \"Artifacts\" };","title":"Const array access"},{"location":"zengin/scripts/extenders/zParserExtender/other/#other-engine-fixes","text":"When creating an item instance, the instance is placed into the global item instance On DAT file load, the engine restores the original symbol hierarchy When loading a save, the engine now skips unkonw symbols, insted of crashing","title":"Other engine fixes"},{"location":"zengin/scripts/extenders/zParserExtender/testelse/","text":"Test-else statements \ud800\udf3e The test-else bind statement can be used to define sections of code to be compiled. If the code is within the boundaries of the inactive test-else branch, it will not be compiled. This operator can take values as input that are converted to logical values. For example, if an object is passed as an argument, the parser will check for its existence. If it is an engine tag, it will return the result of matching the current engine with the tag: Valid values: instance name - PC_HERO , ItMi_Gold , ... engine tag - G1 , G1A , G2 , G2A Steam Overlay activity - Steam The result can be combined from several arguments. Round brackets () ca be used to specify priority and expressions support the logical negation operator ! , logical AND && and OR || . The operator can be used anywhere in the script file. It is syntactically similar to if else statement, but curly braces {} can be omitted for single-line operations. For example: SteamActivated constant is set only when Steam is active test Steam var const SteamActivated = 1 ; Example of a logical expression with an else branch test SteamActivated && G2A { // TODO } else { // TODO }","title":"Test-else binding"},{"location":"zengin/scripts/extenders/zParserExtender/testelse/#test-else-statements","text":"The test-else bind statement can be used to define sections of code to be compiled. If the code is within the boundaries of the inactive test-else branch, it will not be compiled. This operator can take values as input that are converted to logical values. For example, if an object is passed as an argument, the parser will check for its existence. If it is an engine tag, it will return the result of matching the current engine with the tag: Valid values: instance name - PC_HERO , ItMi_Gold , ... engine tag - G1 , G1A , G2 , G2A Steam Overlay activity - Steam The result can be combined from several arguments. Round brackets () ca be used to specify priority and expressions support the logical negation operator ! , logical AND && and OR || . The operator can be used anywhere in the script file. It is syntactically similar to if else statement, but curly braces {} can be omitted for single-line operations. For example: SteamActivated constant is set only when Steam is active test Steam var const SteamActivated = 1 ; Example of a logical expression with an else branch test SteamActivated && G2A { // TODO } else { // TODO }","title":"Test-else statements"},{"location":"zengin/scripts/extenders/zParserExtender/while/","text":"Native WHILE loop \ud800\udf3e Just like Ikarus zParserExtender implements a while loop. var int value ; value = 10 ; while ( value > 0 ) { if ( value == 8 ) { continue ; }; if ( value == 2 ) { break ; }; }; Note To activate while it is necessary to set NetiveWhile setting in SystemPack.ini [ZPARSE_EXTENDER] NativeWhile = true Compiled while loop works in vanilla engine without the plugin.","title":"While loop"},{"location":"zengin/scripts/extenders/zParserExtender/while/#native-while-loop","text":"Just like Ikarus zParserExtender implements a while loop. var int value ; value = 10 ; while ( value > 0 ) { if ( value == 8 ) { continue ; }; if ( value == 2 ) { break ; }; }; Note To activate while it is necessary to set NetiveWhile setting in SystemPack.ini [ZPARSE_EXTENDER] NativeWhile = true Compiled while loop works in vanilla engine without the plugin.","title":"Native WHILE loop"},{"location":"zengin/scripts/extenders/zParserExtender/examples/signposts/","text":"Sign post teleportation \ud800\udf3e This is a short \"problem solving\" example, where we try to demonstrate the power of Daedalus injection using zParserExtender . GaroK asked me, if there is a way to teleport to all of the sign posts in Khorinis to gather information for a Gothic wiki article. The goal is to introduce a function, that will teleport you to every signpost in Khorinis with the press of a button. The problem \ud800\udf3e In ZenGin you can teleport to named game objects with the goto vob {vobname} command. But since the signposts do not have a vobname defined, I had to figure out a different approach. ASCII ZEN \ud800\udf3e We want to get all of the signposts position from Khorinis. The game world was loaded into one of the available world editor, found one of the signposts and noted the visual which dictates the model of the in-game object nw_misc_sign_01.3DS . Alternatively, you can find the standard vanilla objects from both games on this website . Next, the world was saved as a ASCII ZEN format. This allows us to write a macro to search for all instances of objects with a specific visual and extract the position vector. One signpost object [% oCMOB:zCVob 47105 317] pack = int:0 presetName = string: bbox3DWS = rawFloat:7564.8291 127.361191 -80.5309067 7611.52441 377.422913 1.67681122 trafoOSToWSRot = raw:73e1673f9c4ec33b15efd8be4465d7bba0fe7f3f30ea7137e5edd83eecaa353bb7e2673f trafoOSToWSPos = vec3:7588.17627 252.391052 -39.4283791 vobName = string: visual = string:NW_MISC_SIGN_01.3DS showVisual = bool:1 visualCamAlign = enum:0 visualAniMode = enum:0 visualAniModeStrength = float:0 vobFarClipZScale = float:1 cdStatic = bool:1 cdDyn = bool:1 staticVob = bool:1 dynShadow = enum:0 zbias = int:0 isAmbient = bool:0 [visual zCProgMeshProto 53505 318] [] [ai % 0 0] [] focusName = string:MOBNAME_INCITY02 hitpoints = int:10 damage = int:0 moveable = bool:0 takeable = bool:0 focusOverride = bool:0 soundMaterial = enum:0 visualDestroyed = string: owner = string: ownerGuild = string: isDestroyed = bool:0 [] Tip You can also see that the focusName has a MOBNAME_INCITY02 string constant. This constant is defined in the scripts and its content is used as the focus name. const string MOBNAME_INCITY02 = \"To Marketplace\" ; The injectable script \ud800\udf3e As it is an injectable script, we have to specify the META tag. Lets tell zParseExtender to insert the this code into the game parser. META { Parser = Game }; We want to teleport the player, for this we will need the C_Position and C_Vob_Data classes. class C_Position { var int X ; // X coordinate var int Y ; // Y coordinate var int Z ; // Z coordinate }; class C_VOB_DATA { var string Name ; // object name var float VisualAlpha ; // object's transparency 0.0 - 1.0 var int ShowVisual ; // display the mode var int DrawBBox3D ; // show objects bounding box var int VisualAlphaEnabled ; // enables objects transparency var int PhysicsEnabled ; // enables object's physics var int IgnoredByTraceRay ; // allow any object collisions var int CollDetectionStatic ; // allow collision with static world polygons var int CollDetectionDynamic ; // allow collision with dynamic world objects var int CastDynShadow ; // display shadow of the object var int LightColorStatDirty ; // allow static liging of the object var int LightColorDynDirty ; // allow dynamic lighing of the object var int SleepingMode ; // sets object's activity mode (0 - inactive, 1 - active, 2 - AI only) var int DontWriteIntoArchive ; // turns of the serialization of this object to the save file }; It turns out there is 54 instances of objects with the desired visual. Lets define const int NUM_OF_SIGNS = 54 and a const int MAX_COORDS = 3 * NUM_OF_SIGNS - we will store 3 times 54 integers - for every signpost a x , y and z coordinate. And lastly a const int array containing all of the positions. // Number of signs we want to jump to const int NUM_OF_SIGNS = 54 ; const int MAX_COORDS = 3 * NUM_OF_SIGNS ; const int sign_coordinates [ MAX_COORDS ] = { 11974 , 309 , 6815 , 12024 , 310 , 6778 , 12411 , 1668 , -22495 , 19491 , 1281 , 1669 , 19563 , 1281 , 1687 , 20294 , 2058 , 12487 , 20324 , 2058 , 12419 , 21917 , 2900 , -22751 , 2600 , -57 , -4351 , 26695 , 2419 , 4308 , 26770 , 2418 , 4319 , 26978 , 2937 , 6130 , 27015 , 2936 , 6104 , 27049 , 2937 , 6159 , 2964 , 2142 , 14424 , 31383 , 3896 , 4699 , 31427 , 3896 , 4640 , 35368 , 3870 , -4374 , 35435 , 3870 , -4355 , 35437 , 3871 , -4399 , 36205 , 3333 , -27186 , 37774 , 3875 , -501 , 37812 , 3874 , -469 , 37849 , 3874 , -512 , 38291 , 3732 , -6699 , 39276 , 3926 , -3357 , 39307 , 3924 , -3313 , 39351 , 3924 , -3359 , 39435 , 4350 , 10902 , 39458 , 4350 , 10827 , 40932 , 3861 , -3054 , 42454 , 2838 , -19437 , 5297 , 387 , -2145 , 5358 , 387 , -2184 , 5362 , 387 , -2128 , 54006 , 1723 , -10316 , 54035 , 1723 , -10387 , 551 , -62 , -1820 , 61080 , 2132 , -11622 , 61155 , 2132 , -11625 , 6408 , 392 , 3598 , 6432 , 393 , 3652 , 7000 , 387 , -1482 , 73439 , 3341 , -11307 , 7588 , 252 , -39 , 7590 , 252 , -109 , 7642 , 253 , -83 , 7713 , 387 , -4782 , 7758 , 386 , -4775 , 7776 , 388 , -4811 , 8154 , 1206 , -17022 , 8855 , 395 , -2402 , 9704 , 393 , 5129 , 9738 , 392 , 5108 }; Next define a built in event GameLoop function, to check for a pressed key. If the key U is pressed, the jump_to_sign function is called. // check for pressed U button every frame func event GameLoop () { // if U is toggled, run the function if ( Hlp_KeyToggled ( KEY_U )) { jump_to_sign (); }; }; Let's look at the jump_to_sign function now. This function is called on every U key press and go through all of the signposts and teleport the player to them. At the start of the function we check if the index is not out of bounds, if it is, set it back to 0 and start over. // if we reached the end, start over if ( tp_index >= NUM_OF_SIGNS ) { tp_index = 0 ; }; Notice the use of Str_Format function for the formatted output. // give information to the player Print ( Str_Format ( \"Sign %i/%i\" , tp_index + 1 , NUM_OF_SIGNS )); var C_Position pos ; pos = Vob_GetVobPosition ( hero ); var C_Vob_Data data ; data = Vob_GetVobData ( hero ); Daedalus does not allow array access with variables (only constants and literals), to access the coordinate array we use a selection of parser functions. First we get the game parser ID. Then we can use the Par_GetSymbolValueIntArray to access the the sign_coordinates array and assign the coordinates to the pos variable. // get parser ID for the GAME parser var int game_par_id ; game_par_id = Par_GetParserID ( \"game\" ); // get parser ID of the array var int arr_id ; arr_id = Par_GetSymbolID ( game_par_id , \"sign_coordinates\" ); // access the coordinates from above array pos . x = Par_GetSymbolValueIntArray ( game_par_id , arr_id , tp_index * 3 ); pos . y = Par_GetSymbolValueIntArray ( game_par_id , arr_id , tp_index * 3 + 1 ); pos . z = Par_GetSymbolValueIntArray ( game_par_id , arr_id , tp_index * 3 + 2 ); And now comes the big trick. If you try to just change the position the dynamic and static collision is going to stop you at the first wall, tree or a mountain. To disable it, we can use the C_Vob_Data helper class, get players data, and disable both the static a dynamic collision, first we create a backup of the values, just so we can restore them back after the teleport. // backup original collision detection var int dyn ; dyn = data . CollDetectionDynamic ; var int stat ; stat = data . CollDetectionStatic ; // turn off collision detection data . CollDetectionDynamic = 0 ; data . CollDetectionStatic = 0 ; Lets apply the changed data to the player and edit the position. // apply the edited data to player Vob_SetVobData ( hero , data ); // move the player Vob_SetVobPosition ( hero , pos ); Restore the collision detection data from the backup we made and set it. // restore collision detection data . CollDetectionDynamic = dyn ; data . CollDetectionStatic = stat ; // apply the edited data to player Vob_SetVobData ( hero , data ); Finally we advance the index to jump to another singpost. // advance the index tp_index += 1 ;","title":"Sign post example"},{"location":"zengin/scripts/extenders/zParserExtender/examples/signposts/#sign-post-teleportation","text":"This is a short \"problem solving\" example, where we try to demonstrate the power of Daedalus injection using zParserExtender . GaroK asked me, if there is a way to teleport to all of the sign posts in Khorinis to gather information for a Gothic wiki article. The goal is to introduce a function, that will teleport you to every signpost in Khorinis with the press of a button.","title":"Sign post teleportation"},{"location":"zengin/scripts/extenders/zParserExtender/examples/signposts/#the-problem","text":"In ZenGin you can teleport to named game objects with the goto vob {vobname} command. But since the signposts do not have a vobname defined, I had to figure out a different approach.","title":"The problem"},{"location":"zengin/scripts/extenders/zParserExtender/examples/signposts/#ascii-zen","text":"We want to get all of the signposts position from Khorinis. The game world was loaded into one of the available world editor, found one of the signposts and noted the visual which dictates the model of the in-game object nw_misc_sign_01.3DS . Alternatively, you can find the standard vanilla objects from both games on this website . Next, the world was saved as a ASCII ZEN format. This allows us to write a macro to search for all instances of objects with a specific visual and extract the position vector. One signpost object [% oCMOB:zCVob 47105 317] pack = int:0 presetName = string: bbox3DWS = rawFloat:7564.8291 127.361191 -80.5309067 7611.52441 377.422913 1.67681122 trafoOSToWSRot = raw:73e1673f9c4ec33b15efd8be4465d7bba0fe7f3f30ea7137e5edd83eecaa353bb7e2673f trafoOSToWSPos = vec3:7588.17627 252.391052 -39.4283791 vobName = string: visual = string:NW_MISC_SIGN_01.3DS showVisual = bool:1 visualCamAlign = enum:0 visualAniMode = enum:0 visualAniModeStrength = float:0 vobFarClipZScale = float:1 cdStatic = bool:1 cdDyn = bool:1 staticVob = bool:1 dynShadow = enum:0 zbias = int:0 isAmbient = bool:0 [visual zCProgMeshProto 53505 318] [] [ai % 0 0] [] focusName = string:MOBNAME_INCITY02 hitpoints = int:10 damage = int:0 moveable = bool:0 takeable = bool:0 focusOverride = bool:0 soundMaterial = enum:0 visualDestroyed = string: owner = string: ownerGuild = string: isDestroyed = bool:0 [] Tip You can also see that the focusName has a MOBNAME_INCITY02 string constant. This constant is defined in the scripts and its content is used as the focus name. const string MOBNAME_INCITY02 = \"To Marketplace\" ;","title":"ASCII ZEN"},{"location":"zengin/scripts/extenders/zParserExtender/examples/signposts/#the-injectable-script","text":"As it is an injectable script, we have to specify the META tag. Lets tell zParseExtender to insert the this code into the game parser. META { Parser = Game }; We want to teleport the player, for this we will need the C_Position and C_Vob_Data classes. class C_Position { var int X ; // X coordinate var int Y ; // Y coordinate var int Z ; // Z coordinate }; class C_VOB_DATA { var string Name ; // object name var float VisualAlpha ; // object's transparency 0.0 - 1.0 var int ShowVisual ; // display the mode var int DrawBBox3D ; // show objects bounding box var int VisualAlphaEnabled ; // enables objects transparency var int PhysicsEnabled ; // enables object's physics var int IgnoredByTraceRay ; // allow any object collisions var int CollDetectionStatic ; // allow collision with static world polygons var int CollDetectionDynamic ; // allow collision with dynamic world objects var int CastDynShadow ; // display shadow of the object var int LightColorStatDirty ; // allow static liging of the object var int LightColorDynDirty ; // allow dynamic lighing of the object var int SleepingMode ; // sets object's activity mode (0 - inactive, 1 - active, 2 - AI only) var int DontWriteIntoArchive ; // turns of the serialization of this object to the save file }; It turns out there is 54 instances of objects with the desired visual. Lets define const int NUM_OF_SIGNS = 54 and a const int MAX_COORDS = 3 * NUM_OF_SIGNS - we will store 3 times 54 integers - for every signpost a x , y and z coordinate. And lastly a const int array containing all of the positions. // Number of signs we want to jump to const int NUM_OF_SIGNS = 54 ; const int MAX_COORDS = 3 * NUM_OF_SIGNS ; const int sign_coordinates [ MAX_COORDS ] = { 11974 , 309 , 6815 , 12024 , 310 , 6778 , 12411 , 1668 , -22495 , 19491 , 1281 , 1669 , 19563 , 1281 , 1687 , 20294 , 2058 , 12487 , 20324 , 2058 , 12419 , 21917 , 2900 , -22751 , 2600 , -57 , -4351 , 26695 , 2419 , 4308 , 26770 , 2418 , 4319 , 26978 , 2937 , 6130 , 27015 , 2936 , 6104 , 27049 , 2937 , 6159 , 2964 , 2142 , 14424 , 31383 , 3896 , 4699 , 31427 , 3896 , 4640 , 35368 , 3870 , -4374 , 35435 , 3870 , -4355 , 35437 , 3871 , -4399 , 36205 , 3333 , -27186 , 37774 , 3875 , -501 , 37812 , 3874 , -469 , 37849 , 3874 , -512 , 38291 , 3732 , -6699 , 39276 , 3926 , -3357 , 39307 , 3924 , -3313 , 39351 , 3924 , -3359 , 39435 , 4350 , 10902 , 39458 , 4350 , 10827 , 40932 , 3861 , -3054 , 42454 , 2838 , -19437 , 5297 , 387 , -2145 , 5358 , 387 , -2184 , 5362 , 387 , -2128 , 54006 , 1723 , -10316 , 54035 , 1723 , -10387 , 551 , -62 , -1820 , 61080 , 2132 , -11622 , 61155 , 2132 , -11625 , 6408 , 392 , 3598 , 6432 , 393 , 3652 , 7000 , 387 , -1482 , 73439 , 3341 , -11307 , 7588 , 252 , -39 , 7590 , 252 , -109 , 7642 , 253 , -83 , 7713 , 387 , -4782 , 7758 , 386 , -4775 , 7776 , 388 , -4811 , 8154 , 1206 , -17022 , 8855 , 395 , -2402 , 9704 , 393 , 5129 , 9738 , 392 , 5108 }; Next define a built in event GameLoop function, to check for a pressed key. If the key U is pressed, the jump_to_sign function is called. // check for pressed U button every frame func event GameLoop () { // if U is toggled, run the function if ( Hlp_KeyToggled ( KEY_U )) { jump_to_sign (); }; }; Let's look at the jump_to_sign function now. This function is called on every U key press and go through all of the signposts and teleport the player to them. At the start of the function we check if the index is not out of bounds, if it is, set it back to 0 and start over. // if we reached the end, start over if ( tp_index >= NUM_OF_SIGNS ) { tp_index = 0 ; }; Notice the use of Str_Format function for the formatted output. // give information to the player Print ( Str_Format ( \"Sign %i/%i\" , tp_index + 1 , NUM_OF_SIGNS )); var C_Position pos ; pos = Vob_GetVobPosition ( hero ); var C_Vob_Data data ; data = Vob_GetVobData ( hero ); Daedalus does not allow array access with variables (only constants and literals), to access the coordinate array we use a selection of parser functions. First we get the game parser ID. Then we can use the Par_GetSymbolValueIntArray to access the the sign_coordinates array and assign the coordinates to the pos variable. // get parser ID for the GAME parser var int game_par_id ; game_par_id = Par_GetParserID ( \"game\" ); // get parser ID of the array var int arr_id ; arr_id = Par_GetSymbolID ( game_par_id , \"sign_coordinates\" ); // access the coordinates from above array pos . x = Par_GetSymbolValueIntArray ( game_par_id , arr_id , tp_index * 3 ); pos . y = Par_GetSymbolValueIntArray ( game_par_id , arr_id , tp_index * 3 + 1 ); pos . z = Par_GetSymbolValueIntArray ( game_par_id , arr_id , tp_index * 3 + 2 ); And now comes the big trick. If you try to just change the position the dynamic and static collision is going to stop you at the first wall, tree or a mountain. To disable it, we can use the C_Vob_Data helper class, get players data, and disable both the static a dynamic collision, first we create a backup of the values, just so we can restore them back after the teleport. // backup original collision detection var int dyn ; dyn = data . CollDetectionDynamic ; var int stat ; stat = data . CollDetectionStatic ; // turn off collision detection data . CollDetectionDynamic = 0 ; data . CollDetectionStatic = 0 ; Lets apply the changed data to the player and edit the position. // apply the edited data to player Vob_SetVobData ( hero , data ); // move the player Vob_SetVobPosition ( hero , pos ); Restore the collision detection data from the backup we made and set it. // restore collision detection data . CollDetectionDynamic = dyn ; data . CollDetectionStatic = stat ; // apply the edited data to player Vob_SetVobData ( hero , data ); Finally we advance the index to jump to another singpost. // advance the index tp_index += 1 ;","title":"The injectable script"},{"location":"zengin/scripts/extenders/zParserExtender/externals/","text":"Externals \ud800\udf3e External functions are Daedalus functions (defined in the engine itself) used to interface with the enigne. zParseExtender adds a lot of new functions that help scripters to interface with the engine in more ways, that was not possible before (without script extenders such as Ikarus and LeGo). The external functions are split into categories String functions Menu function Log function Event function CAST functions HLP functions WLD functions MDL functions NPC functions MOB functions AI functions PAR functions VOB functions","title":"Externals"},{"location":"zengin/scripts/extenders/zParserExtender/externals/#externals","text":"External functions are Daedalus functions (defined in the engine itself) used to interface with the enigne. zParseExtender adds a lot of new functions that help scripters to interface with the engine in more ways, that was not possible before (without script extenders such as Ikarus and LeGo). The external functions are split into categories String functions Menu function Log function Event function CAST functions HLP functions WLD functions MDL functions NPC functions MOB functions AI functions PAR functions VOB functions","title":"Externals"},{"location":"zengin/scripts/extenders/zParserExtender/externals/AI/","text":"AI - functions for working with AI \ud800\udf3e Functions to work with the new C_Trigger class and NPC's AI queue. func void AI_CallScript ( var string funcName , var C_Npc slf , var C_Npc oth ) {}; func C_Trigger AI_StartTriggerScript ( var string funcName , var int delay ) {}; func C_Trigger AI_StartTriggerScriptEx ( var string funcName , var int delay , var C_Npc slf , var C_Npc oth , var C_Npc vct ) {}; const int selfID = 0 ; const int otherID = 1 ; const int victimID = 2 ; func int Hlp_IsNULL ( var instance pointer ) {}; func C_Trigger AI_GetTriggerByID ( var int ID ) {}; func int AI_GetTriggersNum () {}; func C_Trigger AI_GetTriggerNPC ( var int npcID ) {}; func func AI_GetTriggerFunc ( var C_Trigger trigger ) {}; func string AI_GetTriggerFuncName ( var C_Trigger trigger ) {}; AI_GetNextTriggerByFunc ( var C_Trigger startTrigger , var func function ) {}; AI_GetNextTriggerByFuncName ( var C_Trigger startTrigger , var string functionName ) {}; AI_GetNextTriggerBySelf ( var C_Trigger startTrigger , var C_Npc self ) {}; AI_GetNextTriggerByOther ( var C_Trigger startTrigger , var C_Npc other ) {}; AI_GetNextTriggerByVictim ( var C_Trigger startTrigger , var C_Npc victim ) {}; AI_GetNextTriggerByNPCs ( var C_Trigger startTrigger , var C_Npc self , var C_Npc other , var C_Npc victim ) {}; /// Returns the name of the current Steam user /// Returns empty string when not run with Steam /// /// @return string containing the Steam username, or empty string func string Hlp_GetSteamPersonalName () {};","title":"AI functions"},{"location":"zengin/scripts/extenders/zParserExtender/externals/AI/#ai-functions-for-working-with-ai","text":"Functions to work with the new C_Trigger class and NPC's AI queue. func void AI_CallScript ( var string funcName , var C_Npc slf , var C_Npc oth ) {}; func C_Trigger AI_StartTriggerScript ( var string funcName , var int delay ) {}; func C_Trigger AI_StartTriggerScriptEx ( var string funcName , var int delay , var C_Npc slf , var C_Npc oth , var C_Npc vct ) {}; const int selfID = 0 ; const int otherID = 1 ; const int victimID = 2 ; func int Hlp_IsNULL ( var instance pointer ) {}; func C_Trigger AI_GetTriggerByID ( var int ID ) {}; func int AI_GetTriggersNum () {}; func C_Trigger AI_GetTriggerNPC ( var int npcID ) {}; func func AI_GetTriggerFunc ( var C_Trigger trigger ) {}; func string AI_GetTriggerFuncName ( var C_Trigger trigger ) {}; AI_GetNextTriggerByFunc ( var C_Trigger startTrigger , var func function ) {}; AI_GetNextTriggerByFuncName ( var C_Trigger startTrigger , var string functionName ) {}; AI_GetNextTriggerBySelf ( var C_Trigger startTrigger , var C_Npc self ) {}; AI_GetNextTriggerByOther ( var C_Trigger startTrigger , var C_Npc other ) {}; AI_GetNextTriggerByVictim ( var C_Trigger startTrigger , var C_Npc victim ) {}; AI_GetNextTriggerByNPCs ( var C_Trigger startTrigger , var C_Npc self , var C_Npc other , var C_Npc victim ) {}; /// Returns the name of the current Steam user /// Returns empty string when not run with Steam /// /// @return string containing the Steam username, or empty string func string Hlp_GetSteamPersonalName () {};","title":"AI - functions for working with AI"},{"location":"zengin/scripts/extenders/zParserExtender/externals/CAST/","text":"CAST - data type conversion functions \ud800\udf3e External functions for data type conversion and pointer casting. func instance Cast_PointerToInstance ( var int address ) {}; func int Cast_InstanceToPointer ( var instance object ) {}; func C_NPC Cast_PointerToNpc ( var int address ) {}; func C_ITEM Cast_PointerToItem ( var int address ) {}; func int Cast_InstanceIsNpc ( var instance object ) {}; func int Cast_InstanceIsItem ( var instance object ) {}; func int Cast_InstanceIsMob ( var instance object ) {}; func int Cast_GetInstanceIndex ( var instance object ) {}; /// Returns the class identifier of a class by its name /// /// @param className name of the class /// @return class identifier func int Cast_GetClassID ( var string className ) {}; /// Returns class identifier of the zCObject vob class /// /// @param object object instance /// @return class zCObject identifier func int Cast_GetVobClassID ( var instance object ) {}; /// Checks if the classId class is the parent class of the object /// /// @param classId class identifier, from Cast_GetClassID function /// @param object object instance /// @return class zCObject identifier func int Cast_CheckVobClassID ( var int classId , var instance object ) {};","title":"CAST functions"},{"location":"zengin/scripts/extenders/zParserExtender/externals/CAST/#cast-data-type-conversion-functions","text":"External functions for data type conversion and pointer casting. func instance Cast_PointerToInstance ( var int address ) {}; func int Cast_InstanceToPointer ( var instance object ) {}; func C_NPC Cast_PointerToNpc ( var int address ) {}; func C_ITEM Cast_PointerToItem ( var int address ) {}; func int Cast_InstanceIsNpc ( var instance object ) {}; func int Cast_InstanceIsItem ( var instance object ) {}; func int Cast_InstanceIsMob ( var instance object ) {}; func int Cast_GetInstanceIndex ( var instance object ) {}; /// Returns the class identifier of a class by its name /// /// @param className name of the class /// @return class identifier func int Cast_GetClassID ( var string className ) {}; /// Returns class identifier of the zCObject vob class /// /// @param object object instance /// @return class zCObject identifier func int Cast_GetVobClassID ( var instance object ) {}; /// Checks if the classId class is the parent class of the object /// /// @param classId class identifier, from Cast_GetClassID function /// @param object object instance /// @return class zCObject identifier func int Cast_CheckVobClassID ( var int classId , var instance object ) {};","title":"CAST - data type conversion functions"},{"location":"zengin/scripts/extenders/zParserExtender/externals/HLP/","text":"HLP - help functions \ud800\udf3e Helper functions, used for safety checks or to get specific information from the engine. func int Hlp_HasFocusVob ( var C_NPC npc ) {}; func instance Hlp_GetFocusVob ( var C_NPC npc ) {}; func string Hlp_GetFocusVobName ( var C_NPC npc ) {}; func int Hlp_GetStringLength ( var string str ) {}; func int IsNAN ( var float value ) {}; func int Hlp_KeyToggled ( var int key ) {}; func int Hlp_KeyPressed ( var int key ) {}; func int Hlp_LogicalKeyToggled ( var int key ) {}; func int Hlp_GameOnPause () {}; func void Hlp_MessageBox ( var string message ) {}; func void Hlp_PrintConsole ( var string message ) {}; func int Hlp_ReadOptionInt ( var string optName , var string section , var string entry , var int default ) {}; func float Hlp_ReadOptionFloat ( var string optName , var string section , var string entry , var float default ) {}; func string Hlp_ReadOptionString ( var string optName , var string section , var string entry , var string default ) {}; func int Hlp_OptionIsExists ( var string optName , var string section , var string entry ) {}; func void Hlp_WriteOptionInt ( var string optName , var string section , var string entry , var int value ) {}; func void Hlp_WriteOptionFloat ( var string optName , var string section , var string entry , var float value ) {}; func void Hlp_WriteOptionString ( var string optName , var string section , var string entry , var string value ) {};","title":"HLP functions"},{"location":"zengin/scripts/extenders/zParserExtender/externals/HLP/#hlp-help-functions","text":"Helper functions, used for safety checks or to get specific information from the engine. func int Hlp_HasFocusVob ( var C_NPC npc ) {}; func instance Hlp_GetFocusVob ( var C_NPC npc ) {}; func string Hlp_GetFocusVobName ( var C_NPC npc ) {}; func int Hlp_GetStringLength ( var string str ) {}; func int IsNAN ( var float value ) {}; func int Hlp_KeyToggled ( var int key ) {}; func int Hlp_KeyPressed ( var int key ) {}; func int Hlp_LogicalKeyToggled ( var int key ) {}; func int Hlp_GameOnPause () {}; func void Hlp_MessageBox ( var string message ) {}; func void Hlp_PrintConsole ( var string message ) {}; func int Hlp_ReadOptionInt ( var string optName , var string section , var string entry , var int default ) {}; func float Hlp_ReadOptionFloat ( var string optName , var string section , var string entry , var float default ) {}; func string Hlp_ReadOptionString ( var string optName , var string section , var string entry , var string default ) {}; func int Hlp_OptionIsExists ( var string optName , var string section , var string entry ) {}; func void Hlp_WriteOptionInt ( var string optName , var string section , var string entry , var int value ) {}; func void Hlp_WriteOptionFloat ( var string optName , var string section , var string entry , var float value ) {}; func void Hlp_WriteOptionString ( var string optName , var string section , var string entry , var string value ) {};","title":"HLP - help functions"},{"location":"zengin/scripts/extenders/zParserExtender/externals/MDL/","text":"MDL - model functions \ud800\udf3e Functions to tweak animation and other model related settings. func int Mdl_GetAnimationIndex ( var C_NPC npc , var string ani_name ) {}; func string Mdl_GetAnimationName ( var C_NPC npc , var int ani_index ) {}; func int Mdl_AnimationIsExists ( var C_NPC npc , var int ani_index ) {}; func int Mdl_AnimationIsActive ( var C_NPC npc , var int ani_index ) {}; func float Mdl_SetAllAnimationsFPS ( var C_NPC npc , var float fps ) {}; func float Mdl_ResetAllAnimationsFPS ( var C_NPC npc ) {}; func float Mdl_SetAnimationFPS ( var C_NPC npc , var int idx , var float fps ) {}; func float Mdl_ResetAnimationFPS ( var C_NPC npc , var int ani_index ) {}; func void Mdl_SetVisible ( var C_NPC npc , var int isVisible ) {}; /// Applies or moves existing overlay to the top of the list /// /// @param mdsName name of the overlay func void Mdl_ApplyOverlayMds_AtFirst ( var string mdsName ) {}; /// Sets a multipler for animation speed /// 1.0 = 100% speed (normal speed) /// /// @param npc npc to be affected /// @param multiplier speed of the animation func void Mdl_SetNpcSpeedMultiplier ( var C_Npc npc , var float multiplier ) {}; /// Resets the animation speed of an NPC /// /// @param npc npc to be affected func void Mdl_ResetNpcSpeedMultiplier ( var C_Npc npc ) {};","title":"MDL functions"},{"location":"zengin/scripts/extenders/zParserExtender/externals/MDL/#mdl-model-functions","text":"Functions to tweak animation and other model related settings. func int Mdl_GetAnimationIndex ( var C_NPC npc , var string ani_name ) {}; func string Mdl_GetAnimationName ( var C_NPC npc , var int ani_index ) {}; func int Mdl_AnimationIsExists ( var C_NPC npc , var int ani_index ) {}; func int Mdl_AnimationIsActive ( var C_NPC npc , var int ani_index ) {}; func float Mdl_SetAllAnimationsFPS ( var C_NPC npc , var float fps ) {}; func float Mdl_ResetAllAnimationsFPS ( var C_NPC npc ) {}; func float Mdl_SetAnimationFPS ( var C_NPC npc , var int idx , var float fps ) {}; func float Mdl_ResetAnimationFPS ( var C_NPC npc , var int ani_index ) {}; func void Mdl_SetVisible ( var C_NPC npc , var int isVisible ) {}; /// Applies or moves existing overlay to the top of the list /// /// @param mdsName name of the overlay func void Mdl_ApplyOverlayMds_AtFirst ( var string mdsName ) {}; /// Sets a multipler for animation speed /// 1.0 = 100% speed (normal speed) /// /// @param npc npc to be affected /// @param multiplier speed of the animation func void Mdl_SetNpcSpeedMultiplier ( var C_Npc npc , var float multiplier ) {}; /// Resets the animation speed of an NPC /// /// @param npc npc to be affected func void Mdl_ResetNpcSpeedMultiplier ( var C_Npc npc ) {};","title":"MDL - model functions"},{"location":"zengin/scripts/extenders/zParserExtender/externals/MOB/","text":"MOB - interactive object functions \ud800\udf3e Functions to manipulate interactive objects like destroying MOBs, setting lockpick combination and such. func void Mob_Destroy ( var instance object ) {}; func void Mob_RemoveItem ( var instance object , var int item ) {}; func void Mob_RemoveItems ( var instance object , var int item , var int cnt ) {}; func void Mob_InsertItem ( var instance object , var int item ) {}; func void Mob_InsertItems ( var instance object , var int item , var int cnt ) {}; func string Mob_GetLockCombination ( var instance object ) {}; func void Mob_SetLockCombination ( var instance object , var string comb ) {}; func int Mob_IsLocked ( var instance object ) {}; func void Mob_SetLocked ( var instance object , var int locked ) {}; func instance Mob_GetKeyInstance ( var instance object ) {}; func void Mob_SetKeyInstance ( var instance object , var int key ) {};","title":"MOB functions"},{"location":"zengin/scripts/extenders/zParserExtender/externals/MOB/#mob-interactive-object-functions","text":"Functions to manipulate interactive objects like destroying MOBs, setting lockpick combination and such. func void Mob_Destroy ( var instance object ) {}; func void Mob_RemoveItem ( var instance object , var int item ) {}; func void Mob_RemoveItems ( var instance object , var int item , var int cnt ) {}; func void Mob_InsertItem ( var instance object , var int item ) {}; func void Mob_InsertItems ( var instance object , var int item , var int cnt ) {}; func string Mob_GetLockCombination ( var instance object ) {}; func void Mob_SetLockCombination ( var instance object , var string comb ) {}; func int Mob_IsLocked ( var instance object ) {}; func void Mob_SetLocked ( var instance object , var int locked ) {}; func instance Mob_GetKeyInstance ( var instance object ) {}; func void Mob_SetKeyInstance ( var instance object , var int key ) {};","title":"MOB - interactive object functions"},{"location":"zengin/scripts/extenders/zParserExtender/externals/NPC/","text":"NPC - character functions \ud800\udf3e NPC realted functions. func void Npc_SetAsHero ( var C_NPC npc ) {}; func void Npc_OpenInventory ( var C_NPC npc ) {}; func void Npc_OpenInventorySteal ( var C_NPC npc ) {}; func void Npc_OpenInventoryTrade ( var C_NPC npc ) {}; /// Returns an item in NPC's left hand slot /// /// @param npc npc to be affected func C_Item Npc_GetLeftHandItem ( var C_Npc npc ) {}; /// Returns an item in NPC's right hand slot /// /// @param npc npc to be affected func C_Item Npc_GetRightHandItem ( var C_Npc npc ) {}; /// Returns an item from a slot with the slotName /// /// @param npc npc to be affected /// @param slotName name of the slot func C_Item Npc_GetSlotItem ( var C_Npc npc , var string slotName ) {}; /// Places an instance of the oCVom class (including items and NPCs) object into the slotName of the NPC /// The copyInInv parameter determines wheter a copy of the object should remian in the character's inventory /// /// @param npc npc to remove the item from /// @param slotName name of the slot fro which to remove the item /// @param object object to be inserted into the slot /// @param copyInInv should a copy of the object stay in character inventory func void Npc_PutInSlot ( var C_Npc npc , var string slotName , var instance object , var int copyInInv ) {}; /// Removes an object from the slotName of the NPC. /// The dropIt parameter in Gothic 2 defines, wheter or not the object should drop out of the slot. In Gothic 1, this parameter is reserved and must be 0. /// /// @param npc npc to remove the item from /// @param slotName name of the slot fro which to remove the item /// @param dropIt should the object be dropped func void Npc_RemoveFromSlot ( var C_Npc npc , var string slotName , var int dropIt ) {};","title":"NPC functions"},{"location":"zengin/scripts/extenders/zParserExtender/externals/NPC/#npc-character-functions","text":"NPC realted functions. func void Npc_SetAsHero ( var C_NPC npc ) {}; func void Npc_OpenInventory ( var C_NPC npc ) {}; func void Npc_OpenInventorySteal ( var C_NPC npc ) {}; func void Npc_OpenInventoryTrade ( var C_NPC npc ) {}; /// Returns an item in NPC's left hand slot /// /// @param npc npc to be affected func C_Item Npc_GetLeftHandItem ( var C_Npc npc ) {}; /// Returns an item in NPC's right hand slot /// /// @param npc npc to be affected func C_Item Npc_GetRightHandItem ( var C_Npc npc ) {}; /// Returns an item from a slot with the slotName /// /// @param npc npc to be affected /// @param slotName name of the slot func C_Item Npc_GetSlotItem ( var C_Npc npc , var string slotName ) {}; /// Places an instance of the oCVom class (including items and NPCs) object into the slotName of the NPC /// The copyInInv parameter determines wheter a copy of the object should remian in the character's inventory /// /// @param npc npc to remove the item from /// @param slotName name of the slot fro which to remove the item /// @param object object to be inserted into the slot /// @param copyInInv should a copy of the object stay in character inventory func void Npc_PutInSlot ( var C_Npc npc , var string slotName , var instance object , var int copyInInv ) {}; /// Removes an object from the slotName of the NPC. /// The dropIt parameter in Gothic 2 defines, wheter or not the object should drop out of the slot. In Gothic 1, this parameter is reserved and must be 0. /// /// @param npc npc to remove the item from /// @param slotName name of the slot fro which to remove the item /// @param dropIt should the object be dropped func void Npc_RemoveFromSlot ( var C_Npc npc , var string slotName , var int dropIt ) {};","title":"NPC - character functions"},{"location":"zengin/scripts/extenders/zParserExtender/externals/PAR/","text":"PAR - functions for parser manipulation \ud800\udf3e Parser functions are used to manipulate the parsers. Retrieve SymbolID, access arrays and such. func int Par_GetParserID ( var string parName ) {}; func int Par_GetSymbolID ( var int parId , var string symName ) {}; func int Par_GetSymbolLength ( var int parId , var int symId ) {}; func int Par_GetSymbolValueInt ( var int parId , var int symId ) {}; func float Par_GetSymbolValueFloat ( var int parId , var int symId ) {}; func string Par_GetSymbolValueString ( var int parId , var int symId ) {}; func instance Par_GetSymbolValueInstance ( var int parId , var int symId ) {}; func int Par_GetSymbolValueIntArray ( var int parId , var int symId , var int arrayId ) {}; func float Par_GetSymbolValueFloatArray ( var int parId , var int symId , var int arrayId ) {}; func string Par_GetSymbolValueStringArray ( var int parId , var int symId , var int arrayId ) {}; func void Par_SetSymbolValueInt ( var int value , var int parId , var int symId , var int arrayId ) {}; func void Par_SetSymbolValueFloat ( var float value , var int parId , var int symId , var int arrayId ) {}; func void Par_SetSymbolValueString ( var string value , var int parId , var int symId , var int arrayId ) {}; func void Par_SetSymbolValueInstance ( var instance value , var int parId , var int symId , var int arrayId ) {}; func void Par_SetSymbolValueIntArray ( var int value , var int parId , var int symId , var int arrayId ) {}; func void Par_SetSymbolValueFloatArray ( var float value , var int parId , var int symId , var int arrayId ) {}; func void Par_SetSymbolValueStringArray ( var string value , var int parId , var int symId , var int arrayId ) {};","title":"PAR functions"},{"location":"zengin/scripts/extenders/zParserExtender/externals/PAR/#par-functions-for-parser-manipulation","text":"Parser functions are used to manipulate the parsers. Retrieve SymbolID, access arrays and such. func int Par_GetParserID ( var string parName ) {}; func int Par_GetSymbolID ( var int parId , var string symName ) {}; func int Par_GetSymbolLength ( var int parId , var int symId ) {}; func int Par_GetSymbolValueInt ( var int parId , var int symId ) {}; func float Par_GetSymbolValueFloat ( var int parId , var int symId ) {}; func string Par_GetSymbolValueString ( var int parId , var int symId ) {}; func instance Par_GetSymbolValueInstance ( var int parId , var int symId ) {}; func int Par_GetSymbolValueIntArray ( var int parId , var int symId , var int arrayId ) {}; func float Par_GetSymbolValueFloatArray ( var int parId , var int symId , var int arrayId ) {}; func string Par_GetSymbolValueStringArray ( var int parId , var int symId , var int arrayId ) {}; func void Par_SetSymbolValueInt ( var int value , var int parId , var int symId , var int arrayId ) {}; func void Par_SetSymbolValueFloat ( var float value , var int parId , var int symId , var int arrayId ) {}; func void Par_SetSymbolValueString ( var string value , var int parId , var int symId , var int arrayId ) {}; func void Par_SetSymbolValueInstance ( var instance value , var int parId , var int symId , var int arrayId ) {}; func void Par_SetSymbolValueIntArray ( var int value , var int parId , var int symId , var int arrayId ) {}; func void Par_SetSymbolValueFloatArray ( var float value , var int parId , var int symId , var int arrayId ) {}; func void Par_SetSymbolValueStringArray ( var string value , var int parId , var int symId , var int arrayId ) {};","title":"PAR - functions for parser manipulation"},{"location":"zengin/scripts/extenders/zParserExtender/externals/VOB/","text":"VOB - functions for object manipulation \ud800\udf3e VOB functions allow you to manipulate game world objects. /// Returns the current position of the object in the world /// /// @param vob vob to ge the position of /// @return C_Position instace - position of the VOB func C_Position Vob_GetVobPosition ( var C_Vob vob ) {}; /// Sets the current position of the object in the world /// /// @param vob vob to get the position of /// @param pos new position of the vob func void Vob_SetVobPosition ( var C_Vob vob , var C_Position pos ) {}; /// Returns the universal data of the zCVob object /// /// @param vob VOB to get the position of /// @return general vob data C_Vob_Data func C_Vob_Data Vob_GetVobData ( var C_Vob vob ) {}; /// Sets the universal data to a zCVob object /// /// @param vob VOB to get the position of /// @param data general vob data C_Vob_Data func void Vob_SetVobData ( var C_Vob vob , var C_Vob_Data data ) {}; /// Returns zCVobLight object data /// /// @param vobLight vobLight object /// @return C_Light_Data of the light func C_Light_Data Vob_GetLightData ( var C_Vob vobLight ) {}; /// Sets the data of a zCVobLight object /// /// @param vobLight object to apply the light data to /// @param data C_Light_Data light data to be set func void Vob_SetLightData ( var C_Vob vobLight , var C_Light_Data data ) {}; /// Clears the list of animation colours for the light source /// /// @param vobLight light vob func void Vob_ClearLightAniList ( var C_Vob vobLight ) {}; /// Adds a color to the colour list /// /// @param vobLight object to apply the colour to /// @param col colour to be applied func void Vob_AddLightAniColor ( var C_Vob vobLight , var C_Color col ) {}; /// Adds a color to the colour list /// /// @param vobLight object to apply the colour to /// @param r red colour channel /// @param g green colour channel /// @param b blue colour channel func void Vob_AddLightAniColorRGB ( var C_Vob vobLight , var int r , var int g , var int b ) {}; /// Returns the data of the oCMOB object /// /// @param mob oCMOB object /// @return mob data func C_Mob_Data Vob_GetMobData ( var C_Vob mob ) {}; /// Sets the data of the oCMOB object /// /// @param mob oCMOB object /// @param data C_Mob_Data to be set func void Vob_SetMobData ( var C_Vob mob , var C_Mob_Data data ) {}; /// Returns the data of the oCMobInter object /// /// @param mobInter oCMobInter object /// @return MobInter_Data of the object func MobInter_Data Vob_GetMobInterData ( var C_Vob mobInter ) {}; /// Sets the data of the oCMobInter object /// /// @param mobInter oCMobInter object /// @param data MobInter_Data of the object func void Vob_SetMobInterData ( var C_Vob mobInter , var C_MobInter_Data data ) {}; /// Returns the data of the oCMobLockable object /// /// @param mobLock oCMobLockable object /// @param data MobInter_Data of the object func C_MobLockable_Data Vob_GetMobInterData ( var C_Vob mobLock ) {}; /// Sets the data of the oCMobLockable object /// /// @param mobLock oCMobLockable object /// @param data C_MobLockable_Data of the object func void Vob_SetMobInterData ( var C_Vob mobLock , var C_MobLockable_Data data ) {};","title":"VOB functions"},{"location":"zengin/scripts/extenders/zParserExtender/externals/VOB/#vob-functions-for-object-manipulation","text":"VOB functions allow you to manipulate game world objects. /// Returns the current position of the object in the world /// /// @param vob vob to ge the position of /// @return C_Position instace - position of the VOB func C_Position Vob_GetVobPosition ( var C_Vob vob ) {}; /// Sets the current position of the object in the world /// /// @param vob vob to get the position of /// @param pos new position of the vob func void Vob_SetVobPosition ( var C_Vob vob , var C_Position pos ) {}; /// Returns the universal data of the zCVob object /// /// @param vob VOB to get the position of /// @return general vob data C_Vob_Data func C_Vob_Data Vob_GetVobData ( var C_Vob vob ) {}; /// Sets the universal data to a zCVob object /// /// @param vob VOB to get the position of /// @param data general vob data C_Vob_Data func void Vob_SetVobData ( var C_Vob vob , var C_Vob_Data data ) {}; /// Returns zCVobLight object data /// /// @param vobLight vobLight object /// @return C_Light_Data of the light func C_Light_Data Vob_GetLightData ( var C_Vob vobLight ) {}; /// Sets the data of a zCVobLight object /// /// @param vobLight object to apply the light data to /// @param data C_Light_Data light data to be set func void Vob_SetLightData ( var C_Vob vobLight , var C_Light_Data data ) {}; /// Clears the list of animation colours for the light source /// /// @param vobLight light vob func void Vob_ClearLightAniList ( var C_Vob vobLight ) {}; /// Adds a color to the colour list /// /// @param vobLight object to apply the colour to /// @param col colour to be applied func void Vob_AddLightAniColor ( var C_Vob vobLight , var C_Color col ) {}; /// Adds a color to the colour list /// /// @param vobLight object to apply the colour to /// @param r red colour channel /// @param g green colour channel /// @param b blue colour channel func void Vob_AddLightAniColorRGB ( var C_Vob vobLight , var int r , var int g , var int b ) {}; /// Returns the data of the oCMOB object /// /// @param mob oCMOB object /// @return mob data func C_Mob_Data Vob_GetMobData ( var C_Vob mob ) {}; /// Sets the data of the oCMOB object /// /// @param mob oCMOB object /// @param data C_Mob_Data to be set func void Vob_SetMobData ( var C_Vob mob , var C_Mob_Data data ) {}; /// Returns the data of the oCMobInter object /// /// @param mobInter oCMobInter object /// @return MobInter_Data of the object func MobInter_Data Vob_GetMobInterData ( var C_Vob mobInter ) {}; /// Sets the data of the oCMobInter object /// /// @param mobInter oCMobInter object /// @param data MobInter_Data of the object func void Vob_SetMobInterData ( var C_Vob mobInter , var C_MobInter_Data data ) {}; /// Returns the data of the oCMobLockable object /// /// @param mobLock oCMobLockable object /// @param data MobInter_Data of the object func C_MobLockable_Data Vob_GetMobInterData ( var C_Vob mobLock ) {}; /// Sets the data of the oCMobLockable object /// /// @param mobLock oCMobLockable object /// @param data C_MobLockable_Data of the object func void Vob_SetMobInterData ( var C_Vob mobLock , var C_MobLockable_Data data ) {};","title":"VOB - functions for object manipulation"},{"location":"zengin/scripts/extenders/zParserExtender/externals/WLD/","text":"WLD - world manipulation functions \ud800\udf3e Functions related to the world. func void Wld_ChangeLevel ( var string world , var string waypoint ) {}; func instance Wld_FindVob ( var string vobname ) {}; func void Wld_PlayEffectVob ( var string effect , var instance pvob , var int level , var int damage , var int damage_type , var int damage_speed ) {}; func void Wld_PlayEffectAt ( var string effect , var instance coord , var int level , var int damage , var int damage_type , var int damage_speed ) {}; func void Wld_ToggleRain ( var float weight , var flaot time ) {}; func void Wld_SetWeatherType ( var int type ) {}; func int Wld_GetWeatherType () {};","title":"WLD functions"},{"location":"zengin/scripts/extenders/zParserExtender/externals/WLD/#wld-world-manipulation-functions","text":"Functions related to the world. func void Wld_ChangeLevel ( var string world , var string waypoint ) {}; func instance Wld_FindVob ( var string vobname ) {}; func void Wld_PlayEffectVob ( var string effect , var instance pvob , var int level , var int damage , var int damage_type , var int damage_speed ) {}; func void Wld_PlayEffectAt ( var string effect , var instance coord , var int level , var int damage , var int damage_type , var int damage_speed ) {}; func void Wld_ToggleRain ( var float weight , var flaot time ) {}; func void Wld_SetWeatherType ( var int type ) {}; func int Wld_GetWeatherType () {};","title":"WLD - world manipulation functions"},{"location":"zengin/scripts/extenders/zParserExtender/externals/eventsandvars/","text":"Event functions and variables \ud800\udf3e On top of external functions, zParserExtender also adds these event functions and constants. func event GameLoop () {}; func event GameInit () {}; const instance null ; const float NaN ;","title":"Event function"},{"location":"zengin/scripts/extenders/zParserExtender/externals/eventsandvars/#event-functions-and-variables","text":"On top of external functions, zParserExtender also adds these event functions and constants. func event GameLoop () {}; func event GameInit () {}; const instance null ; const float NaN ;","title":"Event functions and variables"},{"location":"zengin/scripts/extenders/zParserExtender/externals/log/","text":"Log functions \ud800\udf3e As discussed on Inside Gothic , vanilla Gothic has no way of getting the status of a quest. These functions implement that functionality. /// Returns the status of diary topic /// Not found - (-1) /// Free - 0 /// Running - 1 /// Success - 2 /// Failure - 3 /// Obsolete - 4 /// /// @param topic name of the topic /// @return topic status func int Log_GetTopicStatus ( var string topic ) {}; /// Returns the topic the diary topic is in /// Not found - (-1) /// Missions - 0 /// Notes - 1 /// All - 2 /// /// @param topic name of the topic /// @return topic section func int Log_GetTopicSection ( var string topic ) {};","title":"Log function"},{"location":"zengin/scripts/extenders/zParserExtender/externals/log/#log-functions","text":"As discussed on Inside Gothic , vanilla Gothic has no way of getting the status of a quest. These functions implement that functionality. /// Returns the status of diary topic /// Not found - (-1) /// Free - 0 /// Running - 1 /// Success - 2 /// Failure - 3 /// Obsolete - 4 /// /// @param topic name of the topic /// @return topic status func int Log_GetTopicStatus ( var string topic ) {}; /// Returns the topic the diary topic is in /// Not found - (-1) /// Missions - 0 /// Notes - 1 /// All - 2 /// /// @param topic name of the topic /// @return topic section func int Log_GetTopicSection ( var string topic ) {};","title":"Log functions"},{"location":"zengin/scripts/extenders/zParserExtender/externals/menu/","text":"Menu function \ud800\udf3e /// Find all C_MenuItem object instances by the mask and automatically places them in the current menu instance /// /// @param mask regex like mask for searching func void Menu_SearchItems ( var string mask ) {};","title":"Menu function"},{"location":"zengin/scripts/extenders/zParserExtender/externals/menu/#menu-function","text":"/// Find all C_MenuItem object instances by the mask and automatically places them in the current menu instance /// /// @param mask regex like mask for searching func void Menu_SearchItems ( var string mask ) {};","title":"Menu function"},{"location":"zengin/scripts/extenders/zParserExtender/externals/string/","text":"String function \ud800\udf3e Functions to manipulate and format strings. /// Returns formatted string using format specifiers /// /// Format specifiers: /// %s - inserts a string /// %i - inserts a integer number /// %x - inserts a integer in hexadecimal /// %f - inserts a floating point number /// %b - inserts a logical expression /// %p - inserts a pointer /// /// @return formatted string func string Str_Format ( var string format , ... ) {}; /// Returns a string in the current language, otherwise in English. /// Arguments MUST be encoded in UTF-8! The result string will be converted to apropriate ANSI string. /// /// @param russian Russian string /// @param english English string /// @param german German string /// @param polish Polish string /// /// @return string in the current language func string Str_GetLocalizedString ( var string russian , var string english , var string german , var string polish ) {}; /// Returns a string in the current language, otherwise in English. /// Offers additional languages /// /// @param russian Russian string /// @param english English string /// @param german German string /// @param polish Polish string /// @param czech Czech string /// @param romanian Romanian string /// @param italian Italian string /// @param spanish Spanish string /// /// @return string in the current language func string Str_GetLocalizedStringEx ( var string russian , var string english , var string german , var string polish , var string czech , var string romanian , var string italian , var string spanish ) {}; /// Converts UTF-8 string into an ANSI string with codePage /// /// @param utf8 string encoded in UTF8 /// @param codePage codePage id, can be obtained from Str_GetCurrentCP func string Str_UTF8_to_ANSI ( var string utf8 , var int codePage ) {}; /// Return the code page corresponding to the current language set in the Union System func int Str_GetCurrentCP () {}; /// Returns the length of a string /// /// @param str string to be measured /// @return length of the string func int Str_GetLength ( var int str ) {};","title":"String functions"},{"location":"zengin/scripts/extenders/zParserExtender/externals/string/#string-function","text":"Functions to manipulate and format strings. /// Returns formatted string using format specifiers /// /// Format specifiers: /// %s - inserts a string /// %i - inserts a integer number /// %x - inserts a integer in hexadecimal /// %f - inserts a floating point number /// %b - inserts a logical expression /// %p - inserts a pointer /// /// @return formatted string func string Str_Format ( var string format , ... ) {}; /// Returns a string in the current language, otherwise in English. /// Arguments MUST be encoded in UTF-8! The result string will be converted to apropriate ANSI string. /// /// @param russian Russian string /// @param english English string /// @param german German string /// @param polish Polish string /// /// @return string in the current language func string Str_GetLocalizedString ( var string russian , var string english , var string german , var string polish ) {}; /// Returns a string in the current language, otherwise in English. /// Offers additional languages /// /// @param russian Russian string /// @param english English string /// @param german German string /// @param polish Polish string /// @param czech Czech string /// @param romanian Romanian string /// @param italian Italian string /// @param spanish Spanish string /// /// @return string in the current language func string Str_GetLocalizedStringEx ( var string russian , var string english , var string german , var string polish , var string czech , var string romanian , var string italian , var string spanish ) {}; /// Converts UTF-8 string into an ANSI string with codePage /// /// @param utf8 string encoded in UTF8 /// @param codePage codePage id, can be obtained from Str_GetCurrentCP func string Str_UTF8_to_ANSI ( var string utf8 , var int codePage ) {}; /// Return the code page corresponding to the current language set in the Union System func int Str_GetCurrentCP () {}; /// Returns the length of a string /// /// @param str string to be measured /// @return length of the string func int Str_GetLength ( var int str ) {};","title":"String function"},{"location":"zengin/sound/","text":"Sound \ud800\udf3e Sound effects and dialogues are sound files playing durning the game. This is Gothic VDFS. It's a tool that allows you to pack and unpack files in .VDF and .MOD format. Let us start with unpacking \"Sound\" file: In the \"(Viewer)\" tab, in the \"Filename\", go to your Gothic or Gothic II/Data folder and choose \"Sound.VDF\"; Create a folder on your desktop or any other easily accessible place on your computer. Name it however you want; Go to \"Root path\" and choose the folder you just created; Press \"Extract volume\" if you want to unpack all sound files. The chosen file should be unpacking right now. Now, here are the files we just extracted: A lot of times it can be tricky to find the sound you are looking for, but that we'll leave for later. Now let's just see how can we change a sound file in the game. Get yourself any short sound file; In order for the sound to work in the game, it needs to be in mono .wav format. A lot of programs let you convert a file, like Audacity, so do just that; Rename your converted file into \"INV_CHANGE.WAV\" and replace it in SFX folder you just extracted; Go back to Gothic VDFS, go to (Builder) tab; In \"Filename\" you choose how do you want your file to be called and the location it's created in. I recommend creating separate folder and making it there. You can also name the file however you want, as long as it has higher time stamp (more on that later) than original Sounds file. To create is as .VDF file, in the \"Save file as\" choose \"All file\" and call it \"Sounds.VDF\"; In \"Root path\" go to and choose \"_WORK\" folder; In the field just below \"Comment\", add a * character then click on the + next to it; Press \"Build\", and if you did everything right, the folder is being packed back into .VDF file; That's how a successful process looks like: Now, get the file you just created, and put it in your Gothic/Data folder, replacing the old one. The file we just replaced changes the sound in main menu and the inventory. If you can hear it, congratulations, you did it!","title":"Sound"},{"location":"zengin/sound/#sound","text":"Sound effects and dialogues are sound files playing durning the game. This is Gothic VDFS. It's a tool that allows you to pack and unpack files in .VDF and .MOD format. Let us start with unpacking \"Sound\" file: In the \"(Viewer)\" tab, in the \"Filename\", go to your Gothic or Gothic II/Data folder and choose \"Sound.VDF\"; Create a folder on your desktop or any other easily accessible place on your computer. Name it however you want; Go to \"Root path\" and choose the folder you just created; Press \"Extract volume\" if you want to unpack all sound files. The chosen file should be unpacking right now. Now, here are the files we just extracted: A lot of times it can be tricky to find the sound you are looking for, but that we'll leave for later. Now let's just see how can we change a sound file in the game. Get yourself any short sound file; In order for the sound to work in the game, it needs to be in mono .wav format. A lot of programs let you convert a file, like Audacity, so do just that; Rename your converted file into \"INV_CHANGE.WAV\" and replace it in SFX folder you just extracted; Go back to Gothic VDFS, go to (Builder) tab; In \"Filename\" you choose how do you want your file to be called and the location it's created in. I recommend creating separate folder and making it there. You can also name the file however you want, as long as it has higher time stamp (more on that later) than original Sounds file. To create is as .VDF file, in the \"Save file as\" choose \"All file\" and call it \"Sounds.VDF\"; In \"Root path\" go to and choose \"_WORK\" folder; In the field just below \"Comment\", add a * character then click on the + next to it; Press \"Build\", and if you did everything right, the folder is being packed back into .VDF file; That's how a successful process looks like: Now, get the file you just created, and put it in your Gothic/Data folder, replacing the old one. The file we just replaced changes the sound in main menu and the inventory. If you can hear it, congratulations, you did it!","title":"Sound"},{"location":"zengin/textures/","text":"Textures \ud800\udf3e Textures are pictures, that get projected on 3D models and onto 2D user interface in the game. In this section we will discuss how to work with textures.","title":"Textures"},{"location":"zengin/textures/#textures","text":"Textures are pictures, that get projected on 3D models and onto 2D user interface in the game. In this section we will discuss how to work with textures.","title":"Textures"},{"location":"zengin/tools/","text":"Tools \ud800\udf3e The community has developed many tools to help with the creation of Gothic mods. Note This list is work in progress Daedalus Daedalus Language Server - a VS Code/VS Codium extension that adds IDE like functionality for Daedalus scripting language Ikarus - A daedalus library for the game Gothic. Exploits the interpreter to allow arbitrary memory access and defines a lot of useful functions for interfacing with the engine. LeGo - A daedalus library for the game Gothic. It contains various packages to support modders. AFSP - Fawkes' & Auronen's script package for Gothic 1 and Gothic 2: Night of the Raven. Ninja - Ninja introduces the possibility of true modular modifications for the video games Gothic and Gothic 2 Night of the Raven. VDFS tools GothicVDFS - NiceDE's viewer, extractor and builder for .vdf and .mod volumes VDFS Tool - Gratt's Union VDFS viewer, extractor, builder, optimizer and ZIP compressor for .vdf and .mod volumes World Editors Spacer - the original world editor for ZenGin, shipps with the MDK Union Gothic World Editor - Saturas' world editor, supports new object classes created with Union Gothic World Editor - World editor for vanilla worlds, works with G1, G2 and G2 NotR worlds","title":"Tools"},{"location":"zengin/tools/#tools","text":"The community has developed many tools to help with the creation of Gothic mods. Note This list is work in progress Daedalus Daedalus Language Server - a VS Code/VS Codium extension that adds IDE like functionality for Daedalus scripting language Ikarus - A daedalus library for the game Gothic. Exploits the interpreter to allow arbitrary memory access and defines a lot of useful functions for interfacing with the engine. LeGo - A daedalus library for the game Gothic. It contains various packages to support modders. AFSP - Fawkes' & Auronen's script package for Gothic 1 and Gothic 2: Night of the Raven. Ninja - Ninja introduces the possibility of true modular modifications for the video games Gothic and Gothic 2 Night of the Raven. VDFS tools GothicVDFS - NiceDE's viewer, extractor and builder for .vdf and .mod volumes VDFS Tool - Gratt's Union VDFS viewer, extractor, builder, optimizer and ZIP compressor for .vdf and .mod volumes World Editors Spacer - the original world editor for ZenGin, shipps with the MDK Union Gothic World Editor - Saturas' world editor, supports new object classes created with Union Gothic World Editor - World editor for vanilla worlds, works with G1, G2 and G2 NotR worlds","title":"Tools"},{"location":"zengin/tools/DLS/","text":"Daedalus Language Server \ud800\udf3e Daedalus Language Server Todo TODO","title":"Daedalus Language Server"},{"location":"zengin/tools/DLS/#daedalus-language-server","text":"Daedalus Language Server Todo TODO","title":"Daedalus Language Server"},{"location":"zengin/tools/GothicSourcer/","text":"Gothic Sourcer \ud800\udf3e Gothic Sourcer can be used to do a lot of things. Todo TODO","title":"Gothic Sourcer"},{"location":"zengin/tools/GothicSourcer/#gothic-sourcer","text":"Gothic Sourcer can be used to do a lot of things. Todo TODO","title":"Gothic Sourcer"},{"location":"zengin/tools/GothicVDFS/","text":"GothicVDFS \ud800\udf3e Gothic VDFS is still the most popular VDFS tool. It was created by NicoDE. Download \ud800\udf3e You can download the tool from NicoDE's website - direct link . Quick overview \ud800\udf3e","title":"GothicVDFS"},{"location":"zengin/tools/GothicVDFS/#gothicvdfs","text":"Gothic VDFS is still the most popular VDFS tool. It was created by NicoDE.","title":"GothicVDFS"},{"location":"zengin/tools/GothicVDFS/#download","text":"You can download the tool from NicoDE's website - direct link .","title":"Download"},{"location":"zengin/tools/GothicVDFS/#quick-overview","text":"","title":"Quick overview"},{"location":"zengin/tools/VDFSTool/","text":"VDFS Tool \ud800\udf3e VDFS Tool is a new program that supports new features introduced to VDFS by the Union team. Like ZIP compression or drag and drop support. Download \ud800\udf3e You can download the tool from the post on WoP.ru - VDFS Tool or using the Resource Manager Quick overview \ud800\udf3e","title":"VDFS Tool"},{"location":"zengin/tools/VDFSTool/#vdfs-tool","text":"VDFS Tool is a new program that supports new features introduced to VDFS by the Union team. Like ZIP compression or drag and drop support.","title":"VDFS Tool"},{"location":"zengin/tools/VDFSTool/#download","text":"You can download the tool from the post on WoP.ru - VDFS Tool or using the Resource Manager","title":"Download"},{"location":"zengin/tools/VDFSTool/#quick-overview","text":"","title":"Quick overview"},{"location":"zengin/union/","text":"Union \ud800\udf3e Union is a system to patch and extend Gothic's engine the ZenGin. It allows you to load .dll files - ZenGin extensions created using the Gothic/Union SDK and .patch files - files designed to patch the game's executable. The Union installer also contains the SystemPack a collection of bug fixes and engine edits that improve performance. Plug-ins \ud800\udf3e Union plugins are shipped in the form of a .dll library. This library contains the compiled C++ code with the Union SDK and a embedded .patch file. Union SDK & Gothic API \ud800\udf3e Union software development kit is a collection of tools and the Gothic API that allows you to create Union plugins and alter the engine behaviour. Gothic API a set of 4 interfaces (each for one different ZenGin version) that allow you to interface with the engine, access the enigne objects, change their behaviour and introduce new classes and functionality. PATCH file format \ud800\udf3e The .patch file contains one or more small programs that are designed to change the engine code (game executable). Usually used to fix bugs. Union plug-ins contain a embedded .patch file, this file usually contains changes to the binary necessary for the proper function of the plug-in. dev pageg test \ud800\udf3e","title":"Union"},{"location":"zengin/union/#union","text":"Union is a system to patch and extend Gothic's engine the ZenGin. It allows you to load .dll files - ZenGin extensions created using the Gothic/Union SDK and .patch files - files designed to patch the game's executable. The Union installer also contains the SystemPack a collection of bug fixes and engine edits that improve performance.","title":"Union"},{"location":"zengin/union/#plug-ins","text":"Union plugins are shipped in the form of a .dll library. This library contains the compiled C++ code with the Union SDK and a embedded .patch file.","title":"Plug-ins"},{"location":"zengin/union/#union-sdk-gothic-api","text":"Union software development kit is a collection of tools and the Gothic API that allows you to create Union plugins and alter the engine behaviour. Gothic API a set of 4 interfaces (each for one different ZenGin version) that allow you to interface with the engine, access the enigne objects, change their behaviour and introduce new classes and functionality.","title":"Union SDK &amp; Gothic API"},{"location":"zengin/union/#patch-file-format","text":"The .patch file contains one or more small programs that are designed to change the engine code (game executable). Usually used to fix bugs. Union plug-ins contain a embedded .patch file, this file usually contains changes to the binary necessary for the proper function of the plug-in.","title":"PATCH file format"},{"location":"zengin/union/#dev-pageg-test","text":"","title":"dev pageg test"},{"location":"zengin/video/","text":"Video \ud800\udf3e To get a video cutscene, intro or outro into the game the video needs to be in a proper format - BINK video format .bik . Editing the video \ud800\udf3e Okay, I know this might be a bit out of the scope of this, but the video you recorded has to be edited. My go-to editor for this is kdenlive . It works very well, it is free and open source, and it supports BINK video as an input, which is great if you want to include subtitles in the video. My version of kdenlive does not knw how to export video straight to .bik , so I just export my video to .mp4 and then convert it with RAD Video Tools. RAD Video Tools \ud800\udf3e RAD Video Tools is a tool for converting other video formats to BINK .bik that Gothic can use. Warning Gothic 1 bink implementation has some problems, in RAD tools you have to set the audio compression to 104 and above to get video to work in Gothic 1. NicoDE's comment: Add 100 to the audio compression level when encoding videos, e.g. 104 for level 4 with old sound format (should be mentioned in the RAD Video Tools documentation) for G1 without updated Miles libraries. Note Newest Union (1.0m at the time of writing) has a new patch for BINK video playback. The issue with sound should be fixed.","title":"Video"},{"location":"zengin/video/#video","text":"To get a video cutscene, intro or outro into the game the video needs to be in a proper format - BINK video format .bik .","title":"Video"},{"location":"zengin/video/#editing-the-video","text":"Okay, I know this might be a bit out of the scope of this, but the video you recorded has to be edited. My go-to editor for this is kdenlive . It works very well, it is free and open source, and it supports BINK video as an input, which is great if you want to include subtitles in the video. My version of kdenlive does not knw how to export video straight to .bik , so I just export my video to .mp4 and then convert it with RAD Video Tools.","title":"Editing the video"},{"location":"zengin/video/#rad-video-tools","text":"RAD Video Tools is a tool for converting other video formats to BINK .bik that Gothic can use. Warning Gothic 1 bink implementation has some problems, in RAD tools you have to set the audio compression to 104 and above to get video to work in Gothic 1. NicoDE's comment: Add 100 to the audio compression level when encoding videos, e.g. 104 for level 4 with old sound format (should be mentioned in the RAD Video Tools documentation) for G1 without updated Miles libraries. Note Newest Union (1.0m at the time of writing) has a new patch for BINK video playback. The issue with sound should be fixed.","title":"RAD Video Tools"},{"location":"zengin/worlds/","text":"Worlds \ud800\udf3e Worlds, in ZenGin saved in .ZEN files, are archives that contain the world mesh (model), BSP tree and the information of all objects in the world. Spacer is used to create these .ZEN files. There are other world editors.","title":"Worlds"},{"location":"zengin/worlds/#worlds","text":"Worlds, in ZenGin saved in .ZEN files, are archives that contain the world mesh (model), BSP tree and the information of all objects in the world. Spacer is used to create these .ZEN files. There are other world editors.","title":"Worlds"}]}